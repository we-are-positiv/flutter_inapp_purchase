"use strict";(self.webpackChunkflutter_inapp_purchase_docs=self.webpackChunkflutter_inapp_purchase_docs||[]).push([[4388],{2708:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"api/core-methods","title":"Core Methods","description":"Essential methods for implementing in-app purchases with flutterinapppurchase v6.0.0. All methods support both iOS and Android platforms with unified APIs.","source":"@site/docs/api/core-methods.md","sourceDirName":"api","slug":"/api/core-methods","permalink":"/docs/api/core-methods","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/docs/api/core-methods.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Core Methods","sidebar_position":3},"sidebar":"docsSidebar","previous":{"title":"Types","permalink":"/docs/api/types"},"next":{"title":"Listeners","permalink":"/docs/api/listeners"}}');var i=s(4848),t=s(8453);const c={title:"Core Methods",sidebar_position:3},a="Core Methods",o={},d=[{value:"Connection Management",id:"connection-management",level:2},{value:"initConnection()",id:"initconnection",level:3},{value:"endConnection()",id:"endconnection",level:3},{value:"finalize()",id:"finalize",level:3},{value:"Product Loading",id:"product-loading",level:2},{value:"requestProducts()",id:"requestproducts",level:3},{value:"getProducts()",id:"getproducts",level:3},{value:"getSubscriptions()",id:"getsubscriptions",level:3},{value:"Purchase Processing",id:"purchase-processing",level:2},{value:"requestPurchase()",id:"requestpurchase",level:3},{value:"requestPurchaseAuto()",id:"requestpurchaseauto",level:3},{value:"Transaction Management",id:"transaction-management",level:2},{value:"finishTransaction()",id:"finishtransaction",level:3},{value:"consumePurchaseAndroid()",id:"consumepurchaseandroid",level:3},{value:"Purchase History",id:"purchase-history",level:2},{value:"getAvailablePurchases()",id:"getavailablepurchases",level:3},{value:"getPurchaseHistories()",id:"getpurchasehistories",level:3},{value:"restorePurchases()",id:"restorepurchases",level:3},{value:"Platform-Specific Methods",id:"platform-specific-methods",level:2},{value:"iOS-Specific Methods",id:"ios-specific-methods",level:3},{value:"presentCodeRedemptionSheetIOS()",id:"presentcoderedemptionsheetios",level:4},{value:"showManageSubscriptionsIOS()",id:"showmanagesubscriptionsios",level:4},{value:"getAppStoreCountryIOS()",id:"getappstorecountryios",level:4},{value:"Android-Specific Methods",id:"android-specific-methods",level:3},{value:"deepLinkToSubscriptionsAndroid()",id:"deeplinktosubscriptionsandroid",level:4},{value:"getConnectionStateAndroid()",id:"getconnectionstateandroid",level:4},{value:"Error Handling",id:"error-handling",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Connection Management",id:"1-connection-management",level:3},{value:"2. Product Loading with Caching",id:"2-product-loading-with-caching",level:3},{value:"3. Purchase Flow with Error Handling",id:"3-purchase-flow-with-error-handling",level:3},{value:"Migration Notes",id:"migration-notes",level:2},{value:"See Also",id:"see-also",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"core-methods",children:"Core Methods"})}),"\n",(0,i.jsx)(n.p,{children:"Essential methods for implementing in-app purchases with flutter_inapp_purchase v6.0.0. All methods support both iOS and Android platforms with unified APIs."}),"\n",(0,i.jsxs)(n.p,{children:["\u26a0\ufe0f ",(0,i.jsx)(n.strong,{children:"Platform Differences"}),": While the API is unified, there are important differences between iOS and Android implementations. Each method documents platform-specific behavior."]}),"\n",(0,i.jsx)(n.h2,{id:"connection-management",children:"Connection Management"}),"\n",(0,i.jsx)(n.h3,{id:"initconnection",children:"initConnection()"}),"\n",(0,i.jsx)(n.p,{children:"Initializes the connection to the platform store."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Future<void> initConnection() async\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description"}),": Establishes connection with the App Store (iOS) or Google Play Store (Android). Must be called before any other IAP operations."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Platform Differences"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"iOS"}),": Connects to StoreKit 2 (iOS 15+) or StoreKit 1 (fallback)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Android"}),": Connects to Google Play Billing Client v8"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"try {\n  await FlutterInappPurchase.instance.initConnection();\n  print('IAP connection initialized successfully');\n} catch (e) {\n  print('Failed to initialize IAP: $e');\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Throws"}),": ",(0,i.jsx)(n.code,{children:"PurchaseError"})," if connection fails or already initialized"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"See Also"}),": ",(0,i.jsx)(n.a,{href:"#endconnection",children:"endConnection()"}),", ",(0,i.jsx)(n.a,{href:"/docs/guides/lifecycle",children:"Connection Lifecycle"})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"endconnection",children:"endConnection()"}),"\n",(0,i.jsx)(n.p,{children:"Ends the connection to the platform store."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Future<void> endConnection() async\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description"}),": Cleanly closes the store connection and frees resources. Should be called when IAP functionality is no longer needed."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"try {\n  await FlutterInappPurchase.instance.endConnection();\n  print('IAP connection closed');\n} catch (e) {\n  print('Failed to close IAP connection: $e');\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),": Connection can be re-established by calling ",(0,i.jsx)(n.code,{children:"initConnection()"})," again."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"finalize",children:"finalize()"}),"\n",(0,i.jsxs)(n.p,{children:["Alternative name for ",(0,i.jsx)(n.code,{children:"endConnection()"})," for backward compatibility."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Future<void> finalize() async\n"})}),"\n",(0,i.jsx)(n.h2,{id:"product-loading",children:"Product Loading"}),"\n",(0,i.jsx)(n.h3,{id:"requestproducts",children:"requestProducts()"}),"\n",(0,i.jsx)(n.p,{children:"Loads product information from the store."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Future<List<BaseProduct>> requestProducts({\n  required List<String> productIds,\n  PurchaseType type = PurchaseType.inapp,\n}) async\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"productIds"})," - List of product identifiers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"type"})," - Product type (optional, defaults to ",(0,i.jsx)(n.code,{children:"PurchaseType.inapp"}),")"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),": List of products with pricing and metadata"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"try {\n  final products = await FlutterInappPurchase.instance.requestProducts(\n    productIds: ['product_1', 'product_2', 'premium_upgrade'],\n    type: PurchaseType.inapp,\n  );\n\n  for (final product in products) {\n    print('Product: ${product.id}');\n    print('Price: ${product.displayPrice}');\n    print('Title: ${product.title}');\n  }\n} catch (e) {\n  print('Failed to load products: $e');\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Platform Differences"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"iOS"}),": Uses ",(0,i.jsx)(n.code,{children:"SKProductsRequest"})," (StoreKit)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Android"}),": Uses ",(0,i.jsx)(n.code,{children:"querySkuDetails()"})," (Billing Client)"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"getproducts",children:"getProducts()"}),"\n",(0,i.jsx)(n.p,{children:"Legacy method for loading in-app products."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Future<List<IapItem>> getProducts(List<String> skus) async\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"skus"})," - List of product identifiers"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),": List of ",(0,i.jsx)(n.code,{children:"IapItem"})," objects"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"final products = await FlutterInappPurchase.instance.getProducts([\n  'coins_100',\n  'coins_500',\n  'remove_ads'\n]);\n\nfor (final product in products) {\n  print('${product.title}: ${product.localizedPrice}');\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"getsubscriptions",children:"getSubscriptions()"}),"\n",(0,i.jsx)(n.p,{children:"Legacy method for loading subscription products."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Future<List<IapItem>> getSubscriptions(List<String> skus) async\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"skus"})," - List of subscription identifiers"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),": List of subscription ",(0,i.jsx)(n.code,{children:"IapItem"})," objects with subscription-specific metadata"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"final subscriptions = await FlutterInappPurchase.instance.getSubscriptions([\n  'premium_monthly',\n  'premium_yearly'\n]);\n\nfor (final sub in subscriptions) {\n  print('${sub.title}: ${sub.localizedPrice}');\n  print('Period: ${sub.subscriptionPeriodAndroid}'); // Android\n  print('Period: ${sub.subscriptionPeriodUnitIOS}'); // iOS\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"purchase-processing",children:"Purchase Processing"}),"\n",(0,i.jsx)(n.h3,{id:"requestpurchase",children:"requestPurchase()"}),"\n",(0,i.jsx)(n.p,{children:"Initiates a purchase using platform-specific request objects."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Future<void> requestPurchase({\n  required RequestPurchase request,\n  required PurchaseType type,\n}) async\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"request"})," - Platform-specific purchase request"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"type"})," - Purchase type (",(0,i.jsx)(n.code,{children:"PurchaseType.inapp"})," or ",(0,i.jsx)(n.code,{children:"PurchaseType.subs"}),")"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// Create platform-specific request\nfinal request = RequestPurchase(\n  ios: RequestPurchaseIOS(\n    sku: 'premium_upgrade',\n    quantity: 1,\n  ),\n  android: RequestPurchaseAndroid(\n    skus: ['premium_upgrade'],\n  ),\n);\n\ntry {\n  await FlutterInappPurchase.instance.requestPurchase(\n    request: request,\n    type: PurchaseType.inapp,\n  );\n  // Listen to purchaseUpdated stream for result\n} catch (e) {\n  print('Purchase request failed: $e');\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Platform Differences"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"iOS"}),": Single ",(0,i.jsx)(n.code,{children:"sku"}),", supports ",(0,i.jsx)(n.code,{children:"quantity"})," and promotional offers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Android"}),": Array of ",(0,i.jsx)(n.code,{children:"skus"}),", supports obfuscated user IDs"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"requestpurchaseauto",children:"requestPurchaseAuto()"}),"\n",(0,i.jsx)(n.p,{children:"Simplified purchase method with automatic platform detection."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Future<void> requestPurchaseAuto({\n  required String sku,\n  required PurchaseType type,\n  // iOS-specific optional parameters\n  bool? andDangerouslyFinishTransactionAutomaticallyIOS,\n  String? appAccountToken,\n  int? quantity,\n  PaymentDiscount? withOffer,\n  // Android-specific optional parameters\n  String? obfuscatedAccountIdAndroid,\n  String? obfuscatedProfileIdAndroid,\n  bool? isOfferPersonalized,\n  String? purchaseToken,\n  int? offerTokenIndex,\n  int? prorationMode,\n  // Android subscription-specific\n  int? replacementModeAndroid,\n  List<SubscriptionOfferAndroid>? subscriptionOffers,\n}) async\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"sku"})," - Product identifier"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"type"})," - Purchase type"]}),"\n",(0,i.jsx)(n.li,{children:"Platform-specific optional parameters"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"try {\n  await FlutterInappPurchase.instance.requestPurchaseAuto(\n    sku: 'premium_upgrade',\n    type: PurchaseType.inapp,\n    quantity: 1,  // iOS only\n    obfuscatedAccountIdAndroid: 'user_123',  // Android only\n  );\n} catch (e) {\n  print('Auto purchase failed: $e');\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"transaction-management",children:"Transaction Management"}),"\n",(0,i.jsx)(n.h3,{id:"finishtransaction",children:"finishTransaction()"}),"\n",(0,i.jsx)(n.p,{children:"Completes a transaction after successful purchase processing."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Future<void> finishTransaction(\n  PurchasedItem purchase, {\n  bool isConsumable = false,\n}) async\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"purchase"})," - The purchased item to finish"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"isConsumable"})," - Whether the product is consumable (Android only)"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// In your purchase success handler\nFlutterInappPurchase.purchaseUpdated.listen((purchase) async {\n  if (purchase != null) {\n    try {\n      // Deliver the product to user\n      await deliverProduct(purchase.productId);\n\n      // Finish the transaction\n      await FlutterInappPurchase.instance.finishTransaction(\n        purchase,\n        isConsumable: true, // For consumable products\n      );\n\n      print('Transaction completed successfully');\n    } catch (e) {\n      print('Failed to finish transaction: $e');\n    }\n  }\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Platform Behavior"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"iOS"}),": Calls ",(0,i.jsx)(n.code,{children:"finishTransaction"})," on the transaction"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Android"}),": Calls ",(0,i.jsx)(n.code,{children:"consumePurchase"})," (consumable) or ",(0,i.jsx)(n.code,{children:"acknowledgePurchase"})," (non-consumable)"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"consumepurchaseandroid",children:"consumePurchaseAndroid()"}),"\n",(0,i.jsx)(n.p,{children:"Android-specific method to consume a purchase."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Future<void> consumePurchaseAndroid({\n  required String purchaseToken,\n}) async\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"purchaseToken"})," - The purchase token to consume"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// Android-specific consumption\nif (Platform.isAndroid) {\n  try {\n    await FlutterInappPurchase.instance.consumePurchaseAndroid(\n      purchaseToken: purchase.purchaseToken!,\n    );\n    print('Purchase consumed successfully');\n  } catch (e) {\n    print('Failed to consume purchase: $e');\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),": Only available on Android. Use ",(0,i.jsx)(n.code,{children:"finishTransaction()"})," for cross-platform compatibility."]}),"\n",(0,i.jsx)(n.h2,{id:"purchase-history",children:"Purchase History"}),"\n",(0,i.jsx)(n.h3,{id:"getavailablepurchases",children:"getAvailablePurchases()"}),"\n",(0,i.jsx)(n.p,{children:"Gets all available (unconsumed) purchases."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Future<List<Purchase>> getAvailablePurchases() async\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),": List of available purchases"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"try {\n  final purchases = await FlutterInappPurchase.instance.getAvailablePurchases();\n\n  print('Found ${purchases.length} available purchases');\n  for (final purchase in purchases) {\n    print('Product: ${purchase.productId}');\n    print('Date: ${purchase.transactionDate}');\n  }\n} catch (e) {\n  print('Failed to get available purchases: $e');\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"getpurchasehistories",children:"getPurchaseHistories()"}),"\n",(0,i.jsx)(n.p,{children:"Gets purchase history including consumed items."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Future<List<Purchase>> getPurchaseHistories() async\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),": List of historical purchases"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"try {\n  final history = await FlutterInappPurchase.instance.getPurchaseHistories();\n\n  print('Purchase history: ${history.length} items');\n  for (final purchase in history) {\n    print('${purchase.productId} - ${purchase.transactionDate}');\n  }\n} catch (e) {\n  print('Failed to get purchase history: $e');\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"restorepurchases",children:"restorePurchases()"}),"\n",(0,i.jsx)(n.p,{children:"Restores previous purchases (primarily for iOS)."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Future<void> restorePurchases() async\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"try {\n  await FlutterInappPurchase.instance.restorePurchases();\n\n  // Check available purchases after restoration\n  final restored = await FlutterInappPurchase.instance.getAvailablePurchases();\n  print('Restored ${restored.length} purchases');\n} catch (e) {\n  print('Failed to restore purchases: $e');\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Platform Behavior"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"iOS"}),": Triggers App Store purchase restoration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Android"}),": Returns cached purchase data"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"platform-specific-methods",children:"Platform-Specific Methods"}),"\n",(0,i.jsx)(n.h3,{id:"ios-specific-methods",children:"iOS-Specific Methods"}),"\n",(0,i.jsx)(n.h4,{id:"presentcoderedemptionsheetios",children:"presentCodeRedemptionSheetIOS()"}),"\n",(0,i.jsx)(n.p,{children:"Presents the App Store code redemption sheet."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Future<void> presentCodeRedemptionSheetIOS() async\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"if (Platform.isIOS) {\n  try {\n    await FlutterInappPurchase.instance.presentCodeRedemptionSheetIOS();\n  } catch (e) {\n    print('Failed to present redemption sheet: $e');\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Requirements"}),": iOS 14.0+"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"showmanagesubscriptionsios",children:"showManageSubscriptionsIOS()"}),"\n",(0,i.jsx)(n.p,{children:"Shows the subscription management interface."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Future<void> showManageSubscriptionsIOS() async\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"if (Platform.isIOS) {\n  try {\n    await FlutterInappPurchase.instance.showManageSubscriptionsIOS();\n  } catch (e) {\n    print('Failed to show subscription management: $e');\n  }\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"getappstorecountryios",children:"getAppStoreCountryIOS()"}),"\n",(0,i.jsx)(n.p,{children:"Gets the App Store country code."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Future<String?> getAppStoreCountryIOS() async\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),": Country code or null"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"if (Platform.isIOS) {\n  final country = await FlutterInappPurchase.instance.getAppStoreCountryIOS();\n  print('App Store country: $country');\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"android-specific-methods",children:"Android-Specific Methods"}),"\n",(0,i.jsx)(n.h4,{id:"deeplinktosubscriptionsandroid",children:"deepLinkToSubscriptionsAndroid()"}),"\n",(0,i.jsx)(n.p,{children:"Opens the Google Play subscription management page."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Future<void> deepLinkToSubscriptionsAndroid() async\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"if (Platform.isAndroid) {\n  try {\n    await FlutterInappPurchase.instance.deepLinkToSubscriptionsAndroid();\n  } catch (e) {\n    print('Failed to open subscription management: $e');\n  }\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"getconnectionstateandroid",children:"getConnectionStateAndroid()"}),"\n",(0,i.jsx)(n.p,{children:"Gets the current billing client connection state."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Future<int> getConnectionStateAndroid() async\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),": Connection state code"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"if (Platform.isAndroid) {\n  final state = await FlutterInappPurchase.instance.getConnectionStateAndroid();\n  print('Billing client state: $state');\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsxs)(n.p,{children:["All core methods may throw ",(0,i.jsx)(n.code,{children:"PurchaseError"})," exceptions. Always wrap calls in try-catch blocks:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"try {\n  await FlutterInappPurchase.instance.initConnection();\n} on PurchaseError catch (e) {\n  switch (e.code) {\n    case ErrorCode.eAlreadyInitialized:\n      print('Already initialized');\n      break;\n    case ErrorCode.eNetworkError:\n      print('Network error - check connection');\n      break;\n    default:\n      print('Purchase error: ${e.message}');\n  }\n} catch (e) {\n  print('Unexpected error: $e');\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"1-connection-management",children:"1. Connection Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"class IAPManager {\n  static bool _isInitialized = false;\n\n  static Future<void> initialize() async {\n    if (!_isInitialized) {\n      await FlutterInappPurchase.instance.initConnection();\n      _isInitialized = true;\n    }\n  }\n\n  static Future<void> dispose() async {\n    if (_isInitialized) {\n      await FlutterInappPurchase.instance.endConnection();\n      _isInitialized = false;\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-product-loading-with-caching",children:"2. Product Loading with Caching"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"class ProductManager {\n  static List<BaseProduct>? _cachedProducts;\n  static DateTime? _lastFetch;\n  static const _cacheTimeout = Duration(hours: 1);\n\n  static Future<List<BaseProduct>> getProducts(List<String> skus) async {\n    if (_cachedProducts != null &&\n        _lastFetch != null &&\n        DateTime.now().difference(_lastFetch!) < _cacheTimeout) {\n      return _cachedProducts!;\n    }\n\n    _cachedProducts = await FlutterInappPurchase.instance.requestProducts(\n      productIds: skus,\n      type: PurchaseType.inapp,\n    );\n    _lastFetch = DateTime.now();\n\n    return _cachedProducts!;\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-purchase-flow-with-error-handling",children:"3. Purchase Flow with Error Handling"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Future<void> makePurchase(String sku) async {\n  try {\n    final request = RequestPurchase(\n      ios: RequestPurchaseIOS(sku: sku, quantity: 1),\n      android: RequestPurchaseAndroid(skus: [sku]),\n    );\n\n    await FlutterInappPurchase.instance.requestPurchase(\n      request: request,\n      type: PurchaseType.inapp,\n    );\n\n    // Success handling happens in purchaseUpdated listener\n  } on PurchaseError catch (e) {\n    if (e.code == ErrorCode.eUserCancelled) {\n      // User cancelled - don't show error\n      return;\n    }\n\n    // Show error to user\n    showErrorDialog(e.message);\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"migration-notes",children:"Migration Notes"}),"\n",(0,i.jsxs)(n.p,{children:["\u26a0\ufe0f ",(0,i.jsx)(n.strong,{children:"Breaking Changes from v5.x:"})]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Method Names"}),": ",(0,i.jsx)(n.code,{children:"requestPurchase()"})," now requires ",(0,i.jsx)(n.code,{children:"RequestPurchase"})," object"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameters"}),": Platform-specific parameters moved to request objects"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Error Handling"}),": ",(0,i.jsx)(n.code,{children:"PurchaseError"})," replaces simple string errors"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Initialization"}),": Must call ",(0,i.jsx)(n.code,{children:"initConnection()"})," before other operations"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/api/types",children:"Types"})," - Request and response object definitions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/api/listeners",children:"Listeners"})," - Event streams for purchase updates"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/api/error-codes",children:"Error Codes"})," - Comprehensive error handling"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/guides/purchases",children:"Purchase Guide"})," - Complete purchase implementation"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>a});var r=s(6540);const i={},t=r.createContext(i);function c(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);