"use strict";(self.webpackChunkflutter_inapp_purchase_docs=self.webpackChunkflutter_inapp_purchase_docs||[]).push([[7611],{571:(e,n,r)=>{r.d(n,{A:()=>i});var s=r(6540),a=r(4848);function t({className:e="adfit",style:n,unit:r,height:t,width:i}){return(0,s.useEffect)(()=>{const n=setTimeout(()=>{const n=document.querySelector(`.${e}`);if(!n)return void console.warn(`AdFit: Element with class "${e}" not found`);const s=n.querySelectorAll(".kakao_ad_area"),a=n.querySelectorAll('script[src*="kas/static/ba.min.js"]');s.forEach(e=>e.remove()),a.forEach(e=>e.remove());const c=document.createElement("ins"),u=document.createElement("script");c.className="kakao_ad_area",c.style.cssText="display:none; width:100%;",u.async=!0,u.type="text/javascript",u.src="//t1.daumcdn.net/kas/static/ba.min.js",c.setAttribute("data-ad-width",i.toString()),c.setAttribute("data-ad-height",t.toString()),c.setAttribute("data-ad-unit",r),n.appendChild(c),n.appendChild(u)},100);return()=>clearTimeout(n)},[e,r,t,i]),(0,a.jsx)("div",{style:n,children:(0,a.jsx)("div",{className:e})})}function i(){return(0,a.jsx)(t,{unit:"DAN-YTmjDwlbcP42HBg6",height:100,width:320,className:"adfit-top",style:{flex:1,marginTop:24,marginBottom:24}})}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>c});var s=r(6540);const a={},t=s.createContext(a);function i(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(t.Provider,{value:n},e.children)}},8729:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>u,default:()=>p,frontMatter:()=>c,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"guides/purchases","title":"Purchases","description":"Complete guide to implementing in-app purchases with flutterinapppurchase v6.0.0, covering everything from basic setup to advanced purchase handling.","source":"@site/versioned_docs/version-6.3/guides/purchases.md","sourceDirName":"guides","slug":"/guides/purchases","permalink":"/docs/6.3/guides/purchases","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/versioned_docs/version-6.3/guides/purchases.md","tags":[],"version":"6.3","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Purchases"},"sidebar":"docsSidebar","previous":{"title":"Android Setup","permalink":"/docs/6.3/getting-started/android-setup"},"next":{"title":"Lifecycle","permalink":"/docs/6.3/guides/lifecycle"}}');var a=r(4848),t=r(8453),i=r(571);const c={sidebar_position:3,title:"Purchases"},u="Purchases",o={},d=[{value:"Purchase Flow Overview",id:"purchase-flow-overview",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"Purchase Types",id:"purchase-types",level:3},{value:"Platform Differences",id:"platform-differences",level:3},{value:"Basic Purchase Flow",id:"basic-purchase-flow",level:2},{value:"1. Setup Purchase Listeners",id:"1-setup-purchase-listeners",level:3},{value:"2. Using with Hooks (Recommended)",id:"2-using-with-hooks-recommended",level:3},{value:"3. Request a Purchase",id:"3-request-a-purchase",level:3},{value:"New Platform-Specific API (v2.7.0+)",id:"new-platform-specific-api-v270",level:2},{value:"New Product Loading API",id:"new-product-loading-api",level:3},{value:"Legacy API (Still Supported)",id:"legacy-api-still-supported",level:3},{value:"New Subscription API (v2.7.0+)",id:"new-subscription-api-v270",level:2},{value:"Subscription Purchase",id:"subscription-purchase",level:3},{value:"Legacy Subscription API",id:"legacy-subscription-api",level:3},{value:"Important Notes",id:"important-notes",level:2},{value:"Purchase Flow Best Practices",id:"purchase-flow-best-practices",level:3},{value:"Pending Purchases",id:"pending-purchases",level:3},{value:"Getting Product Information",id:"getting-product-information",level:2},{value:"Retrieving Product Prices",id:"retrieving-product-prices",level:3},{value:"Platform Support",id:"platform-support",level:3},{value:"Checking Platform Compatibility",id:"checking-platform-compatibility",level:3},{value:"Product Types",id:"product-types",level:2},{value:"Consumable Products",id:"consumable-products",level:3},{value:"Non-Consumable Products",id:"non-consumable-products",level:3},{value:"Subscriptions",id:"subscriptions",level:3},{value:"Advanced Purchase Handling",id:"advanced-purchase-handling",level:2},{value:"Purchase Restoration",id:"purchase-restoration",level:3},{value:"Handling Pending Purchases",id:"handling-pending-purchases",level:3},{value:"Subscription Management",id:"subscription-management",level:3},{value:"Receipt Validation",id:"receipt-validation",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Common Purchase Errors",id:"common-purchase-errors",level:3},{value:"Testing Purchases",id:"testing-purchases",level:2},{value:"iOS Testing",id:"ios-testing",level:3},{value:"Android Testing",id:"android-testing",level:3},{value:"Complete Example",id:"complete-example",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"purchases",children:"Purchases"})}),"\n",(0,a.jsx)(i.A,{}),"\n",(0,a.jsx)(n.p,{children:"Complete guide to implementing in-app purchases with flutter_inapp_purchase v6.0.0, covering everything from basic setup to advanced purchase handling."}),"\n",(0,a.jsx)(n.h2,{id:"purchase-flow-overview",children:"Purchase Flow Overview"}),"\n",(0,a.jsx)(n.p,{children:"The in-app purchase flow follows this standardized pattern:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Initialize Connection"})," - Establish connection with the store"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Setup Purchase Listeners"})," - Listen for purchase updates and errors"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Load Products"})," - Fetch product information from the store"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Request Purchase"})," - Initiate purchase flow"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Handle Updates"})," - Process purchase results via streams"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Deliver Content"})," - Provide purchased content to user"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Finish Transaction"})," - Complete the transaction with the store"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,a.jsx)(n.h3,{id:"purchase-types",children:"Purchase Types"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Consumable"}),": Can be purchased multiple times (coins, gems, lives)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Non-Consumable"}),": Purchased once, owned forever (premium features, ad removal)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Subscriptions"}),": Recurring purchases with auto-renewal"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"platform-differences",children:"Platform Differences"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"iOS"}),": Uses StoreKit 2 (iOS 15.0+) with fallback to StoreKit 1"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Android"}),": Uses Google Play Billing Client v8"]}),"\n",(0,a.jsx)(n.li,{children:"Both platforms use the same API surface in flutter_inapp_purchase"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"basic-purchase-flow",children:"Basic Purchase Flow"}),"\n",(0,a.jsx)(n.h3,{id:"1-setup-purchase-listeners",children:"1. Setup Purchase Listeners"}),"\n",(0,a.jsx)(n.p,{children:"Before making any purchases, set up listeners to handle purchase updates and errors:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"import 'dart:async';\nimport 'dart:io';\nimport 'package:flutter_inapp_purchase/flutter_inapp_purchase.dart';\n\nclass PurchaseHandler {\n  // Using singleton instance for in-app purchases\n  final _iap = FlutterInappPurchase.instance;\n\n  StreamSubscription<PurchasedItem?>? _purchaseUpdatedSubscription;\n  StreamSubscription<PurchaseResult?>? _purchaseErrorSubscription;\n\n  void setupPurchaseListeners() {\n    // Listen to successful purchases\n    _purchaseUpdatedSubscription = _iap.purchaseUpdated.listen(\n      (purchasedItem) {\n        if (purchasedItem != null) {\n          debugPrint('Purchase update received: ${purchasedItem.productId}');\n          _handlePurchaseUpdate(purchasedItem);\n        }\n      },\n    );\n\n    // Listen to purchase errors\n    _purchaseErrorSubscription = _iap.purchaseError.listen(\n      (purchaseError) {\n        if (purchaseError != null) {\n          debugPrint('Purchase failed: ${purchaseError.message}');\n          _handlePurchaseError(purchaseError);\n        }\n      },\n    );\n  }\n\n  void dispose() {\n    _purchaseUpdatedSubscription?.cancel();\n    _purchaseErrorSubscription?.cancel();\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"2-using-with-hooks-recommended",children:"2. Using with Hooks (Recommended)"}),"\n",(0,a.jsx)(n.p,{children:"For a more structured approach, use this purchase handler pattern:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"class ProductsScreen extends StatefulWidget {\n  @override\n  State<ProductsScreen> createState() => _ProductsScreenState();\n}\n\nclass _ProductsScreenState extends State<ProductsScreen> {\n  final List<String> productIds = [\n    'dev.hyo.martie.10bulbs',\n    'dev.hyo.martie.30bulbs',\n  ];\n\n  String? _purchaseResult;\n  bool _isProcessing = false;\n  StreamSubscription<PurchasedItem?>? _purchaseUpdatedSubscription;\n  StreamSubscription<PurchaseResult?>? _purchaseErrorSubscription;\n\n  @override\n  void initState() {\n    super.initState();\n    _setupPurchaseListeners();\n\n    // Load products after initialization\n    Future.delayed(const Duration(milliseconds: 500), () {\n      if (mounted) {\n        _loadProducts();\n      }\n    });\n  }\n\n  @override\n  void dispose() {\n    _purchaseUpdatedSubscription?.cancel();\n    _purchaseErrorSubscription?.cancel();\n    super.dispose();\n  }\n\n  // Purchase listener setup...\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"3-request-a-purchase",children:"3. Request a Purchase"}),"\n",(0,a.jsxs)(n.p,{children:["Use the new ",(0,a.jsx)(n.code,{children:"requestPurchase"})," API for initiating purchases:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"Future<void> _handlePurchase(String productId) async {\n  // Using singleton instance for in-app purchases\n  final iap = FlutterInappPurchase.instance;\n\n  try {\n    setState(() {\n      _isProcessing = true;\n      _purchaseResult = 'Processing purchase...';\n    });\n\n    // Use the new requestPurchase API\n    await iap.requestPurchase(\n      request: RequestPurchase(\n        ios: RequestPurchaseIOS(\n          sku: productId,\n          quantity: 1,\n        ),\n        android: RequestPurchaseAndroid(\n          skus: [productId],\n        ),\n      ),\n      type: PurchaseType.inapp, // or PurchaseType.subs for subscriptions\n    );\n  } catch (error) {\n    setState(() {\n      _isProcessing = false;\n      _purchaseResult = '\u274c Purchase failed: $error';\n    });\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"new-platform-specific-api-v270",children:"New Platform-Specific API (v2.7.0+)"}),"\n",(0,a.jsx)(n.h3,{id:"new-product-loading-api",children:"New Product Loading API"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"Future<void> _loadProducts() async {\n  try {\n    // Use requestProducts (new API)\n    await FlutterInappPurchase.instance.requestProducts(\n      RequestProductsParams(\n        skus: productIds,\n        type: PurchaseType.inapp\n      ),\n    );\n\n    // Get products from provider or state management\n    final products = await FlutterInappPurchase.instance.getProducts(productIds);\n    debugPrint('Loaded ${products.length} products');\n  } catch (e) {\n    debugPrint('Error loading products: $e');\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"legacy-api-still-supported",children:"Legacy API (Still Supported)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"// Legacy method - still works but deprecated\nfinal products = await FlutterInappPurchase.instance.getProducts(productIds);\nfinal subscriptions = await FlutterInappPurchase.instance.getSubscriptions(subscriptionIds);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"new-subscription-api-v270",children:"New Subscription API (v2.7.0+)"}),"\n",(0,a.jsx)(n.h3,{id:"subscription-purchase",children:"Subscription Purchase"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"Future<void> requestSubscription(String productId) async {\n  await FlutterInappPurchase.instance.requestPurchase(\n    request: RequestPurchase(\n      ios: RequestPurchaseIOS(sku: productId),\n      android: RequestPurchaseAndroid(skus: [productId]),\n    ),\n    type: PurchaseType.subs,\n  );\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"legacy-subscription-api",children:"Legacy Subscription API"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"// Legacy method - still supported\nawait FlutterInappPurchase.instance.requestSubscription(productId);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"important-notes",children:"Important Notes"}),"\n",(0,a.jsx)(n.h3,{id:"purchase-flow-best-practices",children:"Purchase Flow Best Practices"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Always set up listeners first"})," before making any purchase requests"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Handle both success and error cases"})," appropriately"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Show loading states"})," during purchase processing"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Validate purchases server-side"})," for security"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Consume consumable products"})," after delivery"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"pending-purchases",children:"Pending Purchases"}),"\n",(0,a.jsx)(n.p,{children:"Handle cases where purchases might be pending:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"Future<void> _handlePurchaseUpdate(PurchasedItem purchasedItem) async {\n  debugPrint('Purchase successful: ${purchasedItem.productId}');\n\n  // Deliver the product to the user\n  await _deliverProduct(purchasedItem.productId);\n\n  // Finish the transaction\n  try {\n    if (Platform.isAndroid) {\n      // For Android consumable products - consume the purchase\n      if (purchasedItem.purchaseToken != null) {\n        await FlutterInappPurchase.instance.consumePurchaseAndroid(\n          purchaseToken: purchasedItem.purchaseToken!,\n        );\n        debugPrint('Android purchase consumed successfully');\n      }\n    } else if (Platform.isIOS) {\n      // For iOS - finish the transaction\n      await FlutterInappPurchase.instance.finishTransactionIOS(\n        purchasedItem,\n        isConsumable: true, // Set appropriately for your product type\n      );\n      debugPrint('iOS transaction finished');\n    }\n  } catch (e) {\n    debugPrint('Error finishing transaction: $e');\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"getting-product-information",children:"Getting Product Information"}),"\n",(0,a.jsx)(n.h3,{id:"retrieving-product-prices",children:"Retrieving Product Prices"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"class ProductInfo {\n  static Future<List<IapItem>> loadProductInformation(List<String> productIds) async {\n    try {\n      // Request products from store\n      await FlutterInappPurchase.instance.requestProducts(\n        RequestProductsParams(skus: productIds, type: PurchaseType.inapp),\n      );\n\n      // Get product details\n      final products = await FlutterInappPurchase.instance.getProducts(productIds);\n\n      for (final product in products) {\n        debugPrint('Product: ${product.productId}');\n        debugPrint('Title: ${product.title}');\n        debugPrint('Description: ${product.description}');\n        debugPrint('Price: ${product.localizedPrice}');\n        debugPrint('Currency: ${product.currency}');\n      }\n\n      return products;\n    } catch (e) {\n      debugPrint('Error loading product information: $e');\n      return [];\n    }\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"platform-support",children:"Platform Support"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"class PlatformSupport {\n  static Future<bool> checkPurchaseSupport() async {\n    try {\n      if (Platform.isIOS) {\n        // Check if device can make payments\n        final canMakePayments = await FlutterInappPurchase.instance.initialize();\n        return canMakePayments;\n      } else if (Platform.isAndroid) {\n        // Check Play Store connection\n        final connected = await FlutterInappPurchase.instance.initConnection();\n        return connected == 'connected';\n      }\n      return false;\n    } catch (e) {\n      debugPrint('Error checking purchase support: $e');\n      return false;\n    }\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"checking-platform-compatibility",children:"Checking Platform Compatibility"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"void checkPlatformFeatures() {\n  if (Platform.isIOS) {\n    // iOS-specific features\n    debugPrint('iOS platform detected');\n    // Can use iOS-specific methods like:\n    // - presentCodeRedemptionSheet()\n    // - showManageSubscriptions()\n    // - isEligibleForIntroOfferIOS()\n  } else if (Platform.isAndroid) {\n    // Android-specific features\n    debugPrint('Android platform detected');\n    // Can use Android-specific methods like:\n    // - consumePurchaseAndroid()\n    // - deepLinkToSubscriptionsAndroid()\n    // - getConnectionStateAndroid()\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"product-types",children:"Product Types"}),"\n",(0,a.jsx)(n.h3,{id:"consumable-products",children:"Consumable Products"}),"\n",(0,a.jsx)(n.p,{children:"Products that can be purchased multiple times:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"Future<void> handleConsumableProduct(PurchasedItem purchase) async {\n  // Deliver the consumable content (coins, lives, etc.)\n  await deliverConsumableProduct(purchase.productId);\n\n  // For Android - consume the purchase so it can be bought again\n  if (Platform.isAndroid && purchase.purchaseToken != null) {\n    await FlutterInappPurchase.instance.consumePurchaseAndroid(\n      purchaseToken: purchase.purchaseToken!,\n    );\n  }\n\n  // For iOS - finish transaction\n  if (Platform.isIOS) {\n    await FlutterInappPurchase.instance.finishTransactionIOS(\n      purchase,\n      isConsumable: true,\n    );\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"non-consumable-products",children:"Non-Consumable Products"}),"\n",(0,a.jsx)(n.p,{children:"Products purchased once and owned permanently:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"Future<void> handleNonConsumableProduct(PurchasedItem purchase) async {\n  // Deliver the permanent content (premium features, ad removal)\n  await deliverPermanentProduct(purchase.productId);\n\n  // For Android - acknowledge the purchase (don't consume)\n  if (Platform.isAndroid && purchase.purchaseToken != null) {\n    await FlutterInappPurchase.instance.acknowledgePurchaseAndroid(\n      purchaseToken: purchase.purchaseToken!,\n    );\n  }\n\n  // For iOS - finish transaction\n  if (Platform.isIOS) {\n    await FlutterInappPurchase.instance.finishTransactionIOS(\n      purchase,\n      isConsumable: false,\n    );\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"subscriptions",children:"Subscriptions"}),"\n",(0,a.jsx)(n.p,{children:"Recurring purchases with auto-renewal:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"Future<void> handleSubscriptionProduct(PurchasedItem purchase) async {\n  // Activate subscription for user\n  await activateSubscription(purchase.productId);\n\n  // For Android - acknowledge the subscription\n  if (Platform.isAndroid && purchase.purchaseToken != null) {\n    await FlutterInappPurchase.instance.acknowledgePurchaseAndroid(\n      purchaseToken: purchase.purchaseToken!,\n    );\n  }\n\n  // For iOS - finish transaction\n  if (Platform.isIOS) {\n    await FlutterInappPurchase.instance.finishTransactionIOS(\n      purchase,\n      isConsumable: false,\n    );\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"advanced-purchase-handling",children:"Advanced Purchase Handling"}),"\n",(0,a.jsx)(n.h3,{id:"purchase-restoration",children:"Purchase Restoration"}),"\n",(0,a.jsx)(n.p,{children:"Restore previously purchased items:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"Future<void> restorePurchases() async {\n  try {\n    // Restore completed transactions\n    await FlutterInappPurchase.instance.restorePurchases();\n\n    // Get available purchases\n    final purchases = await FlutterInappPurchase.instance.getAvailablePurchases();\n\n    debugPrint('Restored ${purchases.length} purchases');\n\n    // Process each restored purchase\n    for (final purchase in purchases) {\n      await _deliverProduct(purchase.productId);\n    }\n\n  } catch (e) {\n    debugPrint('Error restoring purchases: $e');\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"handling-pending-purchases",children:"Handling Pending Purchases"}),"\n",(0,a.jsx)(n.p,{children:"Handle purchases that are pending approval:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"void _handlePurchaseError(PurchaseResult error) {\n  debugPrint('Purchase failed: ${error.message}');\n\n  // Check if error is \"You already own this item\" (Error code 7)\n  if (error.responseCode == 7 || error.message?.contains('already own') == true) {\n    debugPrint('User already owns this item. Attempting to consume existing purchase...');\n    _consumeExistingPurchase();\n  } else {\n    // Handle other errors\n    _showErrorDialog(error.message ?? 'Unknown error occurred');\n  }\n}\n\nFuture<void> _consumeExistingPurchase() async {\n  try {\n    // Restore purchases to get all owned items\n    await FlutterInappPurchase.instance.restorePurchases();\n\n    // Get available purchases\n    final purchases = await FlutterInappPurchase.instance.getAvailablePurchases();\n\n    // Find and consume purchases for our product IDs\n    for (final purchase in purchases) {\n      if (productIds.contains(purchase.productId)) {\n        if (purchase.purchaseToken != null) {\n          await FlutterInappPurchase.instance.consumePurchaseAndroid(\n            purchaseToken: purchase.purchaseToken!,\n          );\n          debugPrint('Successfully consumed: ${purchase.productId}');\n        }\n      }\n    }\n  } catch (e) {\n    debugPrint('Error during consume process: $e');\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"subscription-management",children:"Subscription Management"}),"\n",(0,a.jsx)(n.p,{children:"Open native subscription management:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"Future<void> openSubscriptionManagement() async {\n  try {\n    if (Platform.isIOS) {\n      await FlutterInappPurchase.instance.showManageSubscriptions();\n    } else if (Platform.isAndroid) {\n      await FlutterInappPurchase.instance.deepLinkToSubscriptionsAndroid();\n    }\n  } catch (e) {\n    debugPrint('Failed to open subscription management: $e');\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"receipt-validation",children:"Receipt Validation"}),"\n",(0,a.jsx)(n.p,{children:"Validate purchases server-side for security:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"Future<bool> validatePurchaseReceipt(PurchasedItem purchase) async {\n  try {\n    if (Platform.isIOS) {\n      // Validate iOS receipt\n      final result = await FlutterInappPurchase.instance.validateReceiptIos(\n        receiptBody: {\n          'receipt-data': purchase.transactionReceipt,\n          'password': 'your-shared-secret', // From App Store Connect\n        },\n        isTest: true, // Set to false for production\n      );\n\n      return result != null && result['status'] == 0;\n\n    } else if (Platform.isAndroid) {\n      // Validate Android purchase\n      final result = await FlutterInappPurchase.instance.validateReceiptAndroid(\n        packageName: 'your.package.name',\n        productId: purchase.productId!,\n        productToken: purchase.purchaseToken!,\n        accessToken: 'your-access-token', // From Google Play Console\n        isSubscription: false,\n      );\n\n      return result != null;\n    }\n\n    return false;\n  } catch (e) {\n    debugPrint('Receipt validation failed: $e');\n    return false;\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,a.jsx)(n.h3,{id:"common-purchase-errors",children:"Common Purchase Errors"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"void handlePurchaseError(PurchaseResult error) {\n  switch (error.responseCode) {\n    case 1: // User cancelled\n      debugPrint('User cancelled the purchase');\n      break;\n    case 2: // Network error\n      debugPrint('Network error occurred');\n      break;\n    case 3: // Billing unavailable\n      debugPrint('Billing service unavailable');\n      break;\n    case 4: // Item unavailable\n      debugPrint('Requested item is unavailable');\n      break;\n    case 5: // Developer error\n      debugPrint('Invalid arguments provided to the API');\n      break;\n    case 6: // Error\n      debugPrint('Fatal error during the API action');\n      break;\n    case 7: // Item already owned\n      debugPrint('User already owns this item');\n      _handleAlreadyOwned();\n      break;\n    case 8: // Item not owned\n      debugPrint('User does not own this item');\n      break;\n    default:\n      debugPrint('Unknown error: ${error.message}');\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"testing-purchases",children:"Testing Purchases"}),"\n",(0,a.jsx)(n.h3,{id:"ios-testing",children:"iOS Testing"}),"\n",(0,a.jsx)(n.p,{children:"Set up iOS testing environment:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"// For iOS testing in sandbox environment\nvoid setupIOSTesting() {\n  debugPrint('Testing on iOS Sandbox');\n\n  // Use test Apple ID for sandbox testing\n  // Products must be configured in App Store Connect\n  // Test with different sandbox user accounts\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"android-testing",children:"Android Testing"}),"\n",(0,a.jsx)(n.p,{children:"Set up Android testing environment:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"// For Android testing with test purchases\nvoid setupAndroidTesting() {\n  debugPrint('Testing on Android');\n\n  // Use test product IDs like:\n  // - android.test.purchased\n  // - android.test.canceled\n  // - android.test.refunded\n  // - android.test.item_unavailable\n\n  final testProductIds = [\n    'android.test.purchased', // Always succeeds\n    'android.test.canceled',  // Always cancelled\n  ];\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,a.jsxs)(n.p,{children:["Here's a complete working example based on the project's ",(0,a.jsx)(n.code,{children:"products_screen.dart"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:'class PurchaseService {\n  final _iap = FlutterInappPurchase.instance;\n\n  StreamSubscription<PurchasedItem?>? _purchaseUpdatedSubscription;\n  StreamSubscription<PurchaseResult?>? _purchaseErrorSubscription;\n\n  void init() {\n    _setupPurchaseListeners();\n  }\n\n  void _setupPurchaseListeners() {\n    _purchaseUpdatedSubscription = FlutterInappPurchase.purchaseUpdated.listen(\n      (purchasedItem) {\n        if (purchasedItem != null) {\n          _handlePurchaseSuccess(purchasedItem);\n        }\n      },\n    );\n\n    _purchaseErrorSubscription = FlutterInappPurchase.purchaseError.listen(\n      (purchaseError) {\n        if (purchaseError != null) {\n          _handlePurchaseError(purchaseError);\n        }\n      },\n    );\n  }\n\n  Future<void> _handlePurchaseSuccess(PurchasedItem purchase) async {\n    // 1. Deliver product\n    await _deliverProduct(purchase.productId);\n\n    // 2. Finish transaction\n    if (Platform.isAndroid && purchase.purchaseToken != null) {\n      await _iap.consumePurchaseAndroid(\n        purchaseToken: purchase.purchaseToken!,\n      );\n    } else if (Platform.isIOS) {\n      await _iap.finishTransactionIOS(purchase, isConsumable: true);\n    }\n  }\n\n  void _handlePurchaseError(PurchaseResult error) {\n    if (error.responseCode == 7) {\n      // Handle "already owned" error\n      _consumeExistingPurchases();\n    }\n  }\n\n  Future<void> purchaseProduct(String productId) async {\n    await _iap.requestPurchase(\n      request: RequestPurchase(\n        ios: RequestPurchaseIOS(sku: productId, quantity: 1),\n        android: RequestPurchaseAndroid(skus: [productId]),\n      ),\n      type: PurchaseType.inapp,\n    );\n  }\n\n  void dispose() {\n    _purchaseUpdatedSubscription?.cancel();\n    _purchaseErrorSubscription?.cancel();\n  }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"This guide covers the complete purchase flow using the actual flutter_inapp_purchase v6.0.0 API, with examples based on the working code from your project."})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);