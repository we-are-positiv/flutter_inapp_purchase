"use strict";(self.webpackChunkflutter_inapp_purchase_docs=self.webpackChunkflutter_inapp_purchase_docs||[]).push([[8241],{6180:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"guides/offer-code-redemption","title":"Offer Code Redemption","description":"Guide to implementing promotional offer codes and subscription management with flutterinapppurchase v6.0.0, covering iOS and Android platforms.","source":"@site/versioned_docs/version-6.3/guides/offer-code-redemption.md","sourceDirName":"guides","slug":"/guides/offer-code-redemption","permalink":"/docs/6.3/guides/offer-code-redemption","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/versioned_docs/version-6.3/guides/offer-code-redemption.md","tags":[],"version":"6.3","sidebarPosition":8,"frontMatter":{"sidebar_position":8,"title":"Offer Code Redemption"},"sidebar":"docsSidebar","previous":{"title":"Lifecycle","permalink":"/docs/6.3/guides/lifecycle"},"next":{"title":"Troubleshooting","permalink":"/docs/6.3/guides/troubleshooting"}}');var r=i(4848),o=i(8453);const s={sidebar_position:8,title:"Offer Code Redemption"},a="Offer Code Redemption",d={},l=[{value:"Overview",id:"overview",level:2},{value:"iOS Offer Code Redemption",id:"ios-offer-code-redemption",level:2},{value:"Present Code Redemption Sheet",id:"present-code-redemption-sheet",level:3},{value:"Introductory Offers",id:"introductory-offers",level:3},{value:"Subscription Management",id:"subscription-management",level:2},{value:"iOS Subscription Management",id:"ios-subscription-management",level:3},{value:"Android Subscription Management",id:"android-subscription-management",level:2},{value:"Deep Linking to Subscriptions",id:"deep-linking-to-subscriptions",level:3},{value:"Complete Implementation Example",id:"complete-implementation-example",level:2},{value:"Cross-Platform Offer Handler",id:"cross-platform-offer-handler",level:3},{value:"Additional Features",id:"additional-features",level:2},{value:"App Store Information (iOS)",id:"app-store-information-ios",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"In a Flutter App",id:"in-a-flutter-app",level:3},{value:"Important Notes",id:"important-notes",level:2},{value:"Platform Differences",id:"platform-differences",level:3},{value:"Requirements",id:"requirements",level:3},{value:"Best Practices",id:"best-practices",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"offer-code-redemption",children:"Offer Code Redemption"})}),"\n",(0,r.jsx)(n.p,{children:"Guide to implementing promotional offer codes and subscription management with flutter_inapp_purchase v6.0.0, covering iOS and Android platforms."}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"This plugin provides native support for:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"iOS"}),": Offer code redemption sheet and subscription management (iOS 14+)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Android"}),": Deep linking to subscription management"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cross-platform"}),": Introductory offer eligibility checking"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"ios-offer-code-redemption",children:"iOS Offer Code Redemption"}),"\n",(0,r.jsx)(n.h3,{id:"present-code-redemption-sheet",children:"Present Code Redemption Sheet"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"import 'dart:io';\nimport 'package:flutter_inapp_purchase/flutter_inapp_purchase.dart';\n\nclass OfferCodeHandler {\n  final _iap = FlutterInappPurchase.instance;\n  \n  /// Present iOS system offer code redemption sheet (iOS 16+)\n  Future<void> presentOfferCodeRedemption() async {\n    if (!Platform.isIOS) {\n      debugPrint('Offer code redemption is only available on iOS');\n      return;\n    }\n    \n    try {\n      // Present the system offer code redemption sheet\n      await _iap.presentCodeRedemptionSheet();\n      debugPrint('Offer code redemption sheet presented');\n      \n      // Results will come through purchaseUpdated stream\n      _listenForRedemptionResults();\n      \n    } catch (e) {\n      debugPrint('Failed to present offer code sheet: $e');\n    }\n  }\n  \n  /// Alternative method for iOS 14+ compatibility\n  Future<void> presentOfferCodeRedemptionIOS() async {\n    if (!Platform.isIOS) return;\n    \n    try {\n      await _iap.presentCodeRedemptionSheetIOS();\n      debugPrint('iOS offer code redemption sheet presented');\n    } catch (e) {\n      debugPrint('Failed to present iOS offer code sheet: $e');\n    }\n  }\n  \n  void _listenForRedemptionResults() {\n    FlutterInappPurchase.purchaseUpdated.listen((purchase) {\n      if (purchase != null) {\n        debugPrint('Offer code redeemed: ${purchase.productId}');\n        // Handle successful redemption\n        _handleRedeemedPurchase(purchase);\n      }\n    });\n  }\n  \n  void _handleRedeemedPurchase(PurchasedItem purchase) {\n    // Process the redeemed purchase\n    // Verify receipt, deliver content, etc.\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"introductory-offers",children:"Introductory Offers"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"class IntroductoryOfferHandler {\n  final _iap = FlutterInappPurchase.instance;\n  \n  /// Check if user is eligible for introductory offer (iOS only)\n  Future<bool> isEligibleForIntroductoryOffer(String productId) async {\n    if (!Platform.isIOS) return false;\n    \n    try {\n      final isEligible = await _iap.isEligibleForIntroOfferIOS(productId);\n      debugPrint('Intro offer eligibility for $productId: $isEligible');\n      return isEligible;\n    } catch (e) {\n      debugPrint('Failed to check intro offer eligibility: $e');\n      return false;\n    }\n  }\n  \n  /// Get subscription status for a specific product\n  Future<Map<String, dynamic>?> getSubscriptionStatus(String productId) async {\n    if (!Platform.isIOS) return null;\n    \n    try {\n      final status = await _iap.getSubscriptionStatusIOS(productId);\n      debugPrint('Subscription status for $productId: $status');\n      return status;\n    } catch (e) {\n      debugPrint('Failed to get subscription status: $e');\n      return null;\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"subscription-management",children:"Subscription Management"}),"\n",(0,r.jsx)(n.h3,{id:"ios-subscription-management",children:"iOS Subscription Management"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"class SubscriptionManager {\n  final _iap = FlutterInappPurchase.instance;\n  \n  /// Show iOS subscription management screen (iOS 15+)\n  Future<void> showManageSubscriptions() async {\n    if (!Platform.isIOS) {\n      debugPrint('Subscription management is only available on iOS');\n      return;\n    }\n    \n    try {\n      await _iap.showManageSubscriptions();\n      debugPrint('Subscription management screen presented');\n    } catch (e) {\n      debugPrint('Failed to show subscription management: $e');\n    }\n  }\n  \n  /// Alternative method for iOS-specific subscription management\n  Future<void> showManageSubscriptionsIOS() async {\n    if (!Platform.isIOS) return;\n    \n    try {\n      await _iap.showManageSubscriptionsIOS();\n      debugPrint('iOS subscription management screen presented');\n    } catch (e) {\n      debugPrint('Failed to show iOS subscription management: $e');\n    }\n  }\n  \n  /// Get subscription group information (iOS only)\n  Future<String?> getSubscriptionGroup(String productId) async {\n    if (!Platform.isIOS) return null;\n    \n    try {\n      final group = await _iap.getSubscriptionGroupIOS(productId);\n      debugPrint('Subscription group for $productId: $group');\n      return group;\n    } catch (e) {\n      debugPrint('Failed to get subscription group: $e');\n      return null;\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"android-subscription-management",children:"Android Subscription Management"}),"\n",(0,r.jsx)(n.h3,{id:"deep-linking-to-subscriptions",children:"Deep Linking to Subscriptions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"class AndroidSubscriptionManager {\n  final _iap = FlutterInappPurchase.instance;\n  \n  /// Open Android subscription management (deep link to Play Store)\n  Future<void> openSubscriptionManagement([String? productId]) async {\n    if (!Platform.isAndroid) {\n      debugPrint('Android subscription management is only available on Android');\n      return;\n    }\n    \n    try {\n      // Deep link to subscription management in Play Store\n      await _iap.deepLinkToSubscriptionsAndroid(sku: productId);\n      debugPrint('Opened Android subscription management');\n    } catch (e) {\n      debugPrint('Failed to open subscription management: $e');\n    }\n  }\n  \n  /// Get Android billing connection state\n  Future<String?> getConnectionState() async {\n    if (!Platform.isAndroid) return null;\n    \n    try {\n      final state = await _iap.getConnectionStateAndroid();\n      debugPrint('Android connection state: $state');\n      return state;\n    } catch (e) {\n      debugPrint('Failed to get connection state: $e');\n      return null;\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"complete-implementation-example",children:"Complete Implementation Example"}),"\n",(0,r.jsx)(n.h3,{id:"cross-platform-offer-handler",children:"Cross-Platform Offer Handler"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"class CrossPlatformOfferHandler {\n  final _iap = FlutterInappPurchase.instance;\n  \n  /// Present offer code redemption (iOS) or subscription management (Android)\n  Future<void> handleOfferRedemption() async {\n    try {\n      if (Platform.isIOS) {\n        // iOS: Present code redemption sheet\n        await _iap.presentCodeRedemptionSheet();\n        debugPrint('iOS offer code redemption sheet presented');\n        _listenForPurchases();\n      } else if (Platform.isAndroid) {\n        // Android: Open subscription management\n        await _iap.deepLinkToSubscriptionsAndroid();\n        debugPrint('Android subscription management opened');\n      }\n    } catch (e) {\n      debugPrint('Failed to handle offer redemption: $e');\n    }\n  }\n  \n  /// Check introductory offer eligibility (iOS only)\n  Future<bool> checkIntroOfferEligibility(String productId) async {\n    if (!Platform.isIOS) return false;\n    \n    try {\n      return await _iap.isEligibleForIntroOfferIOS(productId);\n    } catch (e) {\n      debugPrint('Failed to check intro offer eligibility: $e');\n      return false;\n    }\n  }\n  \n  void _listenForPurchases() {\n    FlutterInappPurchase.purchaseUpdated.listen((purchase) {\n      if (purchase != null) {\n        debugPrint('Purchase received: ${purchase.productId}');\n        // Handle the purchase\n      }\n    });\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"additional-features",children:"Additional Features"}),"\n",(0,r.jsx)(n.h3,{id:"app-store-information-ios",children:"App Store Information (iOS)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"class AppStoreInfo {\n  final _iap = FlutterInappPurchase.instance;\n  \n  /// Get App Store country code (iOS only)\n  Future<String?> getAppStoreCountry() async {\n    if (!Platform.isIOS) return null;\n    \n    try {\n      final country = await _iap.getAppStoreCountryIOS();\n      debugPrint('App Store country: $country');\n      return country;\n    } catch (e) {\n      debugPrint('Failed to get App Store country: $e');\n      return null;\n    }\n  }\n  \n  /// Get promoted product (iOS only)\n  Future<String?> getPromotedProduct() async {\n    if (!Platform.isIOS) return null;\n    \n    try {\n      final productId = await _iap.getPromotedProduct();\n      debugPrint('Promoted product: $productId');\n      return productId;\n    } catch (e) {\n      debugPrint('Failed to get promoted product: $e');\n      return null;\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,r.jsx)(n.h3,{id:"in-a-flutter-app",children:"In a Flutter App"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"class OfferRedemptionPage extends StatelessWidget {\n  final _offerHandler = CrossPlatformOfferHandler();\n  \n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Redeem Offers'),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            if (Platform.isIOS) ...[\n              ElevatedButton(\n                onPressed: () async {\n                  await _offerHandler.handleOfferRedemption();\n                },\n                child: Text('Redeem Offer Code'),\n              ),\n              SizedBox(height: 16),\n              ElevatedButton(\n                onPressed: () async {\n                  final eligible = await _offerHandler.checkIntroOfferEligibility('your_product_id');\n                  ScaffoldMessenger.of(context).showSnackBar(\n                    SnackBar(content: Text('Eligible for intro offer: $eligible')),\n                  );\n                },\n                child: Text('Check Intro Offer Eligibility'),\n              ),\n            ],\n            if (Platform.isAndroid) ...[\n              ElevatedButton(\n                onPressed: () async {\n                  await _offerHandler.handleOfferRedemption();\n                },\n                child: Text('Manage Subscriptions'),\n              ),\n            ],\n          ],\n        ),\n      ),\n    );\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"important-notes",children:"Important Notes"}),"\n",(0,r.jsx)(n.h3,{id:"platform-differences",children:"Platform Differences"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"iOS"}),": Full support for offer code redemption through system sheet (iOS 14+)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Android"}),": No direct promo code API - users must redeem through Play Store"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Subscription Management"}),": Both platforms support opening native subscription management"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"requirements",children:"Requirements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"iOS"}),": Minimum iOS 14.0 for offer code redemption"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"iOS"}),": Minimum iOS 15.0 for subscription management"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Android"}),": Requires Google Play Billing Library 5.x+"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Always check platform before calling platform-specific methods"}),"\n",(0,r.jsx)(n.li,{children:"Handle errors gracefully as native dialogs may fail"}),"\n",(0,r.jsx)(n.li,{children:"Listen to purchase streams when presenting offer code redemption"}),"\n",(0,r.jsx)(n.li,{children:"Use subscription management for user convenience"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var t=i(6540);const r={},o=t.createContext(r);function s(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);