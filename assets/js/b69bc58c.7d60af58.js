"use strict";(self.webpackChunkflutter_inapp_purchase_docs=self.webpackChunkflutter_inapp_purchase_docs||[]).push([[5305],{8453:(r,e,n)=>{n.d(e,{R:()=>i,x:()=>t});var o=n(6540);const s={},a=o.createContext(s);function i(r){const e=o.useContext(a);return o.useMemo(function(){return"function"==typeof r?r(e):{...e,...r}},[e,r])}function t(r){let e;return e=r.disableParentContext?"function"==typeof r.components?r.components(s):r.components||s:i(r.components),o.createElement(a.Provider,{value:e},r.children)}},9909:(r,e,n)=>{n.r(e),n.d(e,{assets:()=>E,contentTitle:()=>t,default:()=>l,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"api/types/error-codes","title":"Error Codes","description":"Comprehensive error handling types and codes for flutterinapppurchase.","source":"@site/versioned_docs/version-6.3/api/types/error-codes.md","sourceDirName":"api/types","slug":"/api/types/error-codes","permalink":"/docs/6.3/api/types/error-codes","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/versioned_docs/version-6.3/api/types/error-codes.md","tags":[],"version":"6.3","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Error Codes"}}');var s=n(4848),a=n(8453);const i={sidebar_position:3,title:"Error Codes"},t="Error Codes",E={},c=[{value:"ErrorCode Enum",id:"errorcode-enum",level:2},{value:"PurchaseError Class",id:"purchaseerror-class",level:2},{value:"Properties",id:"properties",level:3},{value:"Error Categories",id:"error-categories",level:2},{value:"User-Related Errors",id:"user-related-errors",level:3},{value:"Product/Item Errors",id:"productitem-errors",level:3},{value:"Service Errors",id:"service-errors",level:3},{value:"Developer Errors",id:"developer-errors",level:3},{value:"Complete Error Handler",id:"complete-error-handler",level:2},{value:"Platform-Specific Error Mapping",id:"platform-specific-error-mapping",level:2},{value:"Android Response Codes",id:"android-response-codes",level:3},{value:"iOS Error Mapping",id:"ios-error-mapping",level:3},{value:"Error Recovery Strategies",id:"error-recovery-strategies",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Testing Error Scenarios",id:"testing-error-scenarios",level:2}];function d(r){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...r.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"error-codes",children:"Error Codes"})}),"\n",(0,s.jsx)(e.p,{children:"Comprehensive error handling types and codes for flutter_inapp_purchase."}),"\n",(0,s.jsx)(e.h2,{id:"errorcode-enum",children:"ErrorCode Enum"}),"\n",(0,s.jsx)(e.p,{children:"Enumeration of all possible error codes that can occur during IAP operations."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"enum ErrorCode {\n  // User-related errors\n  E_USER_CANCELLED,\n  E_PAYMENT_NOT_ALLOWED,\n  E_USER_ERROR,\n  \n  // Product/Item errors\n  E_ITEM_UNAVAILABLE,\n  E_PRODUCT_ALREADY_OWNED,\n  E_PRODUCT_NOT_FOUND,\n  E_PURCHASE_NOT_ALLOWED,\n  \n  // Service/Network errors\n  E_SERVICE_ERROR,\n  E_NETWORK_ERROR,\n  E_BILLING_UNAVAILABLE,\n  E_REMOTE_ERROR,\n  \n  // Developer errors\n  E_DEVELOPER_ERROR,\n  E_NOT_INITIALIZED,\n  E_ALREADY_INITIALIZED,\n  E_CLIENT_INVALID,\n  \n  // Transaction errors\n  E_PAYMENT_INVALID,\n  E_TRANSACTION_FAILED,\n  E_TRANSACTION_INVALID,\n  E_TRANSACTION_NOT_FOUND,\n  E_PURCHASE_FAILED,\n  \n  // Platform-specific errors\n  E_FEATURE_NOT_SUPPORTED,\n  E_NOT_SUPPORTED,\n  E_QUOTA_EXCEEDED,\n  E_DEFERRED_PAYMENT,\n  \n  // Receipt/Validation errors\n  E_RECEIPT_FAILED,\n  E_RECEIPT_FINISHED_FAILED,\n  \n  // Subscription errors\n  E_RESTORE_FAILED,\n  E_SHOW_SUBSCRIPTIONS_FAILED,\n  \n  // iOS-specific errors\n  E_STOREKIT_ORIGINAL_TRANSACTION_ID_NOT_FOUND,\n  E_NO_WINDOW_SCENE,\n  E_REDEEM_FAILED,\n  \n  // General errors\n  E_UNKNOWN,\n  E_PENDING,\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"purchaseerror-class",children:"PurchaseError Class"}),"\n",(0,s.jsx)(e.p,{children:"Main error class containing error details and platform information."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"class PurchaseError {\n  final ErrorCode code;\n  final String message;\n  final String? debugMessage;\n  final IAPPlatform platform;\n  \n  PurchaseError({\n    required this.code,\n    required this.message,\n    this.debugMessage,\n    required this.platform,\n  });\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"properties",children:"Properties"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"code"})," - The specific error code"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"message"})," - Human-readable error message"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"debugMessage"})," - Additional debug information (optional)"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"platform"})," - Platform where the error occurred"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"error-categories",children:"Error Categories"}),"\n",(0,s.jsx)(e.h3,{id:"user-related-errors",children:"User-Related Errors"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"void handleUserErrors(PurchaseError error) {\n  switch (error.code) {\n    case ErrorCode.E_USER_CANCELLED:\n      // User cancelled the purchase dialog\n      showMessage('Purchase cancelled');\n      break;\n      \n    case ErrorCode.E_PAYMENT_NOT_ALLOWED:\n      // Parental controls or restrictions\n      showMessage('Purchases are not allowed on this device');\n      break;\n      \n    case ErrorCode.E_USER_ERROR:\n      // General user-related error\n      showMessage('Please try again');\n      break;\n  }\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"productitem-errors",children:"Product/Item Errors"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"void handleProductErrors(PurchaseError error) {\n  switch (error.code) {\n    case ErrorCode.E_ITEM_UNAVAILABLE:\n      // Product not found in store\n      showMessage('This item is not available');\n      break;\n      \n    case ErrorCode.E_PRODUCT_ALREADY_OWNED:\n      // User already owns this product\n      showMessage('You already own this item');\n      _restoreProduct();\n      break;\n      \n    case ErrorCode.E_PRODUCT_NOT_FOUND:\n      // Product ID not configured\n      showMessage('Product not found');\n      _reportToAnalytics('product_not_found', error.debugMessage);\n      break;\n  }\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"service-errors",children:"Service Errors"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"Future<void> handleServiceErrors(PurchaseError error) async {\n  switch (error.code) {\n    case ErrorCode.E_SERVICE_ERROR:\n      // Store service unavailable\n      showMessage('Store service is unavailable. Please try again later.');\n      await _retryAfterDelay();\n      break;\n      \n    case ErrorCode.E_NETWORK_ERROR:\n      // Network connectivity issues\n      showMessage('Please check your internet connection');\n      break;\n      \n    case ErrorCode.E_BILLING_UNAVAILABLE:\n      // Billing service not available\n      showMessage('Billing is not available on this device');\n      break;\n  }\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"developer-errors",children:"Developer Errors"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"void handleDeveloperErrors(PurchaseError error) {\n  switch (error.code) {\n    case ErrorCode.E_NOT_INITIALIZED:\n      // IAP not initialized\n      print('IAP not initialized - initializing now');\n      _initializeIAP();\n      break;\n      \n    case ErrorCode.E_ALREADY_INITIALIZED:\n      // Already initialized (not really an error)\n      print('IAP already initialized');\n      break;\n      \n    case ErrorCode.E_DEVELOPER_ERROR:\n      // Configuration issue\n      print('Developer error: ${error.message}');\n      _reportToAnalytics('developer_error', error.debugMessage);\n      break;\n      \n    case ErrorCode.E_CLIENT_INVALID:\n      // Invalid client configuration\n      print('Invalid client configuration');\n      break;\n  }\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"complete-error-handler",children:"Complete Error Handler"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"class ErrorHandler {\n  static void handlePurchaseError(PurchaseError error) {\n    print('Purchase error: ${error.code} - ${error.message}');\n    if (error.debugMessage != null) {\n      print('Debug: ${error.debugMessage}');\n    }\n    \n    switch (error.code) {\n      // User cancelled - normal flow\n      case ErrorCode.E_USER_CANCELLED:\n        _showSnackbar('Purchase cancelled');\n        break;\n        \n      // Already owned - restore the product\n      case ErrorCode.E_PRODUCT_ALREADY_OWNED:\n        _showSnackbar('You already own this item');\n        _attemptRestore();\n        break;\n        \n      // Service unavailable - suggest retry\n      case ErrorCode.E_SERVICE_ERROR:\n      case ErrorCode.E_BILLING_UNAVAILABLE:\n        _showRetryDialog('Store service unavailable');\n        break;\n        \n      // Network issues - check connectivity\n      case ErrorCode.E_NETWORK_ERROR:\n        _showNetworkError();\n        break;\n        \n      // Product not available\n      case ErrorCode.E_ITEM_UNAVAILABLE:\n        _showSnackbar('This item is not available');\n        _refreshProductList();\n        break;\n        \n      // Payment not allowed - device restriction\n      case ErrorCode.E_PAYMENT_NOT_ALLOWED:\n        _showSnackbar('Purchases are disabled on this device');\n        break;\n        \n      // Not initialized - try to initialize\n      case ErrorCode.E_NOT_INITIALIZED:\n        _reinitializeIAP();\n        break;\n        \n      // Generic handling for other errors\n      default:\n        _showGenericError(error.message);\n    }\n    \n    // Always log errors for analytics\n    _logError(error);\n  }\n  \n  static void _showSnackbar(String message) {\n    // Show user-friendly message\n  }\n  \n  static void _showRetryDialog(String message) {\n    // Show dialog with retry option\n  }\n  \n  static void _showNetworkError() {\n    // Show network connectivity message\n  }\n  \n  static void _showGenericError(String message) {\n    // Show generic error message\n  }\n  \n  static void _attemptRestore() {\n    // Try to restore the purchase\n  }\n  \n  static void _refreshProductList() {\n    // Refresh available products\n  }\n  \n  static void _reinitializeIAP() {\n    // Reinitialize IAP connection\n  }\n  \n  static void _logError(PurchaseError error) {\n    // Log to analytics service\n  }\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"platform-specific-error-mapping",children:"Platform-Specific Error Mapping"}),"\n",(0,s.jsx)(e.h3,{id:"android-response-codes",children:"Android Response Codes"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"class AndroidErrorMapper {\n  static ErrorCode mapBillingResponseCode(int responseCode) {\n    switch (responseCode) {\n      case 0: // BILLING_RESPONSE_RESULT_OK\n        return ErrorCode.E_UNKNOWN; // Shouldn't happen in error context\n      case 1: // BILLING_RESPONSE_RESULT_USER_CANCELED\n        return ErrorCode.E_USER_CANCELLED;\n      case 2: // BILLING_RESPONSE_RESULT_SERVICE_UNAVAILABLE\n        return ErrorCode.E_SERVICE_ERROR;\n      case 3: // BILLING_RESPONSE_RESULT_BILLING_UNAVAILABLE\n        return ErrorCode.E_BILLING_UNAVAILABLE;\n      case 4: // BILLING_RESPONSE_RESULT_ITEM_UNAVAILABLE\n        return ErrorCode.E_ITEM_UNAVAILABLE;\n      case 5: // BILLING_RESPONSE_RESULT_DEVELOPER_ERROR\n        return ErrorCode.E_DEVELOPER_ERROR;\n      case 6: // BILLING_RESPONSE_RESULT_ERROR\n        return ErrorCode.E_SERVICE_ERROR;\n      case 7: // BILLING_RESPONSE_RESULT_ITEM_ALREADY_OWNED\n        return ErrorCode.E_PRODUCT_ALREADY_OWNED;\n      case 8: // BILLING_RESPONSE_RESULT_ITEM_NOT_OWNED\n        return ErrorCode.E_PURCHASE_NOT_ALLOWED;\n      default:\n        return ErrorCode.E_UNKNOWN;\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"ios-error-mapping",children:"iOS Error Mapping"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"class IOSErrorMapper {\n  static ErrorCode mapStoreKitError(int errorCode) {\n    switch (errorCode) {\n      case 0: // SKErrorUnknown\n        return ErrorCode.E_UNKNOWN;\n      case 1: // SKErrorClientInvalid\n        return ErrorCode.E_CLIENT_INVALID;\n      case 2: // SKErrorPaymentCancelled\n        return ErrorCode.E_USER_CANCELLED;\n      case 3: // SKErrorPaymentInvalid\n        return ErrorCode.E_PAYMENT_INVALID;\n      case 4: // SKErrorPaymentNotAllowed\n        return ErrorCode.E_PAYMENT_NOT_ALLOWED;\n      case 5: // SKErrorStoreProductNotAvailable\n        return ErrorCode.E_ITEM_UNAVAILABLE;\n      case 6: // SKErrorCloudServicePermissionDenied\n        return ErrorCode.E_FEATURE_NOT_SUPPORTED;\n      case 7: // SKErrorCloudServiceNetworkConnectionFailed\n        return ErrorCode.E_NETWORK_ERROR;\n      case 8: // SKErrorCloudServiceRevoked\n        return ErrorCode.E_SERVICE_ERROR;\n      default:\n        return ErrorCode.E_UNKNOWN;\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"error-recovery-strategies",children:"Error Recovery Strategies"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"class ErrorRecoveryManager {\n  final int maxRetries = 3;\n  final Map<String, int> _retryCount = {};\n  \n  Future<bool> shouldRetry(PurchaseError error, String operationId) async {\n    final retries = _retryCount[operationId] ?? 0;\n    \n    if (retries >= maxRetries) {\n      return false;\n    }\n    \n    switch (error.code) {\n      // Network/service errors - retry with backoff\n      case ErrorCode.E_NETWORK_ERROR:\n      case ErrorCode.E_SERVICE_ERROR:\n        await _backoffDelay(retries);\n        _retryCount[operationId] = retries + 1;\n        return true;\n        \n      // Not initialized - try once to reinitialize\n      case ErrorCode.E_NOT_INITIALIZED:\n        if (retries == 0) {\n          await _reinitialize();\n          _retryCount[operationId] = retries + 1;\n          return true;\n        }\n        return false;\n        \n      // User errors - don't retry\n      case ErrorCode.E_USER_CANCELLED:\n      case ErrorCode.E_PAYMENT_NOT_ALLOWED:\n        return false;\n        \n      // Product errors - don't retry\n      case ErrorCode.E_ITEM_UNAVAILABLE:  \n      case ErrorCode.E_PRODUCT_ALREADY_OWNED:\n        return false;\n        \n      default:\n        return false;\n    }\n  }\n  \n  Future<void> _backoffDelay(int retryCount) async {\n    final delay = Duration(seconds: math.pow(2, retryCount).toInt());\n    await Future.delayed(delay);\n  }\n  \n  Future<void> _reinitialize() async {\n    try {\n      await FlutterInappPurchase.instance.endConnection();\n      await FlutterInappPurchase.instance.initConnection();\n    } catch (e) {\n      print('Reinitialization failed: $e');\n    }\n  }\n  \n  void clearRetryCount(String operationId) {\n    _retryCount.remove(operationId);\n  }\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Always Handle Errors"}),": Never ignore IAP errors"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"User-Friendly Messages"}),": Show appropriate messages to users"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Log for Analytics"}),": Track error patterns for improvement"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Retry Strategies"}),": Implement smart retry logic"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Fallback Options"}),": Provide alternative flows when possible"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Test Error Cases"}),": Test with various error scenarios"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"testing-error-scenarios",children:"Testing Error Scenarios"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"class ErrorTesting {\n  // Simulate network error\n  static void simulateNetworkError() {\n    throw PurchaseError(\n      code: ErrorCode.E_NETWORK_ERROR,\n      message: 'Network connection failed',\n      platform: IAPPlatform.ios,\n    );\n  }\n  \n  // Simulate user cancellation\n  static void simulateUserCancellation() {\n    throw PurchaseError(\n      code: ErrorCode.E_USER_CANCELLED,\n      message: 'User cancelled the purchase',\n      platform: IAPPlatform.android,\n    );\n  }\n  \n  // Test error handling\n  static void testErrorHandling() {\n    final errors = [\n      ErrorCode.E_USER_CANCELLED,\n      ErrorCode.E_ITEM_UNAVAILABLE,\n      ErrorCode.E_SERVICE_ERROR,\n      ErrorCode.E_NOT_INITIALIZED,\n    ];\n    \n    for (var errorCode in errors) {\n      final error = PurchaseError(\n        code: errorCode,\n        message: 'Test error: $errorCode',\n        platform: IAPPlatform.ios,\n      );\n      \n      ErrorHandler.handlePurchaseError(error);\n    }\n  }\n}\n"})})]})}function l(r={}){const{wrapper:e}={...(0,a.R)(),...r.components};return e?(0,s.jsx)(e,{...r,children:(0,s.jsx)(d,{...r})}):d(r)}}}]);