"use strict";(self.webpackChunkflutter_inapp_purchase_docs=self.webpackChunkflutter_inapp_purchase_docs||[]).push([[6219],{6302:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"api/listeners","title":"Listeners","description":"Real-time event streams for monitoring purchase transactions, connection states, and other IAP events in flutterinapppurchase v6.0.0.","source":"@site/docs/api/listeners.md","sourceDirName":"api","slug":"/api/listeners","permalink":"/docs/api/listeners","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/docs/api/listeners.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Listeners","sidebar_position":4},"sidebar":"docsSidebar","previous":{"title":"Core Methods","permalink":"/docs/api/core-methods"},"next":{"title":"Error Codes","permalink":"/docs/api/error-codes"}}');var i=r(4848),t=r(8453);const a={title:"Listeners",sidebar_position:4},c="Event Listeners",o={},l=[{value:"Core Event Streams",id:"core-event-streams",level:2},{value:"purchaseUpdated",id:"purchaseupdated",level:3},{value:"purchaseError",id:"purchaseerror",level:3},{value:"connectionUpdated",id:"connectionupdated",level:3},{value:"purchasePromoted",id:"purchasepromoted",level:3},{value:"inAppMessageAndroid",id:"inappmessageandroid",level:3},{value:"Complete Listener Setup",id:"complete-listener-setup",level:2},{value:"Full Implementation Example",id:"full-implementation-example",level:3},{value:"Widget Integration",id:"widget-integration",level:3},{value:"Error Handling Best Practices",id:"error-handling-best-practices",level:2},{value:"1. Null Safety",id:"1-null-safety",level:3},{value:"2. Stream Error Handling",id:"2-stream-error-handling",level:3},{value:"3. Subscription Lifecycle",id:"3-subscription-lifecycle",level:3},{value:"Platform Differences",id:"platform-differences",level:2},{value:"iOS-Specific Considerations",id:"ios-specific-considerations",level:3},{value:"Android-Specific Considerations",id:"android-specific-considerations",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"1. Lazy Listener Setup",id:"1-lazy-listener-setup",level:3},{value:"2. Debounced Error Handling",id:"2-debounced-error-handling",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debug Logging",id:"debug-logging",level:3},{value:"See Also",id:"see-also",level:2}];function d(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"event-listeners",children:"Event Listeners"})}),"\n",(0,i.jsx)(n.p,{children:"Real-time event streams for monitoring purchase transactions, connection states, and other IAP events in flutter_inapp_purchase v6.0.0."}),"\n",(0,i.jsx)(n.h2,{id:"core-event-streams",children:"Core Event Streams"}),"\n",(0,i.jsx)(n.h3,{id:"purchaseupdated",children:"purchaseUpdated"}),"\n",(0,i.jsx)(n.p,{children:"Stream for successful purchase completions."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"static Stream<PurchasedItem?> get purchaseUpdated\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Type"}),": ",(0,i.jsx)(n.code,{children:"Stream<PurchasedItem?>"}),(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Emits"}),": Purchase completion events",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Null Safety"}),": Can emit null values - always check for null"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"StreamSubscription<PurchasedItem?>? _purchaseSubscription;\n\nvoid setupPurchaseListener() {\n  _purchaseSubscription = FlutterInappPurchase.purchaseUpdated.listen(\n    (purchase) {\n      if (purchase != null) {\n        handlePurchaseSuccess(purchase);\n      }\n    },\n    onError: (error) {\n      print('Purchase stream error: $error');\n    },\n  );\n}\n\nFuture<void> handlePurchaseSuccess(PurchasedItem purchase) async {\n  print('Purchase completed: ${purchase.productId}');\n  \n  try {\n    // 1. Verify the purchase (recommended)\n    final isValid = await verifyPurchaseOnServer(purchase);\n    if (!isValid) {\n      print('Purchase verification failed');\n      return;\n    }\n    \n    // 2. Deliver the product to user\n    await deliverProduct(purchase.productId);\n    \n    // 3. Finish the transaction\n    await FlutterInappPurchase.instance.finishTransaction(\n      purchase,\n      isConsumable: true, // Set appropriately for your product\n    );\n    \n    print('Purchase processed successfully');\n  } catch (e) {\n    print('Error processing purchase: $e');\n  }\n}\n\nvoid dispose() {\n  _purchaseSubscription?.cancel();\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Platform Data"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"iOS"}),": Contains ",(0,i.jsx)(n.code,{children:"transactionReceipt"}),", ",(0,i.jsx)(n.code,{children:"originalTransactionIdentifierIOS"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Android"}),": Contains ",(0,i.jsx)(n.code,{children:"purchaseToken"}),", ",(0,i.jsx)(n.code,{children:"dataAndroid"}),", ",(0,i.jsx)(n.code,{children:"signatureAndroid"})]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"purchaseerror",children:"purchaseError"}),"\n",(0,i.jsx)(n.p,{children:"Stream for purchase failures and errors."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"static Stream<PurchaseResult?> get purchaseError\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Type"}),": ",(0,i.jsx)(n.code,{children:"Stream<PurchaseResult?>"}),(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Emits"}),": Purchase error events",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Null Safety"}),": Can emit null values - always check for null"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"StreamSubscription<PurchaseResult?>? _errorSubscription;\n\nvoid setupErrorListener() {\n  _errorSubscription = FlutterInappPurchase.purchaseError.listen(\n    (error) {\n      if (error != null) {\n        handlePurchaseError(error);\n      }\n    },\n  );\n}\n\nvoid handlePurchaseError(PurchaseResult error) {\n  print('Purchase failed: ${error.message}');\n  print('Error code: ${error.responseCode}');\n  print('Debug info: ${error.debugMessage}');\n  \n  switch (error.responseCode) {\n    case 1: // User cancelled\n      // Don't show error for user cancellation\n      print('User cancelled the purchase');\n      break;\n      \n    case 2: // Network error\n      showUserMessage('Network error. Please check your connection and try again.');\n      break;\n      \n    case 7: // Already owned\n      showUserMessage('You already own this item.');\n      // Optionally trigger restore purchases\n      restorePreviousPurchases();\n      break;\n      \n    default:\n      showUserMessage('Purchase failed: ${error.message ?? 'Unknown error'}');\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Common Error Codes"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"1"})," - User cancelled"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"2"})," - Network error"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"3"})," - Service unavailable"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"4"})," - Item unavailable"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"7"})," - Already owned"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"8"})," - Invalid purchase"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"connectionupdated",children:"connectionUpdated"}),"\n",(0,i.jsx)(n.p,{children:"Stream for store connection state changes."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"static Stream<ConnectionResult> get connectionUpdated\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Type"}),": ",(0,i.jsx)(n.code,{children:"Stream<ConnectionResult>"}),(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Emits"}),": Connection state changes",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Never Null"}),": Always emits valid ",(0,i.jsx)(n.code,{children:"ConnectionResult"})," objects"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"StreamSubscription<ConnectionResult>? _connectionSubscription;\n\nvoid setupConnectionListener() {\n  _connectionSubscription = FlutterInappPurchase.connectionUpdated.listen(\n    (connectionResult) {\n      handleConnectionChange(connectionResult);\n    },\n  );\n}\n\nvoid handleConnectionChange(ConnectionResult result) {\n  if (result.connected) {\n    print('Store connected: ${result.message ?? 'Successfully connected'}');\n    \n    // Connection established - safe to load products\n    loadProducts();\n  } else {\n    print('Store disconnected: ${result.message ?? 'Connection lost'}');\n    \n    // Handle disconnection - disable purchase UI\n    disablePurchaseButtons();\n    \n    // Optionally attempt reconnection\n    scheduleReconnection();\n  }\n}\n\nFuture<void> scheduleReconnection() async {\n  await Future.delayed(Duration(seconds: 5));\n  try {\n    await FlutterInappPurchase.instance.initConnection();\n  } catch (e) {\n    print('Reconnection failed: $e');\n  }\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"purchasepromoted",children:"purchasePromoted"}),"\n",(0,i.jsx)(n.p,{children:"Stream for promoted purchase events (iOS App Store promotions)."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"static Stream<String?> get purchasePromoted\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Type"}),": ",(0,i.jsx)(n.code,{children:"Stream<String?>"}),(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Emits"}),": Product ID of promoted purchases",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Platform"}),": iOS only"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"StreamSubscription<String?>? _promotedSubscription;\n\nvoid setupPromotedListener() {\n  _promotedSubscription = FlutterInappPurchase.purchasePromoted.listen(\n    (productId) {\n      if (productId != null) {\n        handlePromotedPurchase(productId);\n      }\n    },\n  );\n}\n\nFuture<void> handlePromotedPurchase(String productId) async {\n  print('Promoted purchase initiated for: $productId');\n  \n  try {\n    // Load product information\n    final products = await FlutterInappPurchase.instance.getProducts([productId]);\n    if (products.isEmpty) {\n      print('Promoted product not found: $productId');\n      return;\n    }\n    \n    final product = products.first;\n    \n    // Show promotional purchase UI\n    final shouldPurchase = await showPromotedPurchaseDialog(product);\n    \n    if (shouldPurchase) {\n      // Proceed with purchase\n      final request = RequestPurchase(\n        ios: RequestPurchaseIOS(sku: productId, quantity: 1),\n        android: RequestPurchaseAndroid(skus: [productId]),\n      );\n      \n      await FlutterInappPurchase.instance.requestPurchase(\n        request: request,\n        type: PurchaseType.inapp,\n      );\n    }\n  } catch (e) {\n    print('Error handling promoted purchase: $e');\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Requirements"}),": iOS 11.0+, promoted purchases configured in App Store Connect"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"inappmessageandroid",children:"inAppMessageAndroid"}),"\n",(0,i.jsx)(n.p,{children:"Stream for Google Play in-app messaging events."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"static Stream<int?> get inAppMessageAndroid\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Type"}),": ",(0,i.jsx)(n.code,{children:"Stream<int?>"}),(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Emits"}),": Message type codes",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Platform"}),": Android only"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"StreamSubscription<int?>? _inAppMessageSubscription;\n\nvoid setupInAppMessageListener() {\n  if (Platform.isAndroid) {\n    _inAppMessageSubscription = FlutterInappPurchase.inAppMessageAndroid.listen(\n      (messageType) {\n        if (messageType != null) {\n          handleInAppMessage(messageType);\n        }\n      },\n    );\n  }\n}\n\nvoid handleInAppMessage(int messageType) {\n  print('In-app message received: $messageType');\n  \n  switch (messageType) {\n    case 0: // Purchase message\n      print('Purchase-related message shown');\n      break;\n    case 1: // Billing message  \n      print('Billing-related message shown');\n      break;\n    case 2: // Price change message\n      print('Price change message shown');\n      break;\n    default:\n      print('Unknown message type: $messageType');\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Message Types"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"0"})," - Purchase messages"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"1"})," - Billing messages"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"2"})," - Price change notifications"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"3"})," - Generic messages"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"complete-listener-setup",children:"Complete Listener Setup"}),"\n",(0,i.jsx)(n.h3,{id:"full-implementation-example",children:"Full Implementation Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"class IAPListenerManager {\n  StreamSubscription<PurchasedItem?>? _purchaseSubscription;\n  StreamSubscription<PurchaseResult?>? _errorSubscription;\n  StreamSubscription<ConnectionResult>? _connectionSubscription;\n  StreamSubscription<String?>? _promotedSubscription;\n  StreamSubscription<int?>? _inAppMessageSubscription;\n  \n  bool _isListening = false;\n  \n  void startListening() {\n    if (_isListening) return;\n    \n    // Purchase success listener\n    _purchaseSubscription = FlutterInappPurchase.purchaseUpdated.listen(\n      (purchase) {\n        if (purchase != null) {\n          _handlePurchaseSuccess(purchase);\n        }\n      },\n      onError: (error) {\n        print('Purchase stream error: $error');\n      },\n    );\n    \n    // Purchase error listener\n    _errorSubscription = FlutterInappPurchase.purchaseError.listen(\n      (error) {\n        if (error != null) {\n          _handlePurchaseError(error);\n        }\n      },\n      onError: (error) {\n        print('Error stream error: $error');\n      },\n    );\n    \n    // Connection state listener\n    _connectionSubscription = FlutterInappPurchase.connectionUpdated.listen(\n      (connectionResult) {\n        _handleConnectionChange(connectionResult);\n      },\n      onError: (error) {\n        print('Connection stream error: $error');\n      },\n    );\n    \n    // iOS promoted purchases\n    if (Platform.isIOS) {\n      _promotedSubscription = FlutterInappPurchase.purchasePromoted.listen(\n        (productId) {\n          if (productId != null) {\n            _handlePromotedPurchase(productId);\n          }\n        },\n      );\n    }\n    \n    // Android in-app messages\n    if (Platform.isAndroid) {\n      _inAppMessageSubscription = FlutterInappPurchase.inAppMessageAndroid.listen(\n        (messageType) {\n          if (messageType != null) {\n            _handleInAppMessage(messageType);\n          }\n        },\n      );\n    }\n    \n    _isListening = true;\n    print('IAP listeners started');\n  }\n  \n  void stopListening() {\n    _purchaseSubscription?.cancel();\n    _errorSubscription?.cancel();\n    _connectionSubscription?.cancel();\n    _promotedSubscription?.cancel();\n    _inAppMessageSubscription?.cancel();\n    \n    _purchaseSubscription = null;\n    _errorSubscription = null;\n    _connectionSubscription = null;\n    _promotedSubscription = null;\n    _inAppMessageSubscription = null;\n    \n    _isListening = false;\n    print('IAP listeners stopped');\n  }\n  \n  Future<void> _handlePurchaseSuccess(PurchasedItem purchase) async {\n    // Implementation from examples above\n  }\n  \n  void _handlePurchaseError(PurchaseResult error) {\n    // Implementation from examples above\n  }\n  \n  void _handleConnectionChange(ConnectionResult result) {\n    // Implementation from examples above\n  }\n  \n  Future<void> _handlePromotedPurchase(String productId) async {\n    // Implementation from examples above\n  }\n  \n  void _handleInAppMessage(int messageType) {\n    // Implementation from examples above\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"widget-integration",children:"Widget Integration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"class IAPWidget extends StatefulWidget {\n  @override\n  _IAPWidgetState createState() => _IAPWidgetState();\n}\n\nclass _IAPWidgetState extends State<IAPWidget> {\n  final IAPListenerManager _listenerManager = IAPListenerManager();\n  bool _isConnected = false;\n  \n  @override\n  void initState() {\n    super.initState();\n    _initializeIAP();\n  }\n  \n  Future<void> _initializeIAP() async {\n    try {\n      // Start listening before initializing connection\n      _listenerManager.startListening();\n      \n      // Initialize connection\n      await FlutterInappPurchase.instance.initConnection();\n      \n      setState(() {\n        _isConnected = true;\n      });\n    } catch (e) {\n      print('IAP initialization failed: $e');\n    }\n  }\n  \n  @override\n  void dispose() {\n    _listenerManager.stopListening();\n    super.dispose();\n  }\n  \n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('In-App Purchases'),\n      ),\n      body: _isConnected\n        ? PurchaseContent()\n        : Center(\n            child: CircularProgressIndicator(),\n          ),\n    );\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"error-handling-best-practices",children:"Error Handling Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"1-null-safety",children:"1. Null Safety"}),"\n",(0,i.jsx)(n.p,{children:"Always check for null values in stream emissions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"FlutterInappPurchase.purchaseUpdated.listen((purchase) {\n  if (purchase != null) {\n    // Safe to use purchase\n    processPurchase(purchase);\n  } else {\n    print('Received null purchase event');\n  }\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-stream-error-handling",children:"2. Stream Error Handling"}),"\n",(0,i.jsx)(n.p,{children:"Handle stream errors to prevent app crashes:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"FlutterInappPurchase.purchaseUpdated.listen(\n  (purchase) {\n    // Handle success\n  },\n  onError: (error) {\n    print('Purchase stream error: $error');\n    // Optionally restart the stream or show user message\n  },\n  onDone: () {\n    print('Purchase stream closed');\n    // Handle stream closure\n  },\n);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-subscription-lifecycle",children:"3. Subscription Lifecycle"}),"\n",(0,i.jsx)(n.p,{children:"Properly manage subscription lifecycle:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"class SubscriptionManager {\n  StreamSubscription? _subscription;\n  \n  void start() {\n    _subscription ??= FlutterInappPurchase.purchaseUpdated.listen(\n      handlePurchase,\n      onError: handleError,\n    );\n  }\n  \n  void stop() {\n    _subscription?.cancel();\n    _subscription = null;\n  }\n  \n  void restart() {\n    stop();\n    start();\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"platform-differences",children:"Platform Differences"}),"\n",(0,i.jsx)(n.h3,{id:"ios-specific-considerations",children:"iOS-Specific Considerations"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Transaction State"}),": Use ",(0,i.jsx)(n.code,{children:"transactionStateIOS"})," for detailed state"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Receipt Data"}),": Access via ",(0,i.jsx)(n.code,{children:"transactionReceipt"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Original Transaction"}),": Available via ",(0,i.jsx)(n.code,{children:"originalTransactionIdentifierIOS"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Promoted Purchases"}),": Only available on iOS 11.0+"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"android-specific-considerations",children:"Android-Specific Considerations"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Purchase State"}),": Use ",(0,i.jsx)(n.code,{children:"purchaseStateAndroid"})," for state information"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Purchase Token"}),": Essential for consumption and acknowledgment"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pending Purchases"}),": Handle state ",(0,i.jsx)(n.code,{children:"2"})," for pending purchases"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"In-App Messages"}),": Android-specific messaging system"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,i.jsx)(n.h3,{id:"1-lazy-listener-setup",children:"1. Lazy Listener Setup"}),"\n",(0,i.jsx)(n.p,{children:"Only set up listeners when needed:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"StreamSubscription? _purchaseSubscription;\n\nvoid startPurchaseFlow() {\n  // Set up listener only when starting purchase\n  _purchaseSubscription ??= FlutterInappPurchase.purchaseUpdated.listen(\n    handlePurchase,\n  );\n  \n  // Proceed with purchase\n  requestPurchase();\n}\n\nvoid completePurchaseFlow() {\n  // Clean up listener after purchase flow\n  _purchaseSubscription?.cancel();\n  _purchaseSubscription = null;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-debounced-error-handling",children:"2. Debounced Error Handling"}),"\n",(0,i.jsx)(n.p,{children:"Avoid overwhelming users with repeated errors:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Timer? _errorDebounceTimer;\n\nvoid handlePurchaseError(PurchaseResult error) {\n  _errorDebounceTimer?.cancel();\n  _errorDebounceTimer = Timer(Duration(seconds: 2), () {\n    showErrorToUser(error.message);\n  });\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Missing Purchases"}),": Ensure listeners are set up before ",(0,i.jsx)(n.code,{children:"initConnection()"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Memory Leaks"}),": Always cancel subscriptions in ",(0,i.jsx)(n.code,{children:"dispose()"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Null Emissions"}),": Always check for null in stream handlers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Platform Crashes"}),": Handle stream errors with ",(0,i.jsx)(n.code,{children:"onError"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"debug-logging",children:"Debug Logging"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"void setupDebugLogging() {\n  FlutterInappPurchase.purchaseUpdated.listen(\n    (purchase) {\n      print('\ud83d\uded2 Purchase: ${purchase?.productId ?? 'null'}');\n    },\n    onError: (error) {\n      print('\u274c Purchase Error: $error');\n    },\n  );\n  \n  FlutterInappPurchase.purchaseError.listen(\n    (error) {\n      print('\ud83d\udeab Error: ${error?.message ?? 'null'}');\n    },\n  );\n  \n  FlutterInappPurchase.connectionUpdated.listen(\n    (result) {\n      print('\ud83d\udd17 Connection: ${result.connected ? 'Connected' : 'Disconnected'}');\n    },\n  );\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/api/core-methods",children:"Core Methods"})," - Methods that trigger these events"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/api/types",children:"Types"})," - Event data structures"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/api/error-codes",children:"Error Codes"})," - Error handling reference"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/guides/purchases",children:"Purchase Guide"})," - Complete purchase flow implementation"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>c});var s=r(6540);const i={},t=s.createContext(i);function a(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);