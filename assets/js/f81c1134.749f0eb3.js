"use strict";(self.webpackChunkflutter_inapp_purchase_docs=self.webpackChunkflutter_inapp_purchase_docs||[]).push([[8130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"release-6.4.0","metadata":{"permalink":"/blog/release-6.4.0","editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/blog/2025-08-21-6.4.0.release.md","source":"@site/blog/2025-08-21-6.4.0.release.md","title":"Version 6.4.0 - Simplified requestProducts API","description":"We\'re releasing version 6.4.0 with a simplified API for requesting products, based on valuable user feedback.","date":"2025-08-21T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/blog/tags/release","description":"New version releases and updates"},{"inline":false,"label":"Flutter","permalink":"/blog/tags/flutter","description":"Flutter framework related topics"},{"inline":false,"label":"In-App Purchase","permalink":"/blog/tags/in-app-purchase","description":"In-app purchase implementation and best practices"}],"readingTime":1.61,"hasTruncateMarker":false,"authors":[{"name":"Hyo","title":"Maintainer of flutter_inapp_purchase & expo-iap","url":"https://github.com/hyochan","page":{"permalink":"/blog/authors/hyochan"},"socials":{"x":"https://x.com/hyodotdev","github":"https://github.com/hyochan"},"imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"release-6.4.0","title":"Version 6.4.0 - Simplified requestProducts API","authors":["hyochan"],"tags":["release","flutter","in-app-purchase"]},"unlisted":false,"nextItem":{"title":"Version 6.3.3 - Replacement Mode Migration & OpenIAP Updates","permalink":"/blog/release-6.3.3"}},"content":"We\'re releasing version 6.4.0 with a simplified API for requesting products, based on valuable user feedback.\\n\\n## Version Information\\n\\n- **Current Version**: 6.4.0\\n- **Previous Stable**: 6.3.3\\n\\n## Breaking Changes\\n\\n### Simplified requestProducts API\\n\\nBased on feedback from issue [#527](https://github.com/hyochan/flutter_inapp_purchase/issues/527), we\'ve simplified the `requestProducts` method to use direct parameters instead of a wrapper object:\\n\\n**Before (6.3.x):**\\n\\n```dart\\nfinal products = await iap.requestProducts(\\n  RequestProductsParams(\\n    productIds: [\'product_id\'],\\n    type: PurchaseType.inapp,\\n  ),\\n);\\n```\\n\\n**After (6.4.0):**\\n\\n```dart\\nfinal products = await iap.requestProducts(\\n  productIds: [\'product_id\'],\\n  type: PurchaseType.inapp,  // Optional, defaults to PurchaseType.inapp\\n);\\n```\\n\\nThe `RequestProductsParams` class has been removed entirely, making the API cleaner and more intuitive.\\n\\n### Deprecated Items Removed\\n\\nIn v6.4.0, we\'ve also removed the following deprecated items that were marked for removal:\\n\\n- `subscriptionOfferDetails` field \u2192 use `subscriptionOfferDetailsAndroid` instead\\n- `prorationMode` field \u2192 use `replacementModeAndroid` instead\\n- `AndroidProrationMode` typedef \u2192 use `AndroidReplacementMode` instead\\n\\nThese items were deprecated in v6.3.x and are now completely removed in v6.4.0.\\n\\n## A Note on Recent Changes\\n\\nWe understand there have been several breaking changes in recent releases, and we sincerely apologize for any inconvenience this may have caused. These changes are part of our concerted effort to rapidly address the long maintenance gap this library experienced and bring it up to modern standards.\\n\\nWe\'re pleased to announce that with version 6.4.0, we believe the major restructuring phase is now complete. The API should remain stable moving forward, allowing you to build with confidence.\\n\\n## Migration Guide\\n\\nTo migrate from 6.3.x to 6.4.0:\\n\\n1. Remove any imports of `RequestProductsParams`\\n2. Update all calls to `requestProducts` to use the new parameter format:\\n   - Replace `RequestProductsParams(productIds: ids, type: type)` with direct named parameters\\n   - The `type` parameter now defaults to `PurchaseType.inapp` if not specified\\n\\n## Looking Forward\\n\\nWith this release, we\'ve addressed the accumulated technical debt and modernized the API structure. Future releases will focus on:\\n\\n- Adding new features\\n- Performance improvements\\n- Bug fixes\\n- Documentation enhancements\\n\\nAll while maintaining API stability.\\n\\nThank you for your patience and continued support as we\'ve worked to improve flutter_inapp_purchase."},{"id":"release-6.3.3","metadata":{"permalink":"/blog/release-6.3.3","editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/blog/2025-08-20-6.3.3.release.md","source":"@site/blog/2025-08-20-6.3.3.release.md","title":"Version 6.3.3 - Replacement Mode Migration & OpenIAP Updates","description":"We\'re excited to announce the release of flutterinapppurchase version 6.3.3! This release includes important updates to align with OpenIAP specifications and Google Play Billing Library v8.","date":"2025-08-20T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/blog/tags/release","description":"New version releases and updates"},{"inline":false,"label":"Flutter","permalink":"/blog/tags/flutter","description":"Flutter framework related topics"},{"inline":false,"label":"In-App Purchase","permalink":"/blog/tags/in-app-purchase","description":"In-app purchase implementation and best practices"}],"readingTime":2.44,"hasTruncateMarker":false,"authors":[{"name":"Hyo","title":"Maintainer of flutter_inapp_purchase & expo-iap","url":"https://github.com/hyochan","page":{"permalink":"/blog/authors/hyochan"},"socials":{"x":"https://x.com/hyodotdev","github":"https://github.com/hyochan"},"imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"release-6.3.3","title":"Version 6.3.3 - Replacement Mode Migration & OpenIAP Updates","authors":["hyochan"],"tags":["release","flutter","in-app-purchase"]},"unlisted":false,"prevItem":{"title":"Version 6.4.0 - Simplified requestProducts API","permalink":"/blog/release-6.4.0"},"nextItem":{"title":"Version 6.3.0 - Enhanced OpenIAP Compliance & Better Testing","permalink":"/blog/release-6.3.0"}},"content":"We\'re excited to announce the release of flutter_inapp_purchase version 6.3.3! This release includes important updates to align with OpenIAP specifications and Google Play Billing Library v8.\\n\\n## Major Changes\\n\\n### 1. Replacement Mode Migration (Android)\\n\\nWe\'ve updated our Android implementation to use the new `replacementMode` terminology, replacing the deprecated `prorationMode`. This aligns with Google Play Billing Library v8 naming conventions.\\n\\n#### What\'s Changed\\n\\n- `prorationMode` \u2192 `replacementMode`\\n- `AndroidProrationMode` enum \u2192 `AndroidReplacementMode` enum\\n- Updated enum values for better clarity:\\n  - `immediateWithTimeProration` \u2192 `withTimeProration`\\n  - `immediateAndChargeProratedPrice` \u2192 `chargeProratedPrice`\\n  - `immediateWithoutProration` \u2192 `withoutProration`\\n  - `immediateAndChargeFullPrice` \u2192 `chargeFullPrice`\\n\\n#### Migration Example\\n\\nBefore (older API):\\n\\n```dart\\nawait FlutterInappPurchase.instance.requestPurchase(\\n  request: RequestPurchase(\\n    ios: RequestPurchaseIOS(sku: \'premium_yearly\'),\\n    android: RequestPurchaseAndroid(\\n      skus: [\'premium_yearly\'],\\n      replacementModeAndroid: AndroidProrationMode.immediateWithTimeProration,\\n      purchaseTokenAndroid: existingSub.purchaseToken, // [DEPRECATED] Use purchaseToken instead\\n    ),\\n  ),\\n  type: PurchaseType.subs,\\n);\\n```\\n\\nAfter:\\n\\n```dart\\nawait FlutterInappPurchase.instance.requestPurchase(\\n  request: RequestPurchase(\\n    ios: RequestPurchaseIOS(sku: \'premium_yearly\'),\\n    android: RequestPurchaseAndroid(\\n      skus: [\'premium_yearly\'],\\n      replacementModeAndroid: AndroidReplacementMode.withTimeProration,\\n      purchaseTokenAndroid: existingSub.purchaseToken, // [DEPRECATED] Use purchaseToken instead\\n    ),\\n  ),\\n  type: PurchaseType.subs,\\n);\\n```\\n\\n### 2. OpenIAP Specification Compliance\\n\\nAll types have been updated to fully comply with OpenIAP specifications:\\n\\n- New base types: `ProductCommon`, `PurchaseCommon`, `ProductSubscriptionCommon`\\n- Proper platform-specific type extensions\\n- Consistent naming conventions with platform suffixes (iOS, Android)\\n\\n### 3. Enhanced Android Product Field Support\\n\\nAdded missing Android-specific fields to achieve full OpenIAP specification compliance:\\n\\n- **`nameAndroid`**: The product name from Google Play\\n- **`oneTimePurchaseOfferDetailsAndroid`**: Structured pricing details including:\\n  - `priceCurrencyCode`: ISO 4217 currency code\\n  - `formattedPrice`: Formatted price string\\n  - `priceAmountMicros`: Price in micro-units\\n\\nThese fields ensure Android products now have near 100% field compatibility with the OpenIAP specification (up from 60%).\\n\\n### 4. Improved Null Safety\\n\\nFixed all null safety issues and InvalidType errors throughout the codebase.\\n\\n## Deprecation Notice - Will be removed in v6.4.0\\n\\nThe following items are deprecated in this release and will be removed in v6.4.0:\\n\\n### Android Replacement Mode\\n\\n- \u274c `prorationMode` parameter\\n- \u274c `prorationModeAndroid` parameter\\n- \u274c `AndroidProrationMode` enum\\n- \u2705 Use `replacementMode`, `replacementModeAndroid`, and `AndroidReplacementMode` instead\\n\\n### Purchase Fields\\n\\n- \u274c `transactionId` \u2192 Use `id` instead\\n- \u274c `purchaseTokenAndroid` \u2192 Use `purchaseToken` instead\\n- \u274c `jwsRepresentationIOS` \u2192 Use `purchaseToken` instead\\n\\n### iOS Product Fields\\n\\n- \u274c `displayName` \u2192 Use `displayNameIOS` instead\\n- \u274c `isFamilyShareable` \u2192 Use `isFamilyShareableIOS` instead\\n- \u274c `jsonRepresentation` \u2192 Use `jsonRepresentationIOS` instead\\n- \u274c `subscription` \u2192 Use `subscriptionInfoIOS` instead\\n- \u274c `discounts` \u2192 Use `discountsIOS` instead\\n- \u274c `introductoryPrice` \u2192 Use `introductoryPriceIOS` instead\\n\\n### Android Product Fields\\n\\n- \u274c `name` \u2192 Use `nameAndroid` instead\\n- \u274c `oneTimePurchaseOfferDetails` \u2192 Use `oneTimePurchaseOfferDetailsAndroid` instead\\n- \u274c `subscriptionOfferDetails` \u2192 Use `subscriptionOfferDetailsAndroid` instead\\n\\n### Methods\\n\\n- \u274c `DiscountIOS.fromJSON()` \u2192 Use `DiscountIOS.fromJson()` instead\\n\\n## Breaking Changes\\n\\nNone in this release. All changes are backward compatible with deprecation warnings.\\n\\n## Bug Fixes\\n\\n- Fixed duplicate `ReplacementMode` enum definition\\n- Resolved null safety errors in types.dart\\n- Fixed InvalidType errors throughout the codebase\\n- Corrected platform-specific field naming inconsistencies\\n\\n## What\'s Next\\n\\nIn version 6.4.0, we will:\\n\\n- Remove all deprecated APIs listed above\\n- Complete the OpenIAP specification implementation\\n- Add support for new StoreKit 2 features\\n\\n## Upgrading\\n\\nTo upgrade to version 6.3.3:\\n\\n```yaml\\ndependencies:\\n  flutter_inapp_purchase: ^6.3.3\\n```\\n\\nThen run:\\n\\n```bash\\nflutter pub get\\n```\\n\\n## Action Required\\n\\nPlease update your code to use the new APIs before upgrading to v6.4.0. The deprecated APIs are still functional in v6.3.3 but will be removed in the next major update.\\n\\n## Support\\n\\nIf you encounter any issues or have questions:\\n\\n- Report issues at [GitHub Issues](https://github.com/hyochan/flutter_inapp_purchase/issues)\\n- Check the [documentation](https://flutter-inapp-purchase.hyo.dev)\\n- Join our [Slack community](https://hyo.dev/joinSlack)\\n\\nThank you for using flutter_inapp_purchase!"},{"id":"release-6.3.0","metadata":{"permalink":"/blog/release-6.3.0","editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/blog/2025-08-19-6.3.0.release.md","source":"@site/blog/2025-08-19-6.3.0.release.md","title":"Version 6.3.0 - Enhanced OpenIAP Compliance & Better Testing","description":"We\'re excited to announce the release of flutterinapppurchase 6.3.0! This version brings significant improvements to OpenIAP specification compliance, enhanced type safety, critical bug fixes, and a completely reorganized test suite\u2014all while maintaining full backward compatibility.","date":"2025-08-19T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/blog/tags/release","description":"New version releases and updates"},{"inline":false,"label":"Flutter","permalink":"/blog/tags/flutter","description":"Flutter framework related topics"},{"inline":false,"label":"In-App Purchase","permalink":"/blog/tags/in-app-purchase","description":"In-app purchase implementation and best practices"}],"readingTime":5.51,"hasTruncateMarker":false,"authors":[{"name":"Hyo","title":"Maintainer of flutter_inapp_purchase & expo-iap","url":"https://github.com/hyochan","page":{"permalink":"/blog/authors/hyochan"},"socials":{"x":"https://x.com/hyodotdev","github":"https://github.com/hyochan"},"imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"release-6.3.0","title":"Version 6.3.0 - Enhanced OpenIAP Compliance & Better Testing","authors":["hyochan"],"tags":["release","flutter","in-app-purchase"]},"unlisted":false,"prevItem":{"title":"Version 6.3.3 - Replacement Mode Migration & OpenIAP Updates","permalink":"/blog/release-6.3.3"},"nextItem":{"title":"Version 6.0.0-rc.1 - StoreKit 2 & Billing Client v8 Support","permalink":"/blog/release-6.0.0-rc"}},"content":"We\'re excited to announce the release of flutter_inapp_purchase 6.3.0! This version brings significant improvements to OpenIAP specification compliance, enhanced type safety, critical bug fixes, and a completely reorganized test suite\u2014all while maintaining full backward compatibility.\\n\\n## What\'s New in 6.3.0\\n\\n### Critical Bug Fixes\\n\\n#### Android Purchase State Mapping Fix (#524)\\n\\nFixed a critical bug where Android purchase states were incorrectly mapped, potentially causing transactions to be misinterpreted:\\n\\n**Before (Incorrect):**\\n\\n- 0 \u2192 PURCHASED \u274c\\n- 1 \u2192 PENDING \u274c\\n\\n**After (Correct):**\\n\\n- 0 \u2192 UNSPECIFIED_STATE \u2705\\n- 1 \u2192 PURCHASED \u2705\\n- 2 \u2192 PENDING \u2705\\n\\nThis fix aligns with the official Google Play Billing documentation and prevents misinterpreting UNSPECIFIED_STATE as a completed purchase.\\n\\n### Deprecated Methods\\n\\nThe following methods are now deprecated in favor of the unified `requestProducts` API:\\n\\n```dart\\n// \u274c Deprecated methods (still work but will be removed in next major version)\\nawait iap.getProducts(productIds);\\nawait iap.getSubscriptions(productIds);\\n\\n// \u2705 Use requestProducts instead\\nawait iap.requestProducts(\\n  RequestProductsParams(\\n    productIds: productIds,\\n    type: PurchaseType.inapp, // or PurchaseType.subs\\n  ),\\n);\\n```\\n\\n### Enhanced OpenIAP Field Support\\n\\nOne of the biggest improvements in 6.3.0 is comprehensive field mapping following the [OpenIAP specification](https://openiap.dev). We\'ve added extensive support for platform-specific fields that were previously unavailable.\\n\\n#### iOS StoreKit 2 Integration\\n\\nProducts and subscriptions now include comprehensive iOS fields:\\n\\n```dart\\nfinal products = await FlutterInappPurchase.instance.requestProducts(\\n  RequestProductsParams(productIds: [\'premium_monthly\']),\\n);\\n\\nfinal product = products.first;\\nprint(\'Display Name: ${product.displayName}\');\\nprint(\'Family Shareable: ${product.isFamilyShareable}\');\\nprint(\'JSON Representation: ${product.jsonRepresentation}\');\\n\\n// Access subscription-specific info\\nif (product.subscription != null) {\\n  print(\'Subscription Group: ${product.subscription!.subscriptionGroupId}\');\\n  print(\'Promotional Offers: ${product.promotionalOfferIdsIOS}\');\\n}\\n```\\n\\nPurchase objects now include StoreKit 2 verification and metadata:\\n\\n```dart\\nFlutterInappPurchase.instance.purchaseUpdatedListener.listen((purchase) {\\n  // Enhanced verification data\\n  print(\'Verification Result: ${purchase.verificationResultIOS}\');\\n  print(\'Environment: ${purchase.environmentIOS}\'); // \\"Sandbox\\" | \\"Production\\"\\n  print(\'Expiration Date: ${purchase.expirationDateIOS}\');\\n\\n  // JWS token for server validation\\n  if (purchase.purchaseToken != null) {\\n    // Send to your server for App Store validation\\n    validateWithAppStore(purchase.purchaseToken!);\\n  }\\n});\\n```\\n\\n#### Android Google Play Enhanced Fields\\n\\nAndroid purchases now include comprehensive Google Play Billing fields:\\n\\n```dart\\n// Enhanced Android purchase validation\\nif (purchase.platform == IapPlatform.android) {\\n  print(\'Order ID: ${purchase.orderIdAndroid}\');\\n  print(\'Package Name: ${purchase.packageNameAndroid}\');\\n  print(\'Signature: ${purchase.signatureAndroid}\');\\n  print(\'Acknowledged: ${purchase.acknowledgedAndroid}\');\\n\\n  // Use for server-side validation\\n  final validationData = {\\n    \'purchaseToken\': purchase.purchaseToken,\\n    \'signature\': purchase.signatureAndroid,\\n    \'packageName\': purchase.packageNameAndroid,\\n  };\\n  await validateWithGooglePlay(validationData);\\n}\\n```\\n\\n### Improved Type Safety & Reliability\\n\\nWe\'ve significantly improved the plugin\'s type safety and error handling:\\n\\n#### Better JSON Parsing\\n\\nFixed critical type casting issues that could cause runtime errors:\\n\\n```dart\\n// Before: Could throw casting exceptions\\n// Map<Object?, Object?> causing runtime errors\\n\\n// After: Safe conversion with proper error handling\\nMap<String, dynamic>.from(item as Map)\\n```\\n\\n#### Enhanced Subscription Detection\\n\\nImproved subscription detection logic across platforms with correct state mapping.\\n\\n### Test Suite Overhaul\\n\\nWe\'ve completely reorganized our test suite for better maintainability and coverage:\\n\\n#### Organized by Business Flows\\n\\n- **Purchase Flow Tests** (`test/purchase_flow_test.dart`): General purchase operations, error handling, and platform-specific behaviors\\n- **Subscription Flow Tests** (`test/subscription_flow_test.dart`): Subscription management, active subscription detection, and lifecycle operations\\n- **Available Purchases Tests** (`test/available_purchases_test.dart`): Purchase history, restoration, and transaction management\\n\\n#### Improved Coverage\\n\\n- **Test coverage improved from 26% to 28.2%**\\n- **All 95 tests now pass consistently**\\n- Better mock data consistency and more reliable assertions\\n\\n## Migration Guide\\n\\n### Migration is Seamless\\n\\nThe best part? **No breaking changes!** Version 6.3.0 is fully backward compatible:\\n\\n```dart\\n// Your existing code continues to work unchanged\\nfinal iap = FlutterInappPurchase.instance;\\nawait iap.initConnection();\\n\\n// Use the new unified API (recommended)\\nfinal products = await iap.requestProducts(\\n  RequestProductsParams(\\n    productIds: [\'your_product_id\'],\\n    type: PurchaseType.inapp, // or PurchaseType.subs\\n  ),\\n);\\n\\nawait iap.requestPurchase(\\n  request: RequestPurchase(\\n    ios: RequestPurchaseIOS(sku: \'your_product_id\'),\\n    android: RequestPurchaseAndroid(skus: [\'your_product_id\']),\\n  ),\\n  type: PurchaseType.inapp,\\n);\\n```\\n\\nSimply update your `pubspec.yaml`:\\n\\n```yaml\\ndependencies:\\n  flutter_inapp_purchase: ^6.3.0\\n```\\n\\n### Optional - Use New Fields\\n\\nYou can now access additional platform-specific fields:\\n\\n#### Accessing iOS-Specific Product Information\\n\\n```dart\\n// Before (still works)\\nfinal products = await FlutterInappPurchase.instance.requestProducts(\\n  RequestProductsParams(productIds: [\'premium_monthly\']),\\n);\\nprint(\'Price: ${products.first.price}\');\\n\\n// After (enhanced with new fields)\\nfinal product = products.first;\\nprint(\'Price: ${product.price}\');\\nprint(\'Display Name: ${product.displayName}\'); // New\\nprint(\'Family Shareable: ${product.isFamilyShareable}\'); // New\\n\\n// Access subscription info\\nif (product.subscription != null) {\\n  print(\'Subscription Group: ${product.subscription!.subscriptionGroupId}\');\\n}\\n```\\n\\n#### Accessing Enhanced Purchase Information\\n\\n```dart\\n// Purchase handling with new fields\\nFlutterInappPurchase.instance.purchaseUpdatedListener.listen((purchase) {\\n  print(\'Product ID: ${purchase.productId}\');\\n  print(\'Transaction ID: ${purchase.transactionId}\');\\n\\n  // New iOS fields\\n  if (purchase.verificationResultIOS != null) {\\n    print(\'Verification: ${purchase.verificationResultIOS}\');\\n  }\\n  if (purchase.environmentIOS != null) {\\n    print(\'Environment: ${purchase.environmentIOS}\'); // \\"Sandbox\\" | \\"Production\\"\\n  }\\n\\n  // New Android fields\\n  if (purchase.signatureAndroid != null) {\\n    print(\'Signature: ${purchase.signatureAndroid}\');\\n  }\\n});\\n```\\n\\n## Enhanced Server-Side Validation\\n\\nThe new fields enable more robust server-side validation:\\n\\n```dart\\nFuture<bool> validatePurchase(Purchase purchase) async {\\n  final validationData = {\\n    \'transactionId\': purchase.transactionId,\\n    \'productId\': purchase.productId,\\n    \'purchaseToken\': purchase.purchaseToken,\\n  };\\n\\n  if (purchase.platform == IapPlatform.ios) {\\n    // Use StoreKit 2 JWS token\\n    validationData[\'jwsRepresentation\'] = purchase.purchaseToken;\\n    validationData[\'environment\'] = purchase.environmentIOS;\\n\\n    return await validateWithAppStore(validationData);\\n  } else {\\n    // Use Google Play signature validation\\n    validationData[\'signature\'] = purchase.signatureAndroid;\\n    validationData[\'packageName\'] = purchase.packageNameAndroid;\\n\\n    return await validateWithGooglePlay(validationData);\\n  }\\n}\\n```\\n\\n## Technical Improvements\\n\\n### Under the Hood\\n\\n- **Enhanced JSON serialization/deserialization** with better error handling\\n- **Improved mock data consistency** across all test files\\n- **Better error messages** and debugging information\\n- **Standardized field naming** following OpenIAP conventions\\n- **Fixed critical Android purchase state mapping**\\n\\n### Developer Experience\\n\\n- **Comprehensive test coverage** for all business flows\\n- **Better documentation** with practical examples\\n- **Type-safe APIs** with improved null safety\\n- **Consistent behavior** across iOS and Android platforms\\n- **Unified API** with deprecated methods properly marked\\n\\n## Testing Improvements\\n\\n### Better Test Organization\\n\\nIf you were running tests before, you\'ll notice improved organization:\\n\\n```bash\\n# Tests are now organized by flow\\nflutter test test/purchase_flow_test.dart      # General purchases\\nflutter test test/subscription_flow_test.dart  # Subscriptions\\nflutter test test/available_purchases_test.dart # Purchase history\\n```\\n\\n### Enhanced Test Coverage\\n\\n- Test coverage improved from 26% to 28.2%\\n- All 95 tests now pass consistently\\n- Better mock data and more reliable assertions\\n\\n## Why Upgrade?\\n\\n1. **Critical Bug Fix**: Android purchase state mapping now correctly interprets transaction states\\n2. **Enhanced OpenIAP Compliance**: Access to comprehensive platform-specific fields\\n3. **Better Reliability**: Improved type safety and error handling\\n4. **Future-Proof**: Foundation for upcoming OpenIAP features\\n5. **Better Testing**: More comprehensive and reliable test suite\\n6. **No Breaking Changes**: Seamless upgrade experience\\n\\n## Troubleshooting\\n\\nSince 6.3.0 is fully backward compatible, you shouldn\'t encounter any breaking changes. If you do experience issues:\\n\\n1. **Clean and rebuild**:\\n\\n   ```bash\\n   flutter clean\\n   flutter pub get\\n   flutter run\\n   ```\\n\\n2. **Check for proper imports**:\\n\\n   ```dart\\n   import \'package:flutter_inapp_purchase/flutter_inapp_purchase.dart\';\\n   ```\\n\\n3. **Verify platform support**:\\n\\n   - iOS: Requires iOS 11.0+ (StoreKit 2 features need iOS 15.0+)\\n   - Android: Requires API level 19+ with Google Play Billing Library\\n\\n4. **Update deprecated method calls**:\\n   Replace `getProducts()` and `getSubscriptions()` with `requestProducts()`\\n\\n## Resources\\n\\n- **[API Documentation](https://pub.dev/documentation/flutter_inapp_purchase/latest/)**: Complete API reference\\n- **[OpenIAP Specification](https://openiap.dev)**: Official specification\\n- **[GitHub Issues](https://github.com/hyochan/flutter_inapp_purchase/issues)**: Report bugs or request features\\n- **[Documentation Site](https://flutter-inapp-purchase.hyo.dev)**: Comprehensive guides and examples\\n\\n## Community\\n\\nThis release wouldn\'t be possible without our amazing community. Special thanks to all contributors, testers, and users who provided feedback and helped improve the plugin. Special recognition to [@quancr258](https://github.com/quancr258) for reporting the critical Android purchase state mapping issue ([#524](https://github.com/hyochan/flutter_inapp_purchase/issues/524)).\\n\\n---\\n\\n## What\'s Next?\\n\\nWe\'re continuing to work on expanding OpenIAP compliance and improving the developer experience. Stay tuned for future releases!\\n\\n**Happy coding with flutter_inapp_purchase 6.3.0!**\\n\\n---\\n\\n+_Published on August 19, 2025 by the flutter_inapp_purchase team_"},{"id":"release-6.0.0-rc","metadata":{"permalink":"/blog/release-6.0.0-rc","editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/blog/2025-08-01-flutter-iap-6.0.0-rc-release.md","source":"@site/blog/2025-08-01-flutter-iap-6.0.0-rc-release.md","title":"Version 6.0.0-rc.1 - StoreKit 2 & Billing Client v8 Support","description":"We\'re excited to announce the release candidate of flutter_inapp_purchase 6.0.0-rc.1, a major update that brings modern platform support and significant improvements to the Flutter ecosystem!","date":"2025-08-01T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/blog/tags/release","description":"New version releases and updates"},{"inline":false,"label":"StoreKit 2","permalink":"/blog/tags/storekit2","description":"Apple StoreKit 2 related topics"},{"inline":false,"label":"Billing Client v8","permalink":"/blog/tags/billing-client-v8","description":"Android Billing Client v8 related topics"},{"inline":false,"label":"Flutter","permalink":"/blog/tags/flutter","description":"Flutter framework related topics"},{"inline":false,"label":"In-App Purchase","permalink":"/blog/tags/in-app-purchase","description":"In-app purchase implementation and best practices"}],"readingTime":3.26,"hasTruncateMarker":true,"authors":[{"name":"Hyo","title":"Maintainer of flutter_inapp_purchase & expo-iap","url":"https://github.com/hyochan","page":{"permalink":"/blog/authors/hyochan"},"socials":{"x":"https://x.com/hyodotdev","github":"https://github.com/hyochan"},"imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"release-6.0.0-rc","title":"Version 6.0.0-rc.1 - StoreKit 2 & Billing Client v8 Support","authors":["hyochan"],"tags":["release","storekit2","billing-client-v8","flutter","in-app-purchase"]},"unlisted":false,"prevItem":{"title":"Version 6.3.0 - Enhanced OpenIAP Compliance & Better Testing","permalink":"/blog/release-6.3.0"}},"content":"We\'re excited to announce the release candidate of **flutter_inapp_purchase 6.0.0-rc.1**, a major update that brings modern platform support and significant improvements to the Flutter ecosystem!\\n\\n> \u26a0\ufe0f **Note**: This is a Release Candidate version. While feature-complete and tested, it may still contain bugs. Please test thoroughly in your applications before using in production.\\n\\n![flutter_inapp_purchase 6.0.0 Release](/img/logo.png)\\n\\n## \u2728 What\'s New in 6.0.0-rc.1\\n\\n### \ud83c\udf4e iOS StoreKit 2 Support\\n\\nflutter_inapp_purchase now fully supports **StoreKit 2** for iOS 15.0+, providing:\\n\\n- **Modern Transaction Handling**: Improved purchase flows with better error handling\\n- **Enhanced Security**: Built-in receipt validation and fraud prevention\\n- **Better Performance**: Optimized for iOS 15+ devices\\n- **Automatic Fallback**: Seamless fallback to StoreKit 1 for older iOS versions\\n\\n```dart\\n// StoreKit 2 automatically used on iOS 15.0+\\nawait FlutterInappPurchase.instance.requestPurchase(\\n  request: RequestPurchase(\\n    ios: RequestPurchaseIosProps(sku: \'premium_upgrade\'),\\n    android: RequestPurchaseAndroidProps(skus: [\'premium_upgrade\']),\\n  ),\\n  type: PurchaseType.inapp,\\n);\\n```\\n\\n\x3c!--truncate--\x3e\\n\\n### \ud83e\udd16 Android Billing Client v8\\n\\nUpdated to the latest **Google Play Billing Client v8**, offering:\\n\\n- **Improved Reliability**: Better connection handling and error recovery\\n- **Enhanced Security**: Advanced fraud detection and validation\\n- **Modern APIs**: Latest Google Play billing features\\n- **Better Testing**: Improved support for testing environments\\n\\n### \ud83d\udd04 Breaking Changes & Migration\\n\\nThis is a **major version update** with some breaking changes. Key changes include:\\n\\n1. **Minimum Requirements**:\\n\\n   - iOS 11.0+ (previously iOS 9.0+)\\n   - Android API 21+ (previously API 19+)\\n   - Flutter 3.0+ (previously Flutter 2.0+)\\n\\n2. **API Changes**:\\n\\n   - Updated error code enums to `lowerCamelCase`\\n   - Refined purchase request structure\\n   - Improved type safety\\n\\n3. **Migration Guide**: Check our [Migration Guide](/docs/migration/from-v5) for detailed instructions.\\n\\n## \ud83c\udfaf Cross-Platform Compatibility\\n\\nflutter_inapp_purchase 6.0.0 maintains **99% API compatibility** with [expo-iap](https://github.com/hyochan/expo-iap), making it easier than ever to share purchase logic across React Native and Flutter projects.\\n\\n## \ud83d\udcca Performance Improvements\\n\\n- **50% faster** connection initialization\\n- **Reduced memory footprint** by 30%\\n- **Better error handling** with more descriptive error messages\\n- **Improved testing support** with mock implementations\\n\\n## \ud83d\udee1\ufe0f Security Enhancements\\n\\n- Enhanced receipt validation for both platforms\\n- Better fraud detection with StoreKit 2 and Billing Client v8\\n- Improved server-side verification support\\n- Advanced error handling for security-related issues\\n\\n## \ud83d\ude80 Getting Started\\n\\n### Installation\\n\\n```bash\\nflutter pub add flutter_inapp_purchase\\n```\\n\\n### Quick Setup\\n\\n```dart\\nimport \'package:flutter_inapp_purchase/flutter_inapp_purchase.dart\';\\n\\n// Initialize connection\\nawait FlutterInappPurchase.instance.initConnection();\\n\\n// Get products\\nfinal products = await FlutterInappPurchase.instance.getProducts([\'product_id\']);\\n\\n// Make a purchase\\nawait FlutterInappPurchase.instance.requestPurchaseSimple(\\n  productId: \'premium_upgrade\',\\n  type: PurchaseType.inapp,\\n);\\n```\\n\\n## \ud83d\udcda Documentation\\n\\nOur documentation has been completely redesigned to match modern standards:\\n\\n- **[Getting Started Guide](/docs/getting-started/installation)** - Complete setup instructions\\n- **[API Reference](/docs/api/flutter-inapp-purchase)** - Comprehensive API documentation\\n- **[Migration Guide](/docs/migration/from-v5)** - Upgrade from v5.x to v6.0\\n- **[Platform Setup](/docs/getting-started/ios-setup)** - iOS and Android configuration\\n\\n## \ud83e\udd1d Community & Support\\n\\nThank you to all contributors who made this release possible! Special thanks to:\\n\\n- Community feedback on StoreKit 2 integration\\n- Beta testers for Billing Client v8 support\\n- Documentation contributors\\n\\n## \ud83d\udd1c What\'s Next\\n\\nLooking ahead to future releases:\\n\\n- **React Native Compatibility**: Even closer API parity with expo-iap\\n- **Advanced Subscription Features**: Enhanced subscription management\\n- **Testing Utilities**: Better testing and mocking support\\n- **Performance Optimizations**: Continued performance improvements\\n\\n## \ud83d\udce5 How to Try the Release Candidate\\n\\nTo test the release candidate in your project:\\n\\n```yaml\\ndependencies:\\n  flutter_inapp_purchase: ^6.4.0\\n```\\n\\nOr use the command:\\n\\n```bash\\nflutter pub add flutter_inapp_purchase:^6.0.0-rc.1\\n```\\n\\n## \ud83d\udd0d What We Need From You\\n\\nAs this is a release candidate, we need your help to ensure a stable final release:\\n\\n1. **Test in your apps**: Try the RC in development and staging environments\\n2. **Report issues**: Found a bug? [Report it on GitHub](https://github.com/hyochan/flutter_inapp_purchase/issues)\\n3. **Share feedback**: Let us know about your experience in [Discussions](https://github.com/hyochan/flutter_inapp_purchase/discussions)\\n\\n## \ud83d\udcc5 Release Timeline\\n\\n- **RC Period**: August 2025 - September 2025\\n- **Final Release**: Expected September 2025 (pending feedback)\\n\\nDon\'t forget to check our [Migration Guide](/docs/migration/from-v5) for a smooth upgrade experience!\\n\\n---\\n\\nQuestions? Join our [GitHub Discussions](https://github.com/hyochan/flutter_inapp_purchase/discussions) or report issues on [GitHub](https://github.com/hyochan/flutter_inapp_purchase/issues).\\n\\nHappy testing! \ud83e\uddea\\n\\n> **Remember**: This is a release candidate. Use in production at your own discretion after thorough testing."}]}}')}}]);