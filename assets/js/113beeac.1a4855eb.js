"use strict";(self.webpackChunkflutter_inapp_purchase_docs=self.webpackChunkflutter_inapp_purchase_docs||[]).push([[7048],{7891:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"examples/subscription-store","title":"Subscription Store","description":"A complete subscription store implementation with monthly and yearly plans.","source":"@site/versioned_docs/version-6.3/examples/subscription-store.md","sourceDirName":"examples","slug":"/examples/subscription-store","permalink":"/docs/6.3/examples/subscription-store","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/versioned_docs/version-6.3/examples/subscription-store.md","tags":[],"version":"6.3","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Subscription Store"},"sidebar":"docsSidebar","previous":{"title":"Basic Store","permalink":"/docs/6.3/examples/basic-store"},"next":{"title":"Complete Implementation","permalink":"/docs/6.3/examples/complete-implementation"}}');var t=i(4848),s=i(8453);const o={sidebar_position:2,title:"Subscription Store"},a="Subscription Store Example",c={},l=[{value:"Features",id:"features",level:2},{value:"Complete Implementation",id:"complete-implementation",level:2},{value:"Key Features Explained",id:"key-features-explained",level:2},{value:"1. Subscription Grouping",id:"1-subscription-grouping",level:3},{value:"2. Status Display",id:"2-status-display",level:3},{value:"3. Visual Hierarchy",id:"3-visual-hierarchy",level:3},{value:"Best Practices Implemented",id:"best-practices-implemented",level:2},{value:"Testing Considerations",id:"testing-considerations",level:2}];function u(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"subscription-store-example",children:"Subscription Store Example"})}),"\n",(0,t.jsx)(e.p,{children:"A complete subscription store implementation with monthly and yearly plans."}),"\n",(0,t.jsx)(e.h2,{id:"features",children:"Features"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Multiple subscription tiers"}),"\n",(0,t.jsx)(e.li,{children:"Subscription status display"}),"\n",(0,t.jsx)(e.li,{children:"Automatic renewal handling"}),"\n",(0,t.jsx)(e.li,{children:"Restore purchases"}),"\n",(0,t.jsx)(e.li,{children:"Grace period support"}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"complete-implementation",children:"Complete Implementation"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-dart",children:"import 'package:flutter/material.dart';\nimport 'package:flutter_inapp_purchase/flutter_inapp_purchase.dart';\nimport 'dart:async';\nimport 'dart:io';\n\nclass SubscriptionStore extends StatefulWidget {\n  @override\n  _SubscriptionStoreState createState() => _SubscriptionStoreState();\n}\n\nclass _SubscriptionStoreState extends State<SubscriptionStore> {\n  StreamSubscription? _purchaseUpdatedSubscription;\n  StreamSubscription? _purchaseErrorSubscription;\n\n  List<IapItem> _subscriptions = [];\n  List<PurchasedItem> _purchases = [];\n  bool _isLoading = true;\n\n  // Your subscription IDs\n  final List<String> _subscriptionIds = [\n    'premium_monthly',\n    'premium_yearly',\n    'pro_monthly',\n    'pro_yearly',\n  ];\n\n  @override\n  void initState() {\n    super.initState();\n    _initializeStore();\n  }\n\n  @override\n  void dispose() {\n    _purchaseUpdatedSubscription?.cancel();\n    _purchaseErrorSubscription?.cancel();\n    super.dispose();\n  }\n\n  Future<void> _initializeStore() async {\n    try {\n      // Initialize connection\n      await FlutterInappPurchase.instance.initialize();\n\n      // Set up listeners\n      _purchaseUpdatedSubscription =\n          FlutterInappPurchase.purchaseUpdated.listen(_handlePurchaseUpdate);\n\n      _purchaseErrorSubscription =\n          FlutterInappPurchase.purchaseError.listen(_handlePurchaseError);\n\n      // Load subscriptions and purchases\n      await _loadSubscriptions();\n      await _loadPurchases();\n\n    } catch (e) {\n      _showError('Failed to initialize store: $e');\n    } finally {\n      setState(() => _isLoading = false);\n    }\n  }\n\n  Future<void> _loadSubscriptions() async {\n    try {\n      final subscriptions = await FlutterInappPurchase.instance\n          .requestProducts(skus: _subscriptionIds, type: 'subs');\n\n      setState(() {\n        _subscriptions = subscriptions;\n      });\n    } catch (e) {\n      _showError('Failed to load subscriptions: $e');\n    }\n  }\n\n  Future<void> _loadPurchases() async {\n    try {\n      final purchases = await FlutterInappPurchase.instance\n          .getAvailablePurchases();\n\n      setState(() {\n        _purchases = purchases ?? [];\n      });\n    } catch (e) {\n      _showError('Failed to load purchases: $e');\n    }\n  }\n\n  void _handlePurchaseUpdate(PurchasedItem? item) async {\n    if (item == null) return;\n\n    print('Purchase update: ${item.productId}');\n\n    try {\n      // Verify purchase on your server\n      final isValid = await _verifyPurchase(item);\n\n      if (isValid) {\n        // Deliver subscription access\n        await _deliverSubscription(item);\n\n        // Complete transaction\n        await _completeTransaction(item);\n\n        // Refresh purchases\n        await _loadPurchases();\n\n        _showSuccess('Subscription activated!');\n      } else {\n        _showError('Purchase verification failed');\n      }\n    } catch (e) {\n      _showError('Failed to process purchase: $e');\n    }\n  }\n\n  void _handlePurchaseError(PurchasedItem? item) {\n    // Handle purchase errors\n    _showError('Purchase failed');\n  }\n\n  Future<void> _requestSubscription(String productId) async {\n    try {\n      await FlutterInappPurchase.instance.requestSubscription(productId);\n    } catch (e) {\n      _showError('Failed to request subscription: $e');\n    }\n  }\n\n  Future<void> _restorePurchases() async {\n    try {\n      setState(() => _isLoading = true);\n      await _loadPurchases();\n      _showSuccess('Purchases restored');\n    } catch (e) {\n      _showError('Failed to restore purchases: $e');\n    } finally {\n      setState(() => _isLoading = false);\n    }\n  }\n\n  Future<bool> _verifyPurchase(PurchasedItem item) async {\n    // TODO: Implement server-side verification\n    // This should verify the receipt with your backend\n    return true;\n  }\n\n  Future<void> _deliverSubscription(PurchasedItem item) async {\n    // TODO: Grant subscription access to user\n    print('Delivering subscription: ${item.productId}');\n  }\n\n  Future<void> _completeTransaction(PurchasedItem item) async {\n    if (Platform.isIOS) {\n      await FlutterInappPurchase.instance.finishTransaction(item);\n    } else if (Platform.isAndroid) {\n      // Subscriptions are auto-acknowledged on Android\n      // But you might want to acknowledge manually for better control\n      if (item.isAcknowledgedAndroid == false) {\n        await FlutterInappPurchase.instance.acknowledgePurchase(\n          purchaseToken: item.purchaseToken!,\n        );\n      }\n    }\n  }\n\n  bool _isSubscriptionActive(String productId) {\n    return _purchases.any((purchase) {\n      if (purchase.productId != productId) return false;\n\n      // Check if subscription is still valid\n      // You might want to check expiration date here\n      return true;\n    });\n  }\n\n  String _getSubscriptionTier(String productId) {\n    if (productId.contains('premium')) return 'Premium';\n    if (productId.contains('pro')) return 'Pro';\n    return 'Basic';\n  }\n\n  String _getSubscriptionPeriod(String productId) {\n    if (productId.contains('monthly')) return 'Monthly';\n    if (productId.contains('yearly')) return 'Yearly';\n    return '';\n  }\n\n  Color _getTierColor(String tier) {\n    switch (tier.toLowerCase()) {\n      case 'premium': return Colors.orange;\n      case 'pro': return Colors.purple;\n      default: return Colors.blue;\n    }\n  }\n\n  void _showError(String message) {\n    ScaffoldMessenger.of(context).showSnackBar(\n      SnackBar(\n        content: Text(message),\n        backgroundColor: Colors.red,\n      ),\n    );\n  }\n\n  void _showSuccess(String message) {\n    ScaffoldMessenger.of(context).showSnackBar(\n      SnackBar(\n        content: Text(message),\n        backgroundColor: Colors.green,\n      ),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Premium Subscriptions'),\n        actions: [\n          IconButton(\n            icon: Icon(Icons.restore),\n            onPressed: _restorePurchases,\n            tooltip: 'Restore Purchases',\n          ),\n        ],\n      ),\n      body: _isLoading\n          ? Center(child: CircularProgressIndicator())\n          : _buildSubscriptionPlans(),\n    );\n  }\n\n  Widget _buildSubscriptionPlans() {\n    // Group subscriptions by tier\n    final Map<String, List<IapItem>> groupedSubs = {};\n\n    for (final sub in _subscriptions) {\n      final tier = _getSubscriptionTier(sub.productId!);\n      groupedSubs.putIfAbsent(tier, () => []).add(sub);\n    }\n\n    return SingleChildScrollView(\n      padding: EdgeInsets.all(16),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          // Current Status\n          _buildCurrentStatus(),\n\n          SizedBox(height: 24),\n\n          // Subscription Plans\n          Text(\n            'Choose Your Plan',\n            style: Theme.of(context).textTheme.headlineSmall,\n          ),\n          SizedBox(height: 16),\n\n          ...groupedSubs.entries.map((entry) {\n            return _buildTierSection(entry.key, entry.value);\n          }),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildCurrentStatus() {\n    final activeSubscriptions = _purchases.where((p) =>\n        _subscriptionIds.contains(p.productId)).toList();\n\n    if (activeSubscriptions.isEmpty) {\n      return Card(\n        child: Padding(\n          padding: EdgeInsets.all(16),\n          child: Row(\n            children: [\n              Icon(Icons.info_outline, color: Colors.grey),\n              SizedBox(width: 12),\n              Text('No active subscriptions'),\n            ],\n          ),\n        ),\n      );\n    }\n\n    return Card(\n      color: Colors.green.shade50,\n      child: Padding(\n        padding: EdgeInsets.all(16),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Row(\n              children: [\n                Icon(Icons.check_circle, color: Colors.green),\n                SizedBox(width: 8),\n                Text(\n                  'Active Subscriptions',\n                  style: TextStyle(\n                    fontWeight: FontWeight.bold,\n                    color: Colors.green.shade700,\n                  ),\n                ),\n              ],\n            ),\n            SizedBox(height: 8),\n            ...activeSubscriptions.map((sub) => Padding(\n              padding: EdgeInsets.only(left: 32, top: 4),\n              child: Text(\n                '${_getSubscriptionTier(sub.productId!)} ${_getSubscriptionPeriod(sub.productId!)}',\n                style: TextStyle(color: Colors.green.shade700),\n              ),\n            )),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildTierSection(String tier, List<IapItem> subscriptions) {\n    final color = _getTierColor(tier);\n\n    return Card(\n      margin: EdgeInsets.only(bottom: 16),\n      child: Column(\n        children: [\n          Container(\n            width: double.infinity,\n            padding: EdgeInsets.all(16),\n            decoration: BoxDecoration(\n              color: color.withOpacity(0.1),\n              borderRadius: BorderRadius.only(\n                topLeft: Radius.circular(4),\n                topRight: Radius.circular(4),\n              ),\n            ),\n            child: Text(\n              tier,\n              style: TextStyle(\n                fontSize: 20,\n                fontWeight: FontWeight.bold,\n                color: color,\n              ),\n            ),\n          ),\n          ...subscriptions.map((sub) => _buildSubscriptionTile(sub, color)),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildSubscriptionTile(IapItem subscription, Color color) {\n    final isActive = _isSubscriptionActive(subscription.productId!);\n    final period = _getSubscriptionPeriod(subscription.productId!);\n\n    return ListTile(\n      title: Text(subscription.title ?? period),\n      subtitle: Text(subscription.description ?? ''),\n      trailing: isActive\n          ? Container(\n              padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),\n              decoration: BoxDecoration(\n                color: Colors.green,\n                borderRadius: BorderRadius.circular(16),\n              ),\n              child: Text(\n                'ACTIVE',\n                style: TextStyle(\n                  color: Colors.white,\n                  fontSize: 12,\n                  fontWeight: FontWeight.bold,\n                ),\n              ),\n            )\n          : ElevatedButton(\n              onPressed: () => _requestSubscription(subscription.productId!),\n              style: ElevatedButton.styleFrom(\n                backgroundColor: color,\n                foregroundColor: Colors.white,\n              ),\n              child: Text(subscription.localizedPrice ?? 'Subscribe'),\n            ),\n    );\n  }\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"key-features-explained",children:"Key Features Explained"}),"\n",(0,t.jsx)(e.h3,{id:"1-subscription-grouping",children:"1. Subscription Grouping"}),"\n",(0,t.jsx)(e.p,{children:"The store groups subscriptions by tier (Premium, Pro) for better organization:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-dart",children:"final Map<String, List<IapItem>> groupedSubs = {};\n\nfor (final sub in _subscriptions) {\n  final tier = _getSubscriptionTier(sub.productId!);\n  groupedSubs.putIfAbsent(tier, () => []).add(sub);\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"2-status-display",children:"2. Status Display"}),"\n",(0,t.jsx)(e.p,{children:"Shows current subscription status prominently:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-dart",children:"Widget _buildCurrentStatus() {\n  final activeSubscriptions = _purchases.where((p) =>\n      _subscriptionIds.contains(p.productId)).toList();\n\n  if (activeSubscriptions.isEmpty) {\n    return _buildNoSubscriptionCard();\n  }\n\n  return _buildActiveSubscriptionCard(activeSubscriptions);\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"3-visual-hierarchy",children:"3. Visual Hierarchy"}),"\n",(0,t.jsx)(e.p,{children:"Different colors and styling for different subscription tiers:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-dart",children:"Color _getTierColor(String tier) {\n  switch (tier.toLowerCase()) {\n    case 'premium': return Colors.orange;\n    case 'pro': return Colors.purple;\n    default: return Colors.blue;\n  }\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"best-practices-implemented",children:"Best Practices Implemented"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Error Handling"}),": Comprehensive error handling with user-friendly messages"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Loading States"}),": Shows loading indicators during async operations"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Purchase Verification"}),": Placeholder for server-side verification"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Transaction Completion"}),": Proper handling of iOS and Android differences"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Restore Functionality"}),": Easy way for users to restore purchases"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Status Display"}),": Clear indication of active subscriptions"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"testing-considerations",children:"Testing Considerations"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Test with different subscription tiers"}),"\n",(0,t.jsx)(e.li,{children:"Test restoration on device reinstall"}),"\n",(0,t.jsx)(e.li,{children:"Test subscription expiration handling"}),"\n",(0,t.jsx)(e.li,{children:"Test grace period scenarios"}),"\n",(0,t.jsx)(e.li,{children:"Test with different payment methods"}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"This example provides a solid foundation for a subscription-based app with multiple tiers and billing periods."})]})}function d(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(u,{...n})}):u(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>o,x:()=>a});var r=i(6540);const t={},s=r.createContext(t);function o(n){const e=r.useContext(s);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:o(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);