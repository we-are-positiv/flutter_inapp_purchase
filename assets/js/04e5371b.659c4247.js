"use strict";(self.webpackChunkflutter_inapp_purchase_docs=self.webpackChunkflutter_inapp_purchase_docs||[]).push([[4646],{2701:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"guides/subscriptions","title":"Subscriptions","description":"Complete guide to implementing subscription-based purchases in your Flutter app.","source":"@site/versioned_docs/version-6.3/guides/subscriptions.md","sourceDirName":"guides","slug":"/guides/subscriptions","permalink":"/docs/6.3/guides/subscriptions","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/versioned_docs/version-6.3/guides/subscriptions.md","tags":[],"version":"6.3","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Subscriptions"}}');var t=i(4848),r=i(8453);const a={sidebar_position:2,title:"Subscriptions"},o="Subscriptions Guide",c={},u=[{value:"Overview",id:"overview",level:2},{value:"Basic Setup",id:"basic-setup",level:2},{value:"1. Initialize IAP Connection",id:"1-initialize-iap-connection",level:3},{value:"2. Fetch Subscription Products",id:"2-fetch-subscription-products",level:3},{value:"Subscription Purchase Flow",id:"subscription-purchase-flow",level:2},{value:"Basic Purchase",id:"basic-purchase",level:3},{value:"Advanced Purchase with Options",id:"advanced-purchase-with-options",level:3},{value:"Subscription Management",id:"subscription-management",level:2},{value:"Check Active Subscriptions",id:"check-active-subscriptions",level:3},{value:"Handle Subscription Changes",id:"handle-subscription-changes",level:3},{value:"Subscription UI Components",id:"subscription-ui-components",level:2},{value:"Subscription Card Widget",id:"subscription-card-widget",level:3},{value:"Subscription Status Widget",id:"subscription-status-widget",level:3},{value:"Platform-Specific Considerations",id:"platform-specific-considerations",level:2},{value:"iOS Subscriptions",id:"ios-subscriptions",level:3},{value:"Android Subscriptions",id:"android-subscriptions",level:3},{value:"Subscription Validation",id:"subscription-validation",level:2},{value:"Server-Side Validation",id:"server-side-validation",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Testing Subscriptions",id:"testing-subscriptions",level:2},{value:"Sandbox Testing (iOS)",id:"sandbox-testing-ios",level:3},{value:"Test Purchases (Android)",id:"test-purchases-android",level:3},{value:"Related Documentation",id:"related-documentation",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"subscriptions-guide",children:"Subscriptions Guide"})}),"\n",(0,t.jsx)(e.p,{children:"Complete guide to implementing subscription-based purchases in your Flutter app."}),"\n",(0,t.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(e.p,{children:"Subscriptions are recurring purchases that provide access to content or services for a specific period. This guide covers subscription implementation, management, and best practices."}),"\n",(0,t.jsx)(e.h2,{id:"basic-setup",children:"Basic Setup"}),"\n",(0,t.jsx)(e.h3,{id:"1-initialize-iap-connection",children:"1. Initialize IAP Connection"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-dart",children:"import 'package:flutter_inapp_purchase/flutter_inapp_purchase.dart';\n\nclass SubscriptionService {\n  // Using constructor for subscription management\n  final _iap = FlutterInappPurchase();\n  bool _isInitialized = false;\n\n  Future<void> initialize() async {\n    if (_isInitialized) return;\n\n    try {\n      await _iap.initConnection();\n      _isInitialized = true;\n      _setupListeners();\n    } catch (e) {\n      print('Failed to initialize IAP: $e');\n    }\n  }\n\n  void _setupListeners() {\n    _iap.purchaseUpdated.listen(_handlePurchase);\n    _iap.purchaseError.listen(_handleError);\n  }\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"2-fetch-subscription-products",children:"2. Fetch Subscription Products"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-dart",children:"class SubscriptionManager {\n  // Create instance for subscription manager\n  final _iap = FlutterInappPurchase();\n\n  final _subscriptionIds = [\n    'com.example.monthly_premium',\n    'com.example.yearly_premium',\n    'com.example.basic_monthly',\n  ];\n\n  List<IapItem> _subscriptions = [];\n\n  Future<void> loadSubscriptions() async {\n    try {\n      _subscriptions = await _iap.requestProducts(\n        RequestProductsParams(\n          skus: _subscriptionIds,\n          type: PurchaseType.subs,\n        ),\n      );\n\n      // Sort by price or preference\n      _subscriptions.sort((a, b) =>\n          _extractPrice(a).compareTo(_extractPrice(b)));\n\n    } catch (e) {\n      print('Error loading subscriptions: $e');\n    }\n  }\n\n  double _extractPrice(IapItem item) {\n    // Extract numeric price from localizedPrice\n    final priceStr = item.price ?? '0';\n    return double.tryParse(priceStr) ?? 0.0;\n  }\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"subscription-purchase-flow",children:"Subscription Purchase Flow"}),"\n",(0,t.jsx)(e.h3,{id:"basic-purchase",children:"Basic Purchase"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-dart",children:"Future<void> purchaseSubscription(String subscriptionId) async {\n  // Using instance created in the class\n  final iap = FlutterInappPurchase();\n\n  try {\n    await iap.requestPurchase(\n      request: RequestPurchase(\n        ios: RequestPurchaseIOS(sku: subscriptionId),\n        android: RequestPurchaseAndroid(\n          skus: [subscriptionId],\n          obfuscatedAccountIdAndroid: await _getUserId(),\n        ),\n      ),\n      type: PurchaseType.subs,\n    );\n\n    // Result will be delivered via purchaseUpdated stream\n\n  } catch (e) {\n    print('Subscription purchase failed: $e');\n    _handlePurchaseError(e);\n  }\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"advanced-purchase-with-options",children:"Advanced Purchase with Options"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-dart",children:"Future<void> purchaseSubscriptionAdvanced({\n  required String subscriptionId,\n  String? upgradeFromId,\n  int? prorationMode,\n}) async {\n  // Create a new instance for this subscription flow\n  final iap = FlutterInappPurchase();\n\n  try {\n    if (Platform.isAndroid && upgradeFromId != null) {\n      // Android subscription upgrade/downgrade\n      final currentToken = await _getCurrentSubscriptionToken(upgradeFromId);\n\n      await iap.requestPurchase(\n        request: RequestPurchase(\n          ios: RequestPurchaseIOS(sku: subscriptionId),\n          android: RequestPurchaseAndroid(\n            skus: [subscriptionId],\n            purchaseTokenAndroid: currentToken, // [DEPRECATED] Use purchaseToken instead\n            replacementModeAndroid: prorationMode ??\n                AndroidProrationMode.IMMEDIATE_AND_CHARGE_PRORATED_PRICE,\n            obfuscatedAccountIdAndroid: await _getUserId(),\n          ),\n        ),\n        type: PurchaseType.subs,\n      );\n    } else {\n      // New subscription or iOS\n      await iap.requestPurchase(\n        request: RequestPurchase(\n          ios: RequestPurchaseIOS(sku: subscriptionId),\n          android: RequestPurchaseAndroid(\n            skus: [subscriptionId],\n            obfuscatedAccountIdAndroid: await _getUserId(),\n          ),\n        ),\n        type: PurchaseType.subs,\n      );\n    }\n  } catch (e) {\n    _handleSubscriptionError(e);\n  }\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"subscription-management",children:"Subscription Management"}),"\n",(0,t.jsx)(e.h3,{id:"check-active-subscriptions",children:"Check Active Subscriptions"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-dart",children:"class SubscriptionChecker {\n  Future<SubscriptionStatus> checkSubscriptionStatus() async {\n    try {\n      final purchases = await FlutterInappPurchase.instance.getAvailablePurchases();\n\n      final activeSubscriptions = purchases.where((purchase) =>\n          _isSubscription(purchase.productId) &&\n          _isActive(purchase)\n      ).toList();\n\n      if (activeSubscriptions.isEmpty) {\n        return SubscriptionStatus(isActive: false);\n      }\n\n      // Get highest tier subscription\n      final activeSub = _getHighestTierSubscription(activeSubscriptions);\n\n      return SubscriptionStatus(\n        isActive: true,\n        productId: activeSub.productId,\n        expirationDate: _calculateExpirationDate(activeSub),\n        isInGracePeriod: _isInGracePeriod(activeSub),\n      );\n\n    } catch (e) {\n      print('Error checking subscription status: $e');\n      return SubscriptionStatus(isActive: false);\n    }\n  }\n\n  bool _isSubscription(String? productId) {\n    return productId?.contains('subscription') ?? false;\n  }\n\n  bool _isActive(Purchase purchase) {\n    // Check platform-specific active status\n    if (Platform.isAndroid) {\n      return purchase.purchaseStateAndroid == 'purchased';\n    }\n    return true; // iOS purchases in the list are active\n  }\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"handle-subscription-changes",children:"Handle Subscription Changes"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-dart",children:"class SubscriptionChangeHandler {\n  Future<void> upgradeSubscription({\n    required String fromProductId,\n    required String toProductId,\n  }) async {\n    try {\n      if (Platform.isAndroid) {\n        // Get current subscription token\n        final currentToken = await _getCurrentSubscriptionToken(fromProductId);\n\n        if (currentToken != null) {\n          await FlutterInappPurchase.instance.requestPurchase(\n            request: RequestPurchase(\n              ios: RequestPurchaseIOS(sku: toProductId),\n              android: RequestPurchaseAndroid(\n                skus: [toProductId],\n                purchaseTokenAndroid: currentToken, // [DEPRECATED] Use purchaseToken instead\n                replacementModeAndroid: AndroidProrationMode.IMMEDIATE_AND_CHARGE_PRORATED_PRICE,\n              ),\n            ),\n            type: PurchaseType.subs,\n          );\n        } else {\n          throw Exception('Current subscription not found');\n        }\n      } else {\n        // iOS handles this automatically through subscription groups\n        await FlutterInappPurchase.instance.requestPurchase(\n          request: RequestPurchase(\n            ios: RequestPurchaseIOS(sku: toProductId),\n            android: RequestPurchaseAndroid(skus: [toProductId]),\n          ),\n          type: PurchaseType.subs,\n        );\n      }\n    } catch (e) {\n      print('Subscription upgrade failed: $e');\n    }\n  }\n\n  Future<void> cancelSubscription(String productId) async {\n    if (Platform.isIOS) {\n      // Redirect to App Store subscription management\n      await FlutterInappPurchase.instance.showManageSubscriptionsIOS();\n    } else if (Platform.isAndroid) {\n      // Redirect to Google Play subscription management\n      await FlutterInappPurchase.instance.deepLinkToSubscriptionsAndroid(\n        sku: productId,\n        packageName: 'com.example.app',\n      );\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"subscription-ui-components",children:"Subscription UI Components"}),"\n",(0,t.jsx)(e.h3,{id:"subscription-card-widget",children:"Subscription Card Widget"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-dart",children:"class SubscriptionCard extends StatelessWidget {\n  final IapItem subscription;\n  final bool isCurrentPlan;\n  final VoidCallback onTap;\n\n  const SubscriptionCard({\n    Key? key,\n    required this.subscription,\n    required this.isCurrentPlan,\n    required this.onTap,\n  }) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Card(\n      elevation: isCurrentPlan ? 8 : 2,\n      child: InkWell(\n        onTap: isCurrentPlan ? null : onTap,\n        child: Padding(\n          padding: const EdgeInsets.all(16.0),\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              Row(\n                mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                children: [\n                  Text(\n                    subscription.title ?? 'Subscription',\n                    style: Theme.of(context).textTheme.headlineSmall,\n                  ),\n                  if (isCurrentPlan)\n                    Chip(\n                      label: Text('Current'),\n                      backgroundColor: Colors.green,\n                    ),\n                ],\n              ),\n              const SizedBox(height: 8),\n              Text(subscription.description ?? ''),\n              const SizedBox(height: 16),\n              _buildPriceInfo(context),\n              const SizedBox(height: 16),\n              if (!isCurrentPlan)\n                SizedBox(\n                  width: double.infinity,\n                  child: ElevatedButton(\n                    onPressed: onTap,\n                    child: Text('Subscribe for ${subscription.localizedPrice}'),\n                  ),\n                ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildPriceInfo(BuildContext context) {\n    return Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        Text(\n          'Price: ${subscription.localizedPrice}',\n          style: Theme.of(context).textTheme.titleMedium,\n        ),\n        Text(\n          'Billing: ${_getBillingPeriod()}',\n          style: Theme.of(context).textTheme.bodyMedium,\n        ),\n        if (_hasFreeTrial())\n          Text(\n            'Free trial: ${_getTrialPeriod()}',\n            style: TextStyle(color: Colors.green),\n          ),\n      ],\n    );\n  }\n\n  String _getBillingPeriod() {\n    if (Platform.isIOS) {\n      final unit = subscription.subscriptionPeriodUnitIOS?.toLowerCase() ?? '';\n      final number = subscription.subscriptionPeriodNumberIOS ?? '1';\n      return '$number $unit${number != '1' ? 's' : ''}';\n    } else {\n      final period = subscription.subscriptionPeriodAndroid ?? '';\n      return _formatAndroidPeriod(period);\n    }\n  }\n\n  String _formatAndroidPeriod(String period) {\n    switch (period) {\n      case 'P1M': return 'monthly';\n      case 'P1Y': return 'yearly';\n      case 'P1W': return 'weekly';\n      default: return period;\n    }\n  }\n\n  bool _hasFreeTrial() {\n    return subscription.introductoryPrice == '0' ||\n           subscription.introductoryPrice == '0.00';\n  }\n\n  String _getTrialPeriod() {\n    // Extract trial period from introductory price details\n    return '7 days'; // Simplified\n  }\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"subscription-status-widget",children:"Subscription Status Widget"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-dart",children:"class SubscriptionStatusWidget extends StatefulWidget {\n  @override\n  _SubscriptionStatusWidgetState createState() => _SubscriptionStatusWidgetState();\n}\n\nclass _SubscriptionStatusWidgetState extends State<SubscriptionStatusWidget> {\n  SubscriptionStatus? _status;\n  bool _loading = true;\n\n  @override\n  void initState() {\n    super.initState();\n    _checkStatus();\n  }\n\n  Future<void> _checkStatus() async {\n    setState(() => _loading = true);\n\n    try {\n      final status = await SubscriptionChecker().checkSubscriptionStatus();\n      setState(() {\n        _status = status;\n        _loading = false;\n      });\n    } catch (e) {\n      setState(() => _loading = false);\n      print('Error checking subscription status: $e');\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (_loading) {\n      return CircularProgressIndicator();\n    }\n\n    if (_status?.isActive != true) {\n      return _buildInactiveStatus();\n    }\n\n    return _buildActiveStatus();\n  }\n\n  Widget _buildActiveStatus() {\n    return Card(\n      color: Colors.green.shade50,\n      child: Padding(\n        padding: const EdgeInsets.all(16.0),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Row(\n              children: [\n                Icon(Icons.check_circle, color: Colors.green),\n                const SizedBox(width: 8),\n                Text(\n                  'Active Subscription',\n                  style: TextStyle(\n                    fontWeight: FontWeight.bold,\n                    color: Colors.green,\n                  ),\n                ),\n              ],\n            ),\n            const SizedBox(height: 8),\n            Text('Plan: ${_status!.productId}'),\n            if (_status!.expirationDate != null)\n              Text('Expires: ${_formatDate(_status!.expirationDate!)}'),\n            const SizedBox(height: 16),\n            Row(\n              children: [\n                ElevatedButton(\n                  onPressed: _manageSubscription,\n                  child: Text('Manage'),\n                ),\n                const SizedBox(width: 8),\n                TextButton(\n                  onPressed: _checkStatus,\n                  child: Text('Refresh'),\n                ),\n              ],\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildInactiveStatus() {\n    return Card(\n      color: Colors.grey.shade50,\n      child: Padding(\n        padding: const EdgeInsets.all(16.0),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Text(\n              'No Active Subscription',\n              style: TextStyle(fontWeight: FontWeight.bold),\n            ),\n            const SizedBox(height: 8),\n            Text('Subscribe to unlock premium features'),\n            const SizedBox(height: 16),\n            ElevatedButton(\n              onPressed: _showSubscriptionOptions,\n              child: Text('View Plans'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  void _manageSubscription() async {\n    if (Platform.isIOS) {\n      await FlutterInappPurchase.instance.showManageSubscriptionsIOS();\n    } else {\n      // Show Android management options\n      _showAndroidManagementOptions();\n    }\n  }\n\n  void _showSubscriptionOptions() {\n    // Navigate to subscription selection screen\n  }\n\n  String _formatDate(DateTime date) {\n    return '${date.day}/${date.month}/${date.year}';\n  }\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"platform-specific-considerations",children:"Platform-Specific Considerations"}),"\n",(0,t.jsx)(e.h3,{id:"ios-subscriptions",children:"iOS Subscriptions"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-dart",children:"class IOSSubscriptionHandler {\n  // Handle subscription groups\n  Future<void> handleSubscriptionGroup(String newSubscriptionId) async {\n    // iOS automatically manages subscription groups\n    // Users can only have one active subscription per group\n    await FlutterInappPurchase.instance.requestPurchase(\n      request: RequestPurchase(\n        ios: RequestPurchaseIOS(sku: newSubscriptionId),\n        android: RequestPurchaseAndroid(skus: [newSubscriptionId]),\n      ),\n      type: PurchaseType.subs,\n    );\n  }\n\n  // Handle promotional offers\n  Future<void> purchaseWithPromoOffer({\n    required String subscriptionId,\n    required String offerId,\n    required String keyId,\n    required String nonce,\n    required String signature,\n    required int timestamp,\n  }) async {\n    await FlutterInappPurchase.instance.requestPurchase(\n      request: RequestPurchase(\n        ios: RequestPurchaseIOS(\n          sku: subscriptionId,\n          withOffer: {\n            'identifier': offerId,\n            'keyIdentifier': keyId,\n            'nonce': nonce,\n            'signature': signature,\n            'timestamp': timestamp,\n          },\n        ),\n      ),\n      type: PurchaseType.subs,\n    );\n  }\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"android-subscriptions",children:"Android Subscriptions"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-dart",children:"class AndroidSubscriptionHandler {\n  // Handle base plans and offers\n  Future<void> purchaseWithOffer({\n    required String subscriptionId,\n    required int offerIndex,\n  }) async {\n    await FlutterInappPurchase.instance.requestPurchase(\n      request: RequestPurchase(\n        ios: RequestPurchaseIOS(sku: subscriptionId),\n        android: RequestPurchaseAndroid(\n          skus: [subscriptionId],\n          subscriptionOffers: [{offerToken: offerIndex.toString()}],\n        ),\n      ),\n      type: PurchaseType.subs,\n    );\n  }\n\n  // Handle subscription upgrades/downgrades\n  Future<void> changeSubscription({\n    required String oldSubscriptionId,\n    required String newSubscriptionId,\n    required int prorationMode,\n  }) async {\n    final oldToken = await _getCurrentSubscriptionToken(oldSubscriptionId);\n\n    if (oldToken != null) {\n      await FlutterInappPurchase.instance.requestPurchase(\n        request: RequestPurchase(\n          ios: RequestPurchaseIOS(sku: newSubscriptionId),\n          android: RequestPurchaseAndroid(\n            skus: [newSubscriptionId],\n            purchaseTokenAndroid: oldToken,\n            replacementModeAndroid: prorationMode,\n          ),\n        ),\n        type: PurchaseType.subs,\n      );\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"subscription-validation",children:"Subscription Validation"}),"\n",(0,t.jsx)(e.h3,{id:"server-side-validation",children:"Server-Side Validation"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-dart",children:"class SubscriptionValidator {\n  Future<bool> validateSubscription(Purchase purchase) async {\n    try {\n      // Always validate subscriptions server-side\n      final response = await _validateWithServer(purchase);\n\n      if (response.isValid) {\n        // Check expiration\n        if (response.expirationDate?.isAfter(DateTime.now()) == true) {\n          return true;\n        }\n      }\n\n      return false;\n    } catch (e) {\n      print('Subscription validation error: $e');\n      return false;\n    }\n  }\n\n  Future<ValidationResponse> _validateWithServer(Purchase purchase) async {\n    // Implement server validation\n    // Return validation result including expiration date\n    throw UnimplementedError();\n  }\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Always Validate Server-Side"}),": Subscriptions should be validated on your server"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Handle Gracefully"}),": Provide grace periods for failed renewals"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Clear Pricing"}),": Display all pricing information clearly"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Easy Management"}),": Provide easy access to subscription management"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Test Thoroughly"}),": Test all subscription scenarios including upgrades"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Monitor Metrics"}),": Track subscription metrics and churn"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"testing-subscriptions",children:"Testing Subscriptions"}),"\n",(0,t.jsx)(e.h3,{id:"sandbox-testing-ios",children:"Sandbox Testing (iOS)"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:"Create sandbox test accounts in App Store Connect"}),"\n",(0,t.jsx)(e.li,{children:"Sign out of your Apple ID in Settings"}),"\n",(0,t.jsx)(e.li,{children:"When purchasing, sign in with sandbox account"}),"\n",(0,t.jsx)(e.li,{children:"Use special subscription durations for testing"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"test-purchases-android",children:"Test Purchases (Android)"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:"Create test accounts in Google Play Console"}),"\n",(0,t.jsx)(e.li,{children:"Upload APK to internal testing track"}),"\n",(0,t.jsx)(e.li,{children:"Add test accounts as testers"}),"\n",(0,t.jsx)(e.li,{children:"Use test product IDs for development"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-dart",children:"class SubscriptionTesting {\n  static const testSubscriptions = [\n    'android.test.purchased',\n    'android.test.canceled',\n    'android.test.item_unavailable',\n  ];\n\n  static bool get isTestMode {\n    return kDebugMode || _isTestFlavor;\n  }\n\n  static Future<void> simulateSubscriptionRenewal() async {\n    // Simulate renewal for testing\n    if (isTestMode) {\n      await Future.delayed(Duration(seconds: 5));\n      // Trigger renewal logic\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"/docs/6.3/guides/purchases",children:"Purchases Guide"})," - General purchase handling"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"/docs/6.3/guides/receipt-validation",children:"Receipt Validation"})," - Validating receipts"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"/docs/6.3/guides/error-handling",children:"Error Handling"})," - Handling subscription errors"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"/docs/6.3/api/methods/request-subscription",children:"API Reference"})," - Subscription API methods"]}),"\n"]})]})}function l(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>a,x:()=>o});var s=i(6540);const t={},r=s.createContext(t);function a(n){const e=s.useContext(r);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:a(n.components),s.createElement(r.Provider,{value:e},n.children)}}}]);