"use strict";(self.webpackChunkflutter_inapp_purchase_docs=self.webpackChunkflutter_inapp_purchase_docs||[]).push([[3365],{4727:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"getting-started/ios-setup","title":"iOS Setup","description":"For complete iOS setup instructions including App Store Connect configuration, Xcode setup, and testing guidelines, please visit:","source":"@site/docs/getting-started/ios-setup.md","sourceDirName":"getting-started","slug":"/getting-started/ios-setup","permalink":"/docs/getting-started/ios-setup","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/docs/getting-started/ios-setup.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"iOS Setup","sidebar_label":"iOS Setup","sidebar_position":2},"sidebar":"docsSidebar","previous":{"title":"Installation","permalink":"/docs/getting-started/installation"},"next":{"title":"Android Setup","permalink":"/docs/getting-started/android-setup"}}');var s=t(4848),i=t(8453);const a={title:"iOS Setup",sidebar_label:"iOS Setup",sidebar_position:2},o="iOS Setup",c={},l=[{value:"Code Implementation",id:"code-implementation",level:2},{value:"Basic Setup",id:"basic-setup",level:3},{value:"iOS-Specific Features",id:"ios-specific-features",level:3},{value:"StoreKit 2 Support",id:"storekit-2-support",level:4},{value:"Subscription Management",id:"subscription-management",level:4},{value:"Restore Purchases",id:"restore-purchases",level:4},{value:"Error Handling",id:"error-handling",level:3},{value:"Common Issues",id:"common-issues",level:2},{value:"Products Not Loading",id:"products-not-loading",level:3},{value:"Testing Issues",id:"testing-issues",level:3},{value:"Receipt Validation",id:"receipt-validation",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"ios-setup",children:"iOS Setup"})}),"\n",(0,s.jsx)(n.p,{children:"For complete iOS setup instructions including App Store Connect configuration, Xcode setup, and testing guidelines, please visit:"}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udc49 ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://openiap.dev/docs/ios-setup",children:"iOS Setup Guide - openiap.dev"})})]}),"\n",(0,s.jsx)(n.p,{children:"The guide covers:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"App Store Connect configuration"}),"\n",(0,s.jsx)(n.li,{children:"Xcode project setup"}),"\n",(0,s.jsx)(n.li,{children:"Sandbox testing"}),"\n",(0,s.jsx)(n.li,{children:"Common troubleshooting steps"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"code-implementation",children:"Code Implementation"}),"\n",(0,s.jsx)(n.h3,{id:"basic-setup",children:"Basic Setup"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"import 'package:flutter_inapp_purchase/flutter_inapp_purchase.dart';\n\nfinal List<String> iosProductIds = [\n  'com.yourapp.premium_upgrade',\n  'com.yourapp.remove_ads',\n  'com.yourapp.monthly_subscription',\n];\n\nclass IOSStoreExample extends StatefulWidget {\n  @override\n  _IOSStoreExampleState createState() => _IOSStoreExampleState();\n}\n\nclass _IOSStoreExampleState extends State<IOSStoreExample> {\n  late StreamSubscription _purchaseUpdatedSubscription;\n  late StreamSubscription _purchaseErrorSubscription;\n  List<IapItem> _products = [];\n  bool _isAvailable = false;\n\n  @override\n  void initState() {\n    super.initState();\n    initPlatformState();\n  }\n\n  Future<void> initPlatformState() async {\n    // Initialize connection\n    final result = await FlutterInappPurchase.instance.initConnection();\n    print('Connection result: $result');\n\n    if (!mounted) return;\n\n    setState(() {\n      _isAvailable = result;\n    });\n\n    // Listen for purchase updates\n    _purchaseUpdatedSubscription =\n        FlutterInappPurchase.purchaseUpdated.listen((purchase) {\n      print('Purchase updated: ${purchase?.productId}');\n      _handlePurchaseUpdate(purchase);\n    });\n\n    _purchaseErrorSubscription =\n        FlutterInappPurchase.purchaseError.listen((error) {\n      print('Purchase error: ${error?.message}');\n      _handlePurchaseError(error);\n    });\n\n    // Get products if connected\n    if (_isAvailable) {\n      await _getProducts();\n    }\n  }\n\n  Future<void> _getProducts() async {\n    try {\n      final products = await FlutterInappPurchase.instance.getProducts(iosProductIds);\n      setState(() {\n        _products = products;\n      });\n    } catch (error) {\n      print('Failed to get products: $error');\n    }\n  }\n\n  void _handlePurchaseUpdate(PurchaseResult? purchase) {\n    if (purchase != null) {\n      switch (purchase.purchaseStateIOS) {\n        case PurchaseState.purchased:\n          _verifyAndFinishPurchase(purchase);\n          break;\n        case PurchaseState.restored:\n          print('Purchase restored: ${purchase.productId}');\n          break;\n        case PurchaseState.purchasing:\n          print('Purchase in progress: ${purchase.productId}');\n          break;\n        case PurchaseState.deferred:\n          print('Purchase deferred: ${purchase.productId}');\n          break;\n        case PurchaseState.failed:\n          print('Purchase failed: ${purchase.productId}');\n          break;\n      }\n    }\n  }\n\n  void _handlePurchaseError(PurchaseResult? error) {\n    if (error != null) {\n      showDialog(\n        context: context,\n        builder: (context) => AlertDialog(\n          title: Text('Purchase Error'),\n          content: Text(error.message ?? 'Unknown error occurred'),\n          actions: [\n            TextButton(\n              onPressed: () => Navigator.pop(context),\n              child: Text('OK'),\n            ),\n          ],\n        ),\n      );\n    }\n  }\n\n  Future<void> _verifyAndFinishPurchase(PurchaseResult purchase) async {\n    // Verify purchase on your server\n    final isValid = await _verifyPurchaseOnServer(purchase);\n\n    if (isValid) {\n      // Grant access to content\n      await _grantPurchaseContent(purchase);\n\n      // Finish the transaction\n      await FlutterInappPurchase.instance.finishTransactionIOS(\n        purchase,\n        isConsumable: purchase.productId?.contains('consumable') ?? false,\n      );\n\n      ScaffoldMessenger.of(context).showSnackBar(\n        SnackBar(content: Text('Purchase successful!')),\n      );\n    } else {\n      print('Purchase verification failed');\n    }\n  }\n\n  Future<bool> _verifyPurchaseOnServer(PurchaseResult purchase) async {\n    // Implement server-side receipt validation\n    // This is a placeholder - implement your actual validation logic\n    return true;\n  }\n\n  Future<void> _grantPurchaseContent(PurchaseResult purchase) async {\n    // Grant the purchased content to the user\n    print('Granting content for: ${purchase.productId}');\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('iOS Store'),\n      ),\n      body: Column(\n        children: [\n          Text('Store Available: $_isAvailable'),\n          Expanded(\n            child: ListView.builder(\n              itemCount: _products.length,\n              itemBuilder: (context, index) {\n                final product = _products[index];\n                return IOSProductTile(\n                  product: product,\n                  onPurchase: () => _purchaseProduct(product),\n                );\n              },\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Future<void> _purchaseProduct(IapItem product) async {\n    try {\n      await FlutterInappPurchase.instance.requestPurchase(\n        RequestPurchase(\n          ios: RequestPurchaseIosProps(sku: product.productId!),\n        ),\n        PurchaseType.inapp,\n      );\n    } catch (error) {\n      print('Purchase request failed: $error');\n    }\n  }\n\n  @override\n  void dispose() {\n    _purchaseUpdatedSubscription.cancel();\n    _purchaseErrorSubscription.cancel();\n    FlutterInappPurchase.instance.finishTransaction();\n    super.dispose();\n  }\n}\n\nclass IOSProductTile extends StatelessWidget {\n  final IapItem product;\n  final VoidCallback onPurchase;\n\n  const IOSProductTile({\n    Key? key,\n    required this.product,\n    required this.onPurchase,\n  }) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Card(\n      margin: EdgeInsets.all(8.0),\n      child: ListTile(\n        title: Text(product.title ?? 'Unknown Product'),\n        subtitle: Text(product.description ?? 'No description'),\n        trailing: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            Text(\n              product.localizedPrice ?? 'N/A',\n              style: TextStyle(fontWeight: FontWeight.bold),\n            ),\n            ElevatedButton(\n              onPressed: onPurchase,\n              child: Text('Buy'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"ios-specific-features",children:"iOS-Specific Features"}),"\n",(0,s.jsx)(n.h4,{id:"storekit-2-support",children:"StoreKit 2 Support"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"// Check StoreKit 2 availability\nFuture<void> checkStoreKit2Support() async {\n  if (Platform.isIOS) {\n    final version = await FlutterInappPurchase.instance.getIOSVersion();\n    final isStoreKit2Available = version >= 15.0;\n    print('StoreKit 2 available: $isStoreKit2Available');\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"subscription-management",children:"Subscription Management"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"// Show subscription management page\nFuture<void> showSubscriptionManagement() async {\n  if (Platform.isIOS) {\n    await FlutterInappPurchase.instance.showManageSubscriptions();\n  }\n}\n\n// Present code redemption sheet\nFuture<void> redeemCode() async {\n  if (Platform.isIOS) {\n    await FlutterInappPurchase.instance.presentCodeRedemptionSheet();\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"restore-purchases",children:"Restore Purchases"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"Future<void> restorePurchases() async {\n  try {\n    final restoredPurchases = await FlutterInappPurchase.instance.restoreTransactions();\n    print('Restored ${restoredPurchases.length} purchases');\n\n    for (var purchase in restoredPurchases) {\n      await _verifyAndFinishPurchase(purchase);\n    }\n  } catch (error) {\n    print('Restore failed: $error');\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"void handleIOSError(PurchaseResult? error) {\n  if (error?.code != null) {\n    switch (error!.code) {\n      case 'E_USER_CANCELLED':\n        // User cancelled - no action needed\n        break;\n      case 'E_PAYMENT_INVALID':\n        showErrorDialog('Payment information is invalid');\n        break;\n      case 'E_PAYMENT_NOT_ALLOWED':\n        showErrorDialog('Payments are not allowed on this device');\n        break;\n      case 'E_PRODUCT_NOT_AVAILABLE':\n        showErrorDialog('This product is not available');\n        break;\n      case 'E_RECEIPT_FAILED':\n        showErrorDialog('Receipt validation failed');\n        break;\n      default:\n        showErrorDialog('Purchase failed: ${error.message}');\n    }\n  }\n}\n\nvoid showErrorDialog(String message) {\n  showDialog(\n    context: context,\n    builder: (context) => AlertDialog(\n      title: Text('Error'),\n      content: Text(message),\n      actions: [\n        TextButton(\n          onPressed: () => Navigator.pop(context),\n          child: Text('OK'),\n        ),\n      ],\n    ),\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"common-issues",children:"Common Issues"}),"\n",(0,s.jsx)(n.h3,{id:"products-not-loading",children:"Products Not Loading"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem"}),": ",(0,s.jsx)(n.code,{children:"getProducts()"})," returns empty list or throws error\n",(0,s.jsx)(n.strong,{children:"Solutions"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Verify product IDs match exactly between code and App Store Connect"}),"\n",(0,s.jsxs)(n.li,{children:["Ensure products are ",(0,s.jsx)(n.strong,{children:"Active"})," in App Store Connect"]}),"\n",(0,s.jsx)(n.li,{children:"Check that all Apple Developer agreements are signed"}),"\n",(0,s.jsx)(n.li,{children:"Wait 24 hours after creating products in App Store Connect"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"testing-issues",children:"Testing Issues"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem"}),': "Cannot connect to iTunes Store" error\n',(0,s.jsx)(n.strong,{children:"Solutions"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Test on real device, not simulator"}),"\n",(0,s.jsx)(n.li,{children:"Use proper sandbox tester account"}),"\n",(0,s.jsx)(n.li,{children:"Sign out of production Apple ID first"}),"\n",(0,s.jsx)(n.li,{children:"Ensure In-App Purchase capability is enabled in Xcode"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"receipt-validation",children:"Receipt Validation"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem"}),": Receipt validation failing\n",(0,s.jsx)(n.strong,{children:"Solutions"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Always validate receipts on your server, not client-side"}),"\n",(0,s.jsx)(n.li,{children:"Use Apple's receipt validation API"}),"\n",(0,s.jsx)(n.li,{children:"Handle both sandbox and production receipt endpoints"}),"\n",(0,s.jsx)(n.li,{children:"Implement proper retry logic for network failures"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"./quickstart",children:"Learn about getting started guide"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"./android-setup",children:"Explore Android setup"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"../api/error-codes",children:"Understand error codes"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(6540);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);