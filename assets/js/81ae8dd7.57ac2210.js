"use strict";(self.webpackChunkflutter_inapp_purchase_docs=self.webpackChunkflutter_inapp_purchase_docs||[]).push([[7283],{2403:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"api/types/purchase-state","title":"Purchase States","description":"Types and enums representing the state of purchases and transactions.","source":"@site/versioned_docs/version-6.3/api/types/purchase-state.md","sourceDirName":"api/types","slug":"/api/types/purchase-state","permalink":"/docs/6.3/api/types/purchase-state","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/versioned_docs/version-6.3/api/types/purchase-state.md","tags":[],"version":"6.3","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Purchase States"}}');var t=a(4848),r=a(8453);const i={sidebar_position:2,title:"Purchase States"},c="Purchase States",d={},o=[{value:"Purchase Class",id:"purchase-class",level:2},{value:"Common Properties",id:"common-properties",level:3},{value:"Android-Specific Properties",id:"android-specific-properties",level:3},{value:"iOS-Specific Properties",id:"ios-specific-properties",level:3},{value:"PurchaseState (Android)",id:"purchasestate-android",level:2},{value:"Usage",id:"usage",level:3},{value:"TransactionState (iOS)",id:"transactionstate-ios",level:2},{value:"Usage",id:"usage-1",level:3},{value:"Complete State Handling",id:"complete-state-handling",level:2},{value:"State Transitions",id:"state-transitions",level:2},{value:"Android Purchase Flow",id:"android-purchase-flow",level:3},{value:"iOS Transaction Flow",id:"ios-transaction-flow",level:3},{value:"Error States and Recovery",id:"error-states-and-recovery",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"State Checking",id:"state-checking",level:3},{value:"State Persistence",id:"state-persistence",level:3},{value:"Related Types",id:"related-types",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"purchase-states",children:"Purchase States"})}),"\n",(0,t.jsx)(n.p,{children:"Types and enums representing the state of purchases and transactions."}),"\n",(0,t.jsx)(n.h2,{id:"purchase-class",children:"Purchase Class"}),"\n",(0,t.jsx)(n.p,{children:"Main class representing a completed or pending purchase."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"class Purchase {\n  final String productId;\n  final String? transactionId;\n  final String? transactionReceipt;\n  final String? purchaseToken;\n  final DateTime? transactionDate;\n  final IAPPlatform platform;\n  final bool? isAcknowledgedAndroid;\n  final String? purchaseStateAndroid;\n  final String? originalTransactionIdentifierIOS;\n  final Map<String, dynamic>? originalJson;\n\n  // StoreKit 2 specific fields\n  final String? transactionState;\n  final bool? isUpgraded;\n  final DateTime? expirationDate;\n  final DateTime? revocationDate;\n  final int? revocationReason;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"common-properties",children:"Common Properties"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"productId"})," - The product identifier that was purchased"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"transactionId"})," - Unique transaction identifier"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"transactionReceipt"})," - Receipt data (iOS primarily)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"purchaseToken"})," - Purchase token (Android primarily)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"transactionDate"})," - When the transaction occurred"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"platform"})," - Platform where purchase was made"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"android-specific-properties",children:"Android-Specific Properties"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"isAcknowledgedAndroid"})," - Whether purchase has been acknowledged"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"purchaseStateAndroid"})," - Current state of the purchase"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"ios-specific-properties",children:"iOS-Specific Properties"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"originalTransactionIdentifierIOS"})," - Original transaction ID for renewals"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"transactionState"})," - Current transaction state"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"isUpgraded"})," - Whether subscription was upgraded"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"expirationDate"})," - When subscription expires"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"revocationDate"})," - When purchase was revoked"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"revocationReason"})," - Reason for revocation"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"purchasestate-android",children:"PurchaseState (Android)"}),"\n",(0,t.jsx)(n.p,{children:"Enum representing the state of an Android purchase."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"enum PurchaseState {\n  pending,      // Purchase is pending (awaiting payment)\n  purchased,    // Purchase completed successfully\n  unspecified   // Unknown/unspecified state\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"void handleAndroidPurchase(PurchasedItem item) {\n  switch (item.purchaseStateAndroid) {\n    case PurchaseState.purchased:\n      // Purchase completed - safe to deliver content\n      deliverContent(item.productId);\n      break;\n    case PurchaseState.pending:\n      // Payment pending - wait for completion\n      showPendingMessage();\n      break;\n    case PurchaseState.unspecified:\n      // Unknown state - handle cautiously\n      logUnknownState(item);\n      break;\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"transactionstate-ios",children:"TransactionState (iOS)"}),"\n",(0,t.jsx)(n.p,{children:"Enum representing the state of an iOS transaction."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"enum TransactionState {\n  purchasing,  // Transaction is being processed\n  purchased,   // Transaction completed successfully\n  failed,      // Transaction failed\n  restored,    // Transaction was restored\n  deferred     // Transaction pending external approval (e.g., Ask to Buy)\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"usage-1",children:"Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"void handleIOSTransaction(PurchasedItem item) {\n  switch (item.transactionStateIOS) {\n    case TransactionState.purchased:\n    case TransactionState.restored:\n      // Safe to deliver content and finish transaction\n      deliverContent(item.productId);\n      FlutterInappPurchase.instance.finishTransaction(item);\n      break;\n    case TransactionState.failed:\n      // Transaction failed - don't deliver content\n      showErrorMessage();\n      // Still need to finish failed transactions\n      FlutterInappPurchase.instance.finishTransaction(item);\n      break;\n    case TransactionState.purchasing:\n      // Still processing - wait\n      showLoadingIndicator();\n      break;\n    case TransactionState.deferred:\n      // Waiting for parental approval\n      showDeferredMessage();\n      break;\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"complete-state-handling",children:"Complete State Handling"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"class PurchaseStateHandler {\n  void processPurchase(PurchasedItem purchase) {\n    if (Platform.isAndroid) {\n      _handleAndroidPurchase(purchase);\n    } else if (Platform.isIOS) {\n      _handleIOSPurchase(purchase);\n    }\n  }\n\n  void _handleAndroidPurchase(PurchasedItem purchase) {\n    switch (purchase.purchaseStateAndroid) {\n      case PurchaseState.purchased:\n        if (purchase.isAcknowledgedAndroid == false) {\n          // Need to acknowledge within 3 days\n          _acknowledgePurchase(purchase);\n        }\n        _deliverContent(purchase);\n        break;\n\n      case PurchaseState.pending:\n        // Store pending purchase for later processing\n        _storePendingPurchase(purchase);\n        _showPendingUI();\n        break;\n\n      case PurchaseState.unspecified:\n        // Log for investigation\n        _logUnknownPurchaseState(purchase);\n        break;\n    }\n  }\n\n  void _handleIOSPurchase(PurchasedItem purchase) {\n    switch (purchase.transactionStateIOS) {\n      case TransactionState.purchased:\n        _deliverContent(purchase);\n        _finishTransaction(purchase);\n        break;\n\n      case TransactionState.restored:\n        _restoreContent(purchase);\n        _finishTransaction(purchase);\n        break;\n\n      case TransactionState.failed:\n        _handleFailure(purchase);\n        _finishTransaction(purchase); // Still need to finish\n        break;\n\n      case TransactionState.deferred:\n        _handleDeferred(purchase);\n        // Don't finish - wait for final state\n        break;\n\n      case TransactionState.purchasing:\n        _showPurchasingUI();\n        // Don't finish - wait for completion\n        break;\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"state-transitions",children:"State Transitions"}),"\n",(0,t.jsx)(n.h3,{id:"android-purchase-flow",children:"Android Purchase Flow"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"User initiates purchase\n         \u2193\n Payment method selected\n         \u2193\n    PurchaseState.pending (if async payment)\n         \u2193\n    Payment processed\n         \u2193\n    PurchaseState.purchased\n         \u2193\n    App acknowledges purchase\n         \u2193\n    Purchase complete\n"})}),"\n",(0,t.jsx)(n.h3,{id:"ios-transaction-flow",children:"iOS Transaction Flow"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"User initiates purchase\n         \u2193\n    TransactionState.purchasing\n         \u2193\n    Payment processed\n         \u2193\n    TransactionState.purchased\n         \u2193\n    App delivers content\n         \u2193\n    App finishes transaction\n         \u2193\n    Transaction removed from queue\n"})}),"\n",(0,t.jsx)(n.h2,{id:"error-states-and-recovery",children:"Error States and Recovery"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"class StateRecoveryHandler {\n  Future<void> recoverPendingStates() async {\n    // Get all available purchases\n    final purchases = await FlutterInappPurchase.instance.getAvailablePurchases();\n\n    for (var purchase in purchases) {\n      await _recoverPurchaseState(purchase);\n    }\n  }\n\n  Future<void> _recoverPurchaseState(Purchase purchase) async {\n    if (Platform.isAndroid) {\n      // Check if acknowledgment is needed\n      if (purchase.purchaseStateAndroid == PurchaseState.purchased &&\n          purchase.isAcknowledgedAndroid == false) {\n\n        // Check if content was already delivered\n        if (await _wasContentDelivered(purchase.transactionId)) {\n          // Just acknowledge without re-delivering\n          await _acknowledgePurchaseOnly(purchase);\n        } else {\n          // Deliver content and acknowledge\n          await _deliverContentAndAcknowledge(purchase);\n        }\n      }\n    } else if (Platform.isIOS) {\n      // Check for unfinished transactions\n      final pending = await FlutterInappPurchase.instance.getPendingTransactionsIOS();\n\n      for (var transaction in pending ?? []) {\n        if (transaction.transactionStateIOS == TransactionState.purchased ||\n            transaction.transactionStateIOS == TransactionState.restored) {\n\n          // Verify content delivery\n          if (!await _wasContentDelivered(transaction.transactionId)) {\n            await _deliverContent(transaction);\n          }\n\n          // Finish the transaction\n          await FlutterInappPurchase.instance.finishTransactionIOS(transaction);\n        }\n      }\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"state-checking",children:"State Checking"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:'bool isPurchaseComplete(Purchase purchase) {\n  if (Platform.isAndroid) {\n    return purchase.purchaseStateAndroid == PurchaseState.purchased &&\n           purchase.isAcknowledgedAndroid == true;\n  } else if (Platform.isIOS) {\n    // On iOS, if we receive the purchase, it\'s valid\n    // State checking is for transaction management\n    return true;\n  }\n  return false;\n}\n\nbool needsAcknowledgment(Purchase purchase) {\n  return Platform.isAndroid &&\n         purchase.purchaseStateAndroid == PurchaseState.purchased &&\n         purchase.isAcknowledgedAndroid == false;\n}\n\nbool canFinishTransaction(PurchasedItem item) {\n  if (Platform.isIOS) {\n    return item.transactionStateIOS == TransactionState.purchased ||\n           item.transactionStateIOS == TransactionState.restored ||\n           item.transactionStateIOS == TransactionState.failed;\n  }\n  return true; // Android transactions can always be "finished"\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"state-persistence",children:"State Persistence"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"class PurchaseStateManager {\n  final SharedPreferences prefs;\n\n  Future<void> savePurchaseState(Purchase purchase) async {\n    final stateData = {\n      'productId': purchase.productId,\n      'transactionId': purchase.transactionId,\n      'state': Platform.isAndroid\n          ? purchase.purchaseStateAndroid\n          : purchase.transactionState,\n      'acknowledged': purchase.isAcknowledgedAndroid,\n      'timestamp': DateTime.now().millisecondsSinceEpoch,\n    };\n\n    await prefs.setString(\n      'purchase_state_${purchase.transactionId}',\n      json.encode(stateData),\n    );\n  }\n\n  Future<Map<String, dynamic>?> getPurchaseState(String transactionId) async {\n    final stateJson = prefs.getString('purchase_state_$transactionId');\n    return stateJson != null ? json.decode(stateJson) : null;\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"related-types",children:"Related Types"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/6.3/api/types/error-codes",children:"Error Codes"})," - Error states and codes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/6.3/api/types/product-type",children:"Product Types"})," - Product-related types"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>c});var s=a(6540);const t={},r=s.createContext(t);function i(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);