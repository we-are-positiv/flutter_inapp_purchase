"use strict";(self.webpackChunkflutter_inapp_purchase_docs=self.webpackChunkflutter_inapp_purchase_docs||[]).push([[8872],{3453:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"getting-started/android-setup","title":"Android Setup","description":"For complete Android setup instructions including Google Play Console configuration, app setup, and testing guidelines, please visit:","source":"@site/docs/getting-started/android-setup.md","sourceDirName":"getting-started","slug":"/getting-started/android-setup","permalink":"/docs/getting-started/android-setup","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/docs/getting-started/android-setup.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Android Setup","sidebar_label":"Android Setup","sidebar_position":3},"sidebar":"docsSidebar","previous":{"title":"iOS Setup","permalink":"/docs/getting-started/ios-setup"},"next":{"title":"Purchases","permalink":"/docs/guides/purchases"}}');var s=r(4848),i=r(8453);const a={title:"Android Setup",sidebar_label:"Android Setup",sidebar_position:3},o="Android Setup",c={},d=[{value:"Code Implementation",id:"code-implementation",level:2},{value:"Basic Setup",id:"basic-setup",level:3},{value:"Android-Specific Features",id:"android-specific-features",level:3},{value:"Subscription Management",id:"subscription-management",level:4},{value:"Pending Purchases",id:"pending-purchases",level:4},{value:"Product Details and Offers",id:"product-details-and-offers",level:4},{value:"Error Handling",id:"error-handling",level:3},{value:"Purchase Validation",id:"purchase-validation",level:3},{value:"Common Issues",id:"common-issues",level:2},{value:"Product IDs Not Found",id:"product-ids-not-found",level:3},{value:"Testing Issues",id:"testing-issues",level:3},{value:"Purchase Flow Issues",id:"purchase-flow-issues",level:3},{value:"Subscription Issues",id:"subscription-issues",level:3},{value:"Next Steps",id:"next-steps",level:2}];function u(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"android-setup",children:"Android Setup"})}),"\n",(0,s.jsx)(e.p,{children:"For complete Android setup instructions including Google Play Console configuration, app setup, and testing guidelines, please visit:"}),"\n",(0,s.jsxs)(e.p,{children:["\ud83d\udc49 ",(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.a,{href:"https://openiap.dev/docs/android-setup",children:"Android Setup Guide - openiap.dev"})})]}),"\n",(0,s.jsx)(e.p,{children:"The guide covers:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Google Play Console configuration"}),"\n",(0,s.jsx)(e.li,{children:"App bundle setup and signing"}),"\n",(0,s.jsx)(e.li,{children:"Testing with internal testing tracks"}),"\n",(0,s.jsx)(e.li,{children:"Common troubleshooting steps"}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"code-implementation",children:"Code Implementation"}),"\n",(0,s.jsx)(e.h3,{id:"basic-setup",children:"Basic Setup"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"import 'package:flutter_inapp_purchase/flutter_inapp_purchase.dart';\n\nfinal List<String> androidProductIds = [\n  'premium_upgrade',\n  'coins_100',\n  'monthly_subscription',\n];\n\nclass AndroidStoreExample extends StatefulWidget {\n  @override\n  _AndroidStoreExampleState createState() => _AndroidStoreExampleState();\n}\n\nclass _AndroidStoreExampleState extends State<AndroidStoreExample> {\n  late StreamSubscription _purchaseUpdatedSubscription;\n  late StreamSubscription _purchaseErrorSubscription;\n  List<IapItem> _products = [];\n  List<IapItem> _subscriptions = [];\n  bool _isAvailable = false;\n\n  @override\n  void initState() {\n    super.initState();\n    initPlatformState();\n  }\n\n  Future<void> initPlatformState() async {\n    // Initialize connection\n    final result = await FlutterInappPurchase.instance.initConnection();\n    print('Connection result: $result');\n\n    if (!mounted) return;\n\n    setState(() {\n      _isAvailable = result;\n    });\n\n    // Listen for purchase updates\n    _purchaseUpdatedSubscription =\n        FlutterInappPurchase.purchaseUpdated.listen((purchase) {\n      print('Purchase updated: ${purchase?.productId}');\n      _handlePurchaseUpdate(purchase);\n    });\n\n    _purchaseErrorSubscription =\n        FlutterInappPurchase.purchaseError.listen((error) {\n      print('Purchase error: ${error?.message}');\n      _handlePurchaseError(error);\n    });\n\n    // Get products if connected\n    if (_isAvailable) {\n      await _getProducts();\n      await _getSubscriptions();\n    }\n  }\n\n  Future<void> _getProducts() async {\n    try {\n      final products = await FlutterInappPurchase.instance.getProducts(\n        androidProductIds.where((id) => !id.contains('subscription')).toList(),\n      );\n      setState(() {\n        _products = products;\n      });\n    } catch (error) {\n      print('Failed to get products: $error');\n    }\n  }\n\n  Future<void> _getSubscriptions() async {\n    try {\n      final subscriptions = await FlutterInappPurchase.instance.getSubscriptions(\n        androidProductIds.where((id) => id.contains('subscription')).toList(),\n      );\n      setState(() {\n        _subscriptions = subscriptions;\n      });\n    } catch (error) {\n      print('Failed to get subscriptions: $error');\n    }\n  }\n\n  void _handlePurchaseUpdate(PurchaseResult? purchase) {\n    if (purchase != null) {\n      switch (purchase.purchaseStateAndroid) {\n        case PurchaseState.purchased:\n          _verifyAndFinishPurchase(purchase);\n          break;\n        case PurchaseState.pending:\n          print('Purchase pending: ${purchase.productId}');\n          _showPendingMessage();\n          break;\n        case PurchaseState.unspecified:\n          print('Purchase unspecified: ${purchase.productId}');\n          break;\n      }\n    }\n  }\n\n  void _showPendingMessage() {\n    ScaffoldMessenger.of(context).showSnackBar(\n      SnackBar(\n        content: Text('Purchase is pending. You will receive access once payment is confirmed.'),\n        duration: Duration(seconds: 5),\n      ),\n    );\n  }\n\n  void _handlePurchaseError(PurchaseResult? error) {\n    if (error != null) {\n      showDialog(\n        context: context,\n        builder: (context) => AlertDialog(\n          title: Text('Purchase Error'),\n          content: Text(error.message ?? 'Unknown error occurred'),\n          actions: [\n            TextButton(\n              onPressed: () => Navigator.pop(context),\n              child: Text('OK'),\n            ),\n          ],\n        ),\n      );\n    }\n  }\n\n  Future<void> _verifyAndFinishPurchase(PurchaseResult purchase) async {\n    // Verify purchase on your server\n    final isValid = await _verifyPurchaseOnServer(purchase);\n\n    if (isValid) {\n      // Grant access to content\n      await _grantPurchaseContent(purchase);\n\n      // Finish the transaction\n      await FlutterInappPurchase.instance.finishTransactionAndroid(\n        purchase,\n        isConsumable: purchase.productId?.contains('consumable') ?? false,\n      );\n\n      ScaffoldMessenger.of(context).showSnackBar(\n        SnackBar(content: Text('Purchase successful!')),\n      );\n    } else {\n      print('Purchase verification failed');\n    }\n  }\n\n  Future<bool> _verifyPurchaseOnServer(PurchaseResult purchase) async {\n    // Implement server-side purchase token validation\n    // This is a placeholder - implement your actual validation logic\n    return true;\n  }\n\n  Future<void> _grantPurchaseContent(PurchaseResult purchase) async {\n    // Grant the purchased content to the user\n    print('Granting content for: ${purchase.productId}');\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Android Store'),\n      ),\n      body: Column(\n        children: [\n          Text('Store Available: $_isAvailable'),\n          Expanded(\n            child: ListView(\n              children: [\n                if (_products.isNotEmpty) ...[\n                  Padding(\n                    padding: EdgeInsets.all(16.0),\n                    child: Text('Products', style: Theme.of(context).textTheme.headlineSmall),\n                  ),\n                  ..._products.map((product) => AndroidProductTile(\n                    product: product,\n                    onPurchase: () => _purchaseProduct(product, PurchaseType.inapp),\n                  )),\n                ],\n                if (_subscriptions.isNotEmpty) ...[\n                  Padding(\n                    padding: EdgeInsets.all(16.0),\n                    child: Text('Subscriptions', style: Theme.of(context).textTheme.headlineSmall),\n                  ),\n                  ..._subscriptions.map((subscription) => AndroidProductTile(\n                    product: subscription,\n                    onPurchase: () => _purchaseProduct(subscription, PurchaseType.subs),\n                  )),\n                ],\n              ],\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Future<void> _purchaseProduct(IapItem product, PurchaseType type) async {\n    try {\n      await FlutterInappPurchase.instance.requestPurchase(\n        RequestPurchase(\n          android: RequestPurchaseAndroidProps(skus: [product.productId!]),\n        ),\n        type,\n      );\n    } catch (error) {\n      print('Purchase request failed: $error');\n    }\n  }\n\n  @override\n  void dispose() {\n    _purchaseUpdatedSubscription.cancel();\n    _purchaseErrorSubscription.cancel();\n    FlutterInappPurchase.instance.finishTransaction();\n    super.dispose();\n  }\n}\n\nclass AndroidProductTile extends StatelessWidget {\n  final IapItem product;\n  final VoidCallback onPurchase;\n\n  const AndroidProductTile({\n    Key? key,\n    required this.product,\n    required this.onPurchase,\n  }) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Card(\n      margin: EdgeInsets.all(8.0),\n      child: ListTile(\n        title: Text(product.title ?? 'Unknown Product'),\n        subtitle: Text(product.description ?? 'No description'),\n        trailing: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            Text(\n              product.localizedPrice ?? 'N/A',\n              style: TextStyle(fontWeight: FontWeight.bold),\n            ),\n            ElevatedButton(\n              onPressed: onPurchase,\n              child: Text('Buy'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"android-specific-features",children:"Android-Specific Features"}),"\n",(0,s.jsx)(e.h4,{id:"subscription-management",children:"Subscription Management"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"// Check subscription status\nFuture<void> checkSubscriptionStatus(String subscriptionId) async {\n  try {\n    final purchases = await FlutterInappPurchase.instance.getAvailablePurchases();\n    final subscription = purchases.firstWhere(\n      (purchase) => purchase.productId == subscriptionId,\n      orElse: () => throw Exception('Subscription not found'),\n    );\n\n    print('Subscription status: ${subscription.purchaseStateAndroid}');\n    print('Purchase token: ${subscription.purchaseToken}');\n  } catch (error) {\n    print('Failed to check subscription: $error');\n  }\n}\n\n// Handle subscription changes (upgrade/downgrade)\nFuture<void> changeSubscription(\n  String oldSubscriptionId,\n  String newSubscriptionId,\n  String purchaseToken,\n) async {\n  try {\n    await FlutterInappPurchase.instance.requestPurchase(\n      RequestPurchase(\n        android: RequestPurchaseAndroidProps(\n          skus: [newSubscriptionId],\n          oldPurchaseToken: purchaseToken,\n          replacementMode: 'IMMEDIATE_WITH_TIME_PRORATION',\n        ),\n      ),\n      PurchaseType.subs,\n    );\n  } catch (error) {\n    print('Subscription change failed: $error');\n  }\n}\n"})}),"\n",(0,s.jsx)(e.h4,{id:"pending-purchases",children:"Pending Purchases"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"// Handle purchases that require additional verification\nFuture<void> handlePendingPurchases() async {\n  final purchases = await FlutterInappPurchase.instance.getAvailablePurchases();\n\n  for (var purchase in purchases) {\n    if (purchase.purchaseStateAndroid == PurchaseState.pending) {\n      // Store purchase for later verification\n      await _storePendingPurchase(purchase);\n\n      // Show user-friendly message\n      _showPendingMessage();\n    }\n  }\n}\n\nFuture<void> _storePendingPurchase(PurchaseResult purchase) async {\n  // Store in local database or send to server for tracking\n  print('Storing pending purchase: ${purchase.productId}');\n}\n"})}),"\n",(0,s.jsx)(e.h4,{id:"product-details-and-offers",children:"Product Details and Offers"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"// Get detailed product information\nFuture<void> getProductDetails() async {\n  try {\n    final products = await FlutterInappPurchase.instance.getProducts(androidProductIds);\n\n    for (var product in products) {\n      print('Product ID: ${product.productId}');\n      print('Title: ${product.title}');\n      print('Description: ${product.description}');\n      print('Price: ${product.localizedPrice}');\n      print('Currency: ${product.currency}');\n\n      // Android-specific details\n      if (product.productDetailsAndroid != null) {\n        final details = product.productDetailsAndroid!;\n        print('Product type: ${details.productType}');\n        print('One-time purchase offer: ${details.oneTimePurchaseOfferDetails}');\n      }\n    }\n  } catch (error) {\n    print('Failed to get product details: $error');\n  }\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"void handleAndroidError(PurchaseResult? error) {\n  if (error?.code != null) {\n    switch (error!.code) {\n      case 'E_USER_CANCELLED':\n        // User cancelled - no action needed\n        break;\n      case 'E_SERVICE_DISCONNECTED':\n        showErrorDialog('Google Play services are unavailable');\n        break;\n      case 'E_BILLING_UNAVAILABLE':\n        showErrorDialog('Billing is not available on this device');\n        break;\n      case 'E_ITEM_UNAVAILABLE':\n        showErrorDialog('This product is not available for purchase');\n        break;\n      case 'E_DEVELOPER_ERROR':\n        showErrorDialog('Configuration error. Please contact support.');\n        break;\n      case 'E_ITEM_ALREADY_OWNED':\n        showErrorDialog('You already own this item');\n        break;\n      case 'E_ITEM_NOT_OWNED':\n        showErrorDialog('You do not own this item');\n        break;\n      default:\n        showErrorDialog('Purchase failed: ${error.message}');\n    }\n  }\n}\n\nvoid showErrorDialog(String message) {\n  showDialog(\n    context: context,\n    builder: (context) => AlertDialog(\n      title: Text('Error'),\n      content: Text(message),\n      actions: [\n        TextButton(\n          onPressed: () => Navigator.pop(context),\n          child: Text('OK'),\n        ),\n      ],\n    ),\n  );\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"purchase-validation",children:"Purchase Validation"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"// Validate purchase on your server\nFuture<bool> validatePurchaseOnServer(PurchaseResult purchase) async {\n  try {\n    final response = await http.post(\n      Uri.parse('https://your-server.com/validate-purchase'),\n      headers: {'Content-Type': 'application/json'},\n      body: jsonEncode({\n        'purchaseToken': purchase.purchaseToken,\n        'productId': purchase.productId,\n        'packageName': 'your.app.package.name',\n      }),\n    );\n\n    if (response.statusCode == 200) {\n      final result = jsonDecode(response.body);\n      return result['valid'] == true;\n    }\n\n    return false;\n  } catch (error) {\n    print('Validation failed: $error');\n    return false;\n  }\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"common-issues",children:"Common Issues"}),"\n",(0,s.jsx)(e.h3,{id:"product-ids-not-found",children:"Product IDs Not Found"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Problem"}),": Products return empty or show as unavailable\n",(0,s.jsx)(e.strong,{children:"Solutions"}),":"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Verify product IDs match exactly between code and Play Console"}),"\n",(0,s.jsxs)(e.li,{children:["Ensure products are ",(0,s.jsx)(e.strong,{children:"Active"})," in Play Console"]}),"\n",(0,s.jsx)(e.li,{children:"Check that app is uploaded to at least Internal testing track"}),"\n",(0,s.jsx)(e.li,{children:"Verify the app package name matches"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"testing-issues",children:"Testing Issues"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Problem"}),': "Item not found" or "Authentication required" errors\n',(0,s.jsx)(e.strong,{children:"Solutions"}),":"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Use Gmail accounts added as test users"}),"\n",(0,s.jsx)(e.li,{children:"Install app from testing track, not directly via ADB"}),"\n",(0,s.jsx)(e.li,{children:"Ensure test user has a valid payment method"}),"\n",(0,s.jsx)(e.li,{children:"Clear Google Play Store cache and data"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"purchase-flow-issues",children:"Purchase Flow Issues"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Problem"}),": Purchase dialog doesn't appear or fails immediately\n",(0,s.jsx)(e.strong,{children:"Solutions"}),":"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Verify Google Play services are updated"}),"\n",(0,s.jsx)(e.li,{children:"Check device has valid Google account"}),"\n",(0,s.jsx)(e.li,{children:"Ensure app is properly signed"}),"\n",(0,s.jsx)(e.li,{children:"Test on different devices"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"subscription-issues",children:"Subscription Issues"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Problem"}),": Subscription offers not showing or failing\n",(0,s.jsx)(e.strong,{children:"Solutions"}),":"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Verify base plans are properly configured"}),"\n",(0,s.jsx)(e.li,{children:"Check offer eligibility rules"}),"\n",(0,s.jsx)(e.li,{children:"Ensure proper offer token handling"}),"\n",(0,s.jsx)(e.li,{children:"Test with different user accounts"}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"./quickstart",children:"Learn about getting started guide"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"./ios-setup",children:"Explore iOS setup"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"../api/error-codes",children:"Understand error codes"})}),"\n"]})]})}function l(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(u,{...n})}):u(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>a,x:()=>o});var t=r(6540);const s={},i=t.createContext(s);function a(n){const e=t.useContext(i);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:a(n.components),t.createElement(i.Provider,{value:e},n.children)}}}]);