"use strict";(self.webpackChunkflutter_inapp_purchase_docs=self.webpackChunkflutter_inapp_purchase_docs||[]).push([[6318],{5935:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>l,frontMatter:()=>t,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"api/methods/request-subscription","title":"requestSubscription","description":"Initiates a subscription purchase flow.","source":"@site/versioned_docs/version-6.3/api/methods/request-subscription.md","sourceDirName":"api/methods","slug":"/api/methods/request-subscription","permalink":"/docs/6.3/api/methods/request-subscription","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/versioned_docs/version-6.3/api/methods/request-subscription.md","tags":[],"version":"6.3","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"title":"requestSubscription"}}');var s=r(4848),o=r(8453);const t={sidebar_position:5,title:"requestSubscription"},d="requestSubscription()",a={},c=[{value:"Overview",id:"overview",level:2},{value:"Signature",id:"signature",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Basic Subscription",id:"basic-subscription",level:3},{value:"Subscription with User Account",id:"subscription-with-user-account",level:3},{value:"Subscription Upgrade (Android)",id:"subscription-upgrade-android",level:3},{value:"Complete Implementation",id:"complete-implementation",level:3},{value:"Proration Modes (Android)",id:"proration-modes-android",level:2},{value:"Handling Subscription Results",id:"handling-subscription-results",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Migration Guide",id:"migration-guide",level:2},{value:"Old Way",id:"old-way",level:3},{value:"New Way",id:"new-way",level:3},{value:"Platform Differences",id:"platform-differences",level:2},{value:"iOS",id:"ios",level:3},{value:"Android",id:"android",level:3},{value:"Related Methods",id:"related-methods",level:2},{value:"Common Issues",id:"common-issues",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"requestsubscription",children:"requestSubscription()"})}),"\n",(0,s.jsx)(n.p,{children:"Initiates a subscription purchase flow."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"requestSubscription()"})," method starts the platform's native subscription purchase flow. This is a legacy method that's being replaced by ",(0,s.jsx)(n.code,{children:"requestPurchase()"})," with ",(0,s.jsx)(n.code,{children:"PurchaseType.subs"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"signature",children:"Signature"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"Future requestSubscription(\n  String productId, {\n  int? prorationModeAndroid,\n  String? obfuscatedAccountIdAndroid,\n  String? obfuscatedProfileIdAndroid,\n  String? purchaseTokenAndroid,\n  int? offerTokenIndex,\n})\n"})}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"productId"})," - The subscription product identifier"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"prorationModeAndroid"})," - (Android only) How to handle proration for upgrades/downgrades"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"obfuscatedAccountIdAndroid"})," - (Android only) Obfuscated user account identifier"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"obfuscatedProfileIdAndroid"})," - (Android only) Obfuscated profile identifier"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"purchaseTokenAndroid"})," - (Android only) Token of existing subscription for upgrades [DEPRECATED] Use purchaseToken instead"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"offerTokenIndex"})," - (Android only) Index of specific offer to purchase"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,s.jsx)(n.h3,{id:"basic-subscription",children:"Basic Subscription"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"// Simple subscription purchase\nawait FlutterInappPurchase.instance.requestSubscription('com.example.monthly');\n"})}),"\n",(0,s.jsx)(n.h3,{id:"subscription-with-user-account",children:"Subscription with User Account"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"// Subscription with user identifier for restoration\nawait FlutterInappPurchase.instance.requestSubscription(\n  'com.example.monthly',\n  obfuscatedAccountIdAndroid: 'user123_hashed',\n);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"subscription-upgrade-android",children:"Subscription Upgrade (Android)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"// Upgrade from monthly to yearly with proration\nawait FlutterInappPurchase.instance.requestSubscription(\n  'com.example.yearly',\n  prorationModeAndroid: AndroidProrationMode.IMMEDIATE_AND_CHARGE_PRORATED_PRICE,\n  purchaseTokenAndroid: currentMonthlyToken, // [DEPRECATED] Use purchaseToken instead\n  obfuscatedAccountIdAndroid: 'user123_hashed',\n);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"complete-implementation",children:"Complete Implementation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"class SubscriptionManager {\n  final _iap = FlutterInappPurchase.instance;\n  String? _currentSubscriptionToken;\n  \n  Future<void> subscribe(String subscriptionId) async {\n    try {\n      await _iap.requestSubscription(\n        subscriptionId,\n        obfuscatedAccountIdAndroid: await _getUserId(),\n      );\n      \n      // Result will be delivered via purchaseUpdated stream\n      \n    } catch (e) {\n      print('Subscription failed: $e');\n      _handleSubscriptionError(e);\n    }\n  }\n  \n  Future<void> upgradeSubscription({\n    required String newSubscriptionId,\n    required int prorationMode,\n  }) async {\n    if (_currentSubscriptionToken == null) {\n      print('No active subscription to upgrade');\n      return;\n    }\n    \n    try {\n      await _iap.requestSubscription(\n        newSubscriptionId,\n        prorationModeAndroid: prorationMode,\n        purchaseTokenAndroid: _currentSubscriptionToken, // [DEPRECATED] Use purchaseToken instead\n        obfuscatedAccountIdAndroid: await _getUserId(),\n      );\n    } catch (e) {\n      print('Upgrade failed: $e');\n    }\n  }\n  \n  Future<String?> _getUserId() async {\n    // Generate obfuscated user ID\n    // Should be consistent across sessions\n    return 'user_${DateTime.now().millisecondsSinceEpoch}';\n  }\n  \n  void _handleSubscriptionError(dynamic error) {\n    // Handle subscription-specific errors\n    if (error.toString().contains('already owned')) {\n      print('User already has an active subscription');\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"proration-modes-android",children:"Proration Modes (Android)"}),"\n",(0,s.jsx)(n.p,{children:"When upgrading or downgrading subscriptions on Android, you can specify how to handle the proration:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"// Immediate upgrade with prorated charge\nawait _iap.requestSubscription(\n  'com.example.yearly',\n  prorationModeAndroid: AndroidProrationMode.IMMEDIATE_AND_CHARGE_PRORATED_PRICE,\n  purchaseTokenAndroid: monthlyToken, // [DEPRECATED] Use purchaseToken instead\n);\n\n// Immediate upgrade with full price\nawait _iap.requestSubscription(\n  'com.example.yearly',\n  prorationModeAndroid: AndroidProrationMode.IMMEDIATE_AND_CHARGE_FULL_PRICE,\n  purchaseTokenAndroid: monthlyToken, // [DEPRECATED] Use purchaseToken instead\n);\n\n// Deferred upgrade (at next renewal)\nawait _iap.requestSubscription(\n  'com.example.yearly',\n  prorationModeAndroid: AndroidProrationMode.DEFERRED,\n  purchaseTokenAndroid: monthlyToken, // [DEPRECATED] Use purchaseToken instead\n);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"handling-subscription-results",children:"Handling Subscription Results"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"void setupSubscriptionListeners() {\n  // Listen for successful subscriptions\n  FlutterInappPurchase.purchaseUpdated.listen((PurchasedItem? item) {\n    if (item != null && _isSubscription(item.productId)) {\n      print('Subscription successful: ${item.productId}');\n      \n      // Store the token for future upgrades\n      if (Platform.isAndroid) {\n        _currentSubscriptionToken = item.purchaseToken;\n      }\n      \n      // Verify and activate subscription\n      _activateSubscription(item);\n      \n      // Finish the transaction\n      _iap.finishTransactionIOS(item);\n    }\n  });\n  \n  // Listen for errors\n  FlutterInappPurchase.purchaseError.listen((PurchaseResult? error) {\n    if (error != null) {\n      print('Subscription error: ${error.message}');\n    }\n  });\n}\n\nbool _isSubscription(String? productId) {\n  const subscriptionIds = [\n    'com.example.monthly',\n    'com.example.yearly',\n    'com.example.premium',\n  ];\n  return subscriptionIds.contains(productId);\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Store Purchase Tokens"}),": On Android, store purchase tokens for upgrade/downgrade scenarios"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Handle Already Owned"}),": Check for existing subscriptions before purchasing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"User Account Linking"}),": Always include user identifiers for cross-device restoration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Proration Understanding"}),": Educate users about proration when upgrading"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"migration-guide",children:"Migration Guide"}),"\n",(0,s.jsxs)(n.p,{children:["This method is being deprecated in favor of the more flexible ",(0,s.jsx)(n.code,{children:"requestPurchase()"})," method:"]}),"\n",(0,s.jsx)(n.h3,{id:"old-way",children:"Old Way"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"await _iap.requestSubscription(\n  'com.example.monthly',\n  obfuscatedAccountIdAndroid: 'user123',\n);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"new-way",children:"New Way"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"await _iap.requestPurchase(\n  request: RequestPurchase(\n    ios: RequestPurchaseIOS(\n      sku: 'com.example.monthly',\n      appAccountToken: 'user123',\n    ),\n    android: RequestPurchaseAndroid(\n      skus: ['com.example.monthly'],\n      obfuscatedAccountIdAndroid: 'user123',\n    ),\n  ),\n  type: PurchaseType.subs,\n);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"platform-differences",children:"Platform Differences"}),"\n",(0,s.jsx)(n.h3,{id:"ios",children:"iOS"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"No proration modes (handled automatically by App Store)"}),"\n",(0,s.jsx)(n.li,{children:"User account token passed differently"}),"\n",(0,s.jsx)(n.li,{children:"Subscription groups managed by App Store"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"android",children:"Android"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Supports various proration modes"}),"\n",(0,s.jsx)(n.li,{children:"Requires purchase token for upgrades"}),"\n",(0,s.jsx)(n.li,{children:"Multiple offers per subscription possible"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"related-methods",children:"Related Methods"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"getSubscriptions()"})," - Fetch subscription products (deprecated - use ",(0,s.jsx)(n.code,{children:"getProducts()"})," instead)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/6.3/api/methods/request-purchase",children:(0,s.jsx)(n.code,{children:"requestPurchase()"})})," - Modern purchase method"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/6.3/api/methods/get-available-purchases",children:(0,s.jsx)(n.code,{children:"getAvailablePurchases()"})})," - Check active subscriptions"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"common-issues",children:"Common Issues"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Missing Purchase Token"}),": Ensure you store the purchase token from the initial subscription"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Invalid Proration Mode"}),": Use valid AndroidProrationMode constants"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Subscription Groups"}),": On iOS, users can only have one active subscription per group"]}),"\n"]})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>d});var i=r(6540);const s={},o=i.createContext(s);function t(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);