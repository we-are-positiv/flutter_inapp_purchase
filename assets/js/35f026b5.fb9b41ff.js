"use strict";(self.webpackChunkflutter_inapp_purchase_docs=self.webpackChunkflutter_inapp_purchase_docs||[]).push([[8042],{3624:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"examples/basic-store","title":"Basic Store Implementation","description":"A simple store implementation demonstrating core flutterinapppurchase concepts and basic purchase flow. Perfect for getting started with in-app purchases.","source":"@site/docs/examples/basic-store.md","sourceDirName":"examples","slug":"/examples/basic-store","permalink":"/docs/examples/basic-store","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/docs/examples/basic-store.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Basic Store Implementation","sidebar_label":"Basic Store","sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"Error Codes","permalink":"/docs/api/error-codes"},"next":{"title":"Subscription Store","permalink":"/docs/examples/subscription-store"}}');var t=r(4848),o=r(8453);const i={title:"Basic Store Implementation",sidebar_label:"Basic Store",sidebar_position:1},a="Basic Store Implementation",c={},d=[{value:"Key Features Demonstrated",id:"key-features-demonstrated",level:2},{value:"Platform Differences",id:"platform-differences",level:2},{value:"Complete Implementation",id:"complete-implementation",level:2},{value:"Key Features Explained",id:"key-features-explained",level:2},{value:"1. Connection Management",id:"1-connection-management",level:3},{value:"2. Product Loading",id:"2-product-loading",level:3},{value:"3. Purchase Flow",id:"3-purchase-flow",level:3},{value:"4. Transaction Finishing",id:"4-transaction-finishing",level:3},{value:"5. Error Handling",id:"5-error-handling",level:3},{value:"Usage Instructions",id:"usage-instructions",level:2},{value:"Customization Options",id:"customization-options",level:2},{value:"Product Types",id:"product-types",level:3},{value:"Custom Error Handling",id:"custom-error-handling",level:3},{value:"Loading States",id:"loading-states",level:3},{value:"Next Steps",id:"next-steps",level:2}];function l(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"basic-store-implementation",children:"Basic Store Implementation"})}),"\n",(0,t.jsx)(e.p,{children:"A simple store implementation demonstrating core flutter_inapp_purchase concepts and basic purchase flow. Perfect for getting started with in-app purchases."}),"\n",(0,t.jsx)(e.h2,{id:"key-features-demonstrated",children:"Key Features Demonstrated"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["\u2705 ",(0,t.jsx)(e.strong,{children:"Connection Management"})," - Initialize and manage store connection"]}),"\n",(0,t.jsxs)(e.li,{children:["\u2705 ",(0,t.jsx)(e.strong,{children:"Product Loading"})," - Fetch products from both App Store and Google Play"]}),"\n",(0,t.jsxs)(e.li,{children:["\u2705 ",(0,t.jsx)(e.strong,{children:"Purchase Flow"})," - Complete purchase process with user feedback"]}),"\n",(0,t.jsxs)(e.li,{children:["\u2705 ",(0,t.jsx)(e.strong,{children:"Transaction Finishing"})," - Properly complete transactions"]}),"\n",(0,t.jsxs)(e.li,{children:["\u2705 ",(0,t.jsx)(e.strong,{children:"Error Handling"})," - Handle common purchase errors gracefully"]}),"\n",(0,t.jsxs)(e.li,{children:["\u2705 ",(0,t.jsx)(e.strong,{children:"Platform Differences"})," - Handle iOS and Android specific requirements"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"platform-differences",children:"Platform Differences"}),"\n",(0,t.jsxs)(e.p,{children:["\u26a0\ufe0f ",(0,t.jsx)(e.strong,{children:"Important"}),": This example handles key differences between iOS and Android:"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"iOS"}),": Uses single SKU per request, requires StoreKit configuration"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Android"}),": Uses SKU arrays, requires Google Play Console setup"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Receipt Handling"}),": Different receipt formats and validation approaches"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Transaction States"}),": Platform-specific state management"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"complete-implementation",children:"Complete Implementation"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-dart",children:"import 'dart:async';\nimport 'dart:io';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_inapp_purchase/flutter_inapp_purchase.dart';\n\nvoid main() {\n  runApp(BasicStoreApp());\n}\n\nclass BasicStoreApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Basic Store Example',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n        visualDensity: VisualDensity.adaptivePlatformDensity,\n      ),\n      home: BasicStoreScreen(),\n    );\n  }\n}\n\nclass BasicStoreScreen extends StatefulWidget {\n  @override\n  _BasicStoreScreenState createState() => _BasicStoreScreenState();\n}\n\nclass _BasicStoreScreenState extends State<BasicStoreScreen> {\n  // IAP instance\n  final FlutterInappPurchase _iap = FlutterInappPurchase.instance;\n\n  // State management\n  bool _isConnected = false;\n  bool _isLoading = false;\n  List<IapItem> _products = [];\n  String? _errorMessage;\n  Purchase? _latestPurchase;\n\n  // Stream subscriptions\n  StreamSubscription<Purchase>? _purchaseSubscription;\n  StreamSubscription<PurchaseError>? _errorSubscription;\n  StreamSubscription<ConnectionResult>? _connectionSubscription;\n\n  // Product IDs - Replace with your actual product IDs\n  final List<String> _productIds = [\n    'coins_100',\n    'coins_500',\n    'remove_ads',\n    'premium_upgrade',\n  ];\n\n  @override\n  void initState() {\n    super.initState();\n    _initializeStore();\n  }\n\n  @override\n  void dispose() {\n    _purchaseSubscription?.cancel();\n    _errorSubscription?.cancel();\n    _connectionSubscription?.cancel();\n    _iap.endConnection();\n    super.dispose();\n  }\n\n  /// Initialize the store connection and set up listeners\n  Future<void> _initializeStore() async {\n    setState(() {\n      _isLoading = true;\n      _errorMessage = null;\n    });\n\n    try {\n      // Initialize connection\n      await _iap.initConnection();\n\n      // Set up purchase success listener\n      _purchaseSubscription = _iap.purchaseUpdatedListener.listen(\n        (purchase) {\n          _handlePurchaseSuccess(purchase);\n        },\n        onError: (error) {\n          _showError('Purchase stream error: $error');\n        },\n      );\n\n      // Set up purchase error listener\n      _errorSubscription = _iap.purchaseErrorListener.listen(\n        (error) {\n          _handlePurchaseError(error);\n        },\n      );\n\n      // Set up connection listener\n      _connectionSubscription = FlutterInappPurchase.connectionUpdated.listen(\n        (connectionResult) {\n          setState(() {\n            _isConnected = connectionResult.connected;\n          });\n\n          if (connectionResult.connected) {\n            _loadProducts();\n          }\n        },\n      );\n\n      setState(() {\n        _isConnected = true;\n      });\n\n      // Load products\n      await _loadProducts();\n\n    } catch (e) {\n      _showError('Failed to initialize store: $e');\n    } finally {\n      setState(() {\n        _isLoading = false;\n      });\n    }\n  }\n\n  /// Load products from the store\n  Future<void> _loadProducts() async {\n    if (!_isConnected) return;\n\n    setState(() {\n      _isLoading = true;\n      _errorMessage = null;\n    });\n\n    try {\n      final products = await _iap.requestProducts(\n        skus: _productIds,\n        type: PurchaseType.inapp,\n      );\n\n      setState(() {\n        _products = products;\n      });\n\n      print('\u2705 Loaded ${products.length} products');\n      for (final product in products) {\n        print('Product: ${product.productId} - ${product.localizedPrice}');\n      }\n\n    } catch (e) {\n      _showError('Failed to load products: $e');\n    } finally {\n      setState(() {\n        _isLoading = false;\n      });\n    }\n  }\n\n  /// Handle successful purchase\n  Future<void> _handlePurchaseSuccess(Purchase purchase) async {\n    print('\u2705 Purchase successful: ${purchase.productId}');\n\n    setState(() {\n      _latestPurchase = purchase;\n      _errorMessage = null;\n    });\n\n    // Show success message\n    _showSuccessSnackBar('Purchase successful: ${purchase.productId}');\n\n    try {\n      // 1. Here you would typically verify the purchase with your server\n      final isValid = await _verifyPurchase(purchase);\n\n      if (isValid) {\n        // 2. Deliver the product to the user\n        await _deliverProduct(purchase.productId);\n\n        // 3. Finish the transaction\n        await _finishTransaction(purchase);\n\n        print('\u2705 Purchase completed and delivered');\n      } else {\n        _showError('Purchase verification failed');\n      }\n\n    } catch (e) {\n      _showError('Error processing purchase: $e');\n    }\n  }\n\n  /// Handle purchase errors\n  void _handlePurchaseError(PurchaseError error) {\n    print('\u274c Purchase failed: ${error.message}');\n\n    setState(() {\n      _latestPurchase = null;\n    });\n\n    // Handle specific error codes\n    switch (error.responseCode) {\n      case 1: // User cancelled\n        // Don't show error for user cancellation\n        print('User cancelled purchase');\n        break;\n\n      case 2: // Network error\n        _showError('Network error. Please check your connection and try again.');\n        break;\n\n      case 7: // Already owned\n        _showError('You already own this item. Try restoring your purchases.');\n        break;\n\n      default:\n        _showError(error.message ?? 'Purchase failed. Please try again.');\n    }\n  }\n\n  /// Verify purchase with server (mock implementation)\n  Future<bool> _verifyPurchase(PurchasedItem purchase) async {\n    // In a real app, send the receipt to your server for verification\n    // For this example, we'll just simulate a successful verification\n    await Future.delayed(Duration(milliseconds: 500));\n\n    print('\ud83d\udd0d Verifying purchase: ${purchase.productId}');\n    print('Receipt: ${purchase.transactionReceipt?.substring(0, 50)}...');\n\n    return true; // Assume verification successful\n  }\n\n  /// Deliver the purchased product to the user\n  Future<void> _deliverProduct(String? productId) async {\n    if (productId == null) return;\n\n    print('\ud83c\udf81 Delivering product: $productId');\n\n    // Implement your product delivery logic here\n    switch (productId) {\n      case 'coins_100':\n        // Add 100 coins to user's account\n        print('Added 100 coins to user account');\n        break;\n\n      case 'coins_500':\n        // Add 500 coins to user's account\n        print('Added 500 coins to user account');\n        break;\n\n      case 'remove_ads':\n        // Remove ads for user\n        print('Removed ads for user');\n        break;\n\n      case 'premium_upgrade':\n        // Upgrade user to premium\n        print('Upgraded user to premium');\n        break;\n\n      default:\n        print('Unknown product: $productId');\n    }\n  }\n\n  /// Finish the transaction\n  Future<void> _finishTransaction(PurchasedItem purchase) async {\n    try {\n      if (Platform.isAndroid) {\n        // For Android, consume the purchase if it's a consumable product\n        if (purchase.purchaseToken != null) {\n          await _iap.consumePurchaseAndroid(\n            purchaseToken: purchase.purchaseToken!,\n          );\n          print('\u2705 Android purchase consumed');\n        }\n      } else if (Platform.isIOS) {\n        // For iOS, finish the transaction\n        await _iap.finishTransactionIOS(\n          purchase,\n          isConsumable: _isConsumableProduct(purchase.productId),\n        );\n        print('\u2705 iOS transaction finished');\n      }\n\n      setState(() {\n        _latestPurchase = null;\n      });\n\n    } catch (e) {\n      _showError('Failed to finish transaction: $e');\n    }\n  }\n\n  /// Check if a product is consumable\n  bool _isConsumableProduct(String? productId) {\n    // Define which products are consumable\n    const consumableProducts = ['coins_100', 'coins_500'];\n    return consumableProducts.contains(productId);\n  }\n\n  /// Make a purchase\n  Future<void> _makePurchase(String productId) async {\n    if (!_isConnected) {\n      _showError('Not connected to store');\n      return;\n    }\n\n    setState(() {\n      _isLoading = true;\n      _errorMessage = null;\n    });\n\n    try {\n      final request = RequestPurchase(\n        ios: RequestPurchaseIOS(\n          sku: productId,\n          quantity: 1,\n        ),\n        android: RequestPurchaseAndroid(\n          skus: [productId],\n        ),\n      );\n\n      await _iap.requestPurchase(\n        request: request,\n        type: PurchaseType.inapp,\n      );\n\n      print('\ud83d\uded2 Purchase requested for: $productId');\n\n    } catch (e) {\n      _showError('Failed to request purchase: $e');\n    } finally {\n      setState(() {\n        _isLoading = false;\n      });\n    }\n  }\n\n  /// Restore purchases\n  Future<void> _restorePurchases() async {\n    setState(() {\n      _isLoading = true;\n      _errorMessage = null;\n    });\n\n    try {\n      await _iap.restorePurchases();\n\n      // Get available purchases\n      final availablePurchases = await _iap.getAvailableItemsIOS();\n\n      if (availablePurchases != null && availablePurchases.isNotEmpty) {\n        _showSuccessSnackBar('Restored ${availablePurchases.length} purchases');\n\n        // Process restored purchases\n        for (final purchase in availablePurchases) {\n          await _deliverProduct(purchase.productId);\n        }\n      } else {\n        _showSuccessSnackBar('No purchases to restore');\n      }\n\n    } catch (e) {\n      _showError('Failed to restore purchases: $e');\n    } finally {\n      setState(() {\n        _isLoading = false;\n      });\n    }\n  }\n\n  /// Show error message\n  void _showError(String message) {\n    setState(() {\n      _errorMessage = message;\n    });\n\n    ScaffoldMessenger.of(context).showSnackBar(\n      SnackBar(\n        content: Text(message),\n        backgroundColor: Colors.red,\n        duration: Duration(seconds: 4),\n      ),\n    );\n  }\n\n  /// Show success message\n  void _showSuccessSnackBar(String message) {\n    ScaffoldMessenger.of(context).showSnackBar(\n      SnackBar(\n        content: Text(message),\n        backgroundColor: Colors.green,\n        duration: Duration(seconds: 3),\n      ),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Basic Store'),\n        backgroundColor: _isConnected ? Colors.green : Colors.red,\n        actions: [\n          IconButton(\n            icon: Icon(Icons.refresh),\n            onPressed: _loadProducts,\n          ),\n          IconButton(\n            icon: Icon(Icons.restore),\n            onPressed: _restorePurchases,\n          ),\n        ],\n      ),\n      body: _buildBody(),\n    );\n  }\n\n  Widget _buildBody() {\n    return Column(\n      children: [\n        // Connection status\n        _buildConnectionStatus(),\n\n        // Error message\n        if (_errorMessage != null) _buildErrorBanner(),\n\n        // Latest purchase info\n        if (_latestPurchase != null) _buildPurchaseInfo(),\n\n        // Products list\n        Expanded(child: _buildProductsList()),\n      ],\n    );\n  }\n\n  Widget _buildConnectionStatus() {\n    return Container(\n      width: double.infinity,\n      padding: EdgeInsets.symmetric(horizontal: 16, vertical: 12),\n      color: _isConnected ? Colors.green[100] : Colors.red[100],\n      child: Row(\n        children: [\n          Icon(\n            _isConnected ? Icons.cloud_done : Icons.cloud_off,\n            color: _isConnected ? Colors.green[800] : Colors.red[800],\n          ),\n          SizedBox(width: 8),\n          Text(\n            _isConnected ? 'Connected to Store' : 'Not Connected',\n            style: TextStyle(\n              color: _isConnected ? Colors.green[800] : Colors.red[800],\n              fontWeight: FontWeight.w600,\n            ),\n          ),\n          Spacer(),\n          if (_isLoading) SizedBox(\n            width: 16,\n            height: 16,\n            child: CircularProgressIndicator(strokeWidth: 2),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildErrorBanner() {\n    return Container(\n      width: double.infinity,\n      padding: EdgeInsets.all(16),\n      color: Colors.red[50],\n      child: Row(\n        children: [\n          Icon(Icons.error, color: Colors.red[800]),\n          SizedBox(width: 8),\n          Expanded(\n            child: Text(\n              _errorMessage!,\n              style: TextStyle(color: Colors.red[800]),\n            ),\n          ),\n          IconButton(\n            onPressed: () => setState(() => _errorMessage = null),\n            icon: Icon(Icons.close, color: Colors.red[800]),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildPurchaseInfo() {\n    return Container(\n      width: double.infinity,\n      padding: EdgeInsets.all(16),\n      color: Colors.blue[50],\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          Row(\n            children: [\n              Icon(Icons.shopping_cart, color: Colors.blue[800]),\n              SizedBox(width: 8),\n              Text(\n                'Purchase Successful!',\n                style: TextStyle(\n                  color: Colors.blue[800],\n                  fontWeight: FontWeight.bold,\n                ),\n              ),\n            ],\n          ),\n          SizedBox(height: 4),\n          Text(\n            'Product: ${_latestPurchase!.productId}',\n            style: TextStyle(color: Colors.blue[700]),\n          ),\n          Text(\n            'Transaction: ${_latestPurchase!.transactionId ?? 'N/A'}',\n            style: TextStyle(color: Colors.blue[700]),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildProductsList() {\n    if (_isLoading && _products.isEmpty) {\n      return Center(child: CircularProgressIndicator());\n    }\n\n    if (_products.isEmpty) {\n      return Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            Icon(Icons.store, size: 64, color: Colors.grey[400]),\n            SizedBox(height: 16),\n            Text(\n              'No products available',\n              style: TextStyle(fontSize: 18, color: Colors.grey[600]),\n            ),\n            SizedBox(height: 8),\n            ElevatedButton(\n              onPressed: _loadProducts,\n              child: Text('Reload Products'),\n            ),\n          ],\n        ),\n      );\n    }\n\n    return ListView.builder(\n      padding: EdgeInsets.all(16),\n      itemCount: _products.length,\n      itemBuilder: (context, index) {\n        final product = _products[index];\n        return _buildProductCard(product);\n      },\n    );\n  }\n\n  Widget _buildProductCard(IapItem product) {\n    return Card(\n      margin: EdgeInsets.only(bottom: 12),\n      elevation: 4,\n      child: Padding(\n        padding: EdgeInsets.all(16),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Row(\n              children: [\n                Container(\n                  padding: EdgeInsets.all(8),\n                  decoration: BoxDecoration(\n                    color: Colors.blue[100],\n                    borderRadius: BorderRadius.circular(8),\n                  ),\n                  child: Icon(\n                    _getProductIcon(product.productId),\n                    color: Colors.blue[800],\n                  ),\n                ),\n                SizedBox(width: 12),\n                Expanded(\n                  child: Column(\n                    crossAxisAlignment: CrossAxisAlignment.start,\n                    children: [\n                      Text(\n                        product.title ?? product.productId ?? 'Unknown',\n                        style: TextStyle(\n                          fontSize: 16,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                      if (product.description != null)\n                        Text(\n                          product.description!,\n                          style: TextStyle(\n                            color: Colors.grey[600],\n                            fontSize: 14,\n                          ),\n                        ),\n                    ],\n                  ),\n                ),\n              ],\n            ),\n            SizedBox(height: 12),\n            Row(\n              mainAxisAlignment: MainAxisAlignment.spaceBetween,\n              children: [\n                Text(\n                  product.localizedPrice ?? product.price ?? 'Unknown',\n                  style: TextStyle(\n                    fontSize: 18,\n                    fontWeight: FontWeight.bold,\n                    color: Colors.green[700],\n                  ),\n                ),\n                ElevatedButton(\n                  onPressed: _isLoading || product.productId == null\n                    ? null\n                    : () => _makePurchase(product.productId!),\n                  child: Text('Buy Now'),\n                ),\n              ],\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  IconData _getProductIcon(String? productId) {\n    switch (productId) {\n      case 'coins_100':\n      case 'coins_500':\n        return Icons.monetization_on;\n      case 'remove_ads':\n        return Icons.block;\n      case 'premium_upgrade':\n        return Icons.star;\n      default:\n        return Icons.shopping_bag;\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"key-features-explained",children:"Key Features Explained"}),"\n",(0,t.jsx)(e.h3,{id:"1-connection-management",children:"1. Connection Management"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-dart",children:"await _iap.initConnection();\n"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Initializes connection to App Store or Google Play"}),"\n",(0,t.jsx)(e.li,{children:"Must be called before any other IAP operations"}),"\n",(0,t.jsxs)(e.li,{children:["Connection state is monitored via ",(0,t.jsx)(e.code,{children:"connectionUpdated"})," stream"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"2-product-loading",children:"2. Product Loading"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-dart",children:"final products = await _iap.requestProducts(\n  skus: _productIds,\n  type: PurchaseType.inapp,\n);\n"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Fetches product information from the store"}),"\n",(0,t.jsx)(e.li,{children:"Returns localized pricing and descriptions"}),"\n",(0,t.jsx)(e.li,{children:"Product IDs must be configured in store console"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"3-purchase-flow",children:"3. Purchase Flow"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-dart",children:"final request = RequestPurchase(\n  ios: RequestPurchaseIOS(sku: productId, quantity: 1),\n  android: RequestPurchaseAndroid(skus: [productId]),\n);\nawait _iap.requestPurchase(request: request, type: PurchaseType.inapp);\n"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Platform-specific request objects handle iOS/Android differences"}),"\n",(0,t.jsxs)(e.li,{children:["Purchase result comes through ",(0,t.jsx)(e.code,{children:"purchaseUpdated"})," stream"]}),"\n",(0,t.jsxs)(e.li,{children:["Errors are delivered via ",(0,t.jsx)(e.code,{children:"purchaseError"})," stream"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"4-transaction-finishing",children:"4. Transaction Finishing"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-dart",children:"// iOS\nawait _iap.finishTransactionIOS(purchase, isConsumable: true);\n\n// Android\nawait _iap.consumePurchaseAndroid(purchaseToken: token);\n"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Essential for completing the purchase flow"}),"\n",(0,t.jsxs)(e.li,{children:["iOS: ",(0,t.jsx)(e.code,{children:"finishTransactionIOS"})," for all purchases"]}),"\n",(0,t.jsxs)(e.li,{children:["Android: ",(0,t.jsx)(e.code,{children:"consumePurchaseAndroid"})," for consumables"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"5-error-handling",children:"5. Error Handling"}),"\n",(0,t.jsx)(e.p,{children:"The example demonstrates handling common error scenarios:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"User cancellation (don't show error)"}),"\n",(0,t.jsx)(e.li,{children:"Network errors (suggest retry)"}),"\n",(0,t.jsx)(e.li,{children:"Already owned items (suggest restore)"}),"\n",(0,t.jsx)(e.li,{children:"Generic errors (show user-friendly message)"}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"usage-instructions",children:"Usage Instructions"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Replace Product IDs"}),": Update ",(0,t.jsx)(e.code,{children:"_productIds"})," with your actual product IDs"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Configure Stores"}),":","\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"iOS: Add products to App Store Connect"}),"\n",(0,t.jsx)(e.li,{children:"Android: Add products to Google Play Console"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Implement Server Verification"}),": Replace ",(0,t.jsx)(e.code,{children:"_verifyPurchase"})," with real server validation"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Customize Product Delivery"}),": Update ",(0,t.jsx)(e.code,{children:"_deliverProduct"})," with your business logic"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Style the UI"}),": Customize the UI to match your app's design"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"customization-options",children:"Customization Options"}),"\n",(0,t.jsx)(e.h3,{id:"product-types",children:"Product Types"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-dart",children:"// For different product types\nenum ProductType { consumable, nonConsumable, subscription }\n\nbool _isConsumableProduct(String productId) {\n  // Your logic to determine consumable products\n  return ['coins_100', 'coins_500'].contains(productId);\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"custom-error-handling",children:"Custom Error Handling"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-dart",children:"void _handlePurchaseError(PurchaseError error) {\n  switch (error.code) {\n    case 1: /* User cancelled */\n    case 2: /* Network error */\n    case 7: /* Already owned */\n    // Add your custom error handling\n  }\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"loading-states",children:"Loading States"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-dart",children:"// Add loading indicators for better UX\nbool _isLoading = false;\nString? _loadingMessage;\n\nvoid _setLoading(bool loading, [String? message]) {\n  setState(() {\n    _isLoading = loading;\n    _loadingMessage = message;\n  });\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Learn Subscriptions"}),": Check out the ",(0,t.jsx)(e.a,{href:"/docs/examples/subscription-store",children:"Subscription Store Example"})]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Advanced Features"}),": See the ",(0,t.jsx)(e.a,{href:"/docs/examples/complete-implementation",children:"Complete Implementation"})]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Error Handling"}),": Read the ",(0,t.jsx)(e.a,{href:"/docs/api/error-codes",children:"Error Codes Reference"})]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Platform Setup"}),": Review ",(0,t.jsx)(e.a,{href:"/docs/getting-started/ios-setup",children:"iOS Setup"})," and ",(0,t.jsx)(e.a,{href:"/docs/getting-started/android-setup",children:"Android Setup"})]}),"\n"]})]})}function u(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(l,{...n})}):l(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>i,x:()=>a});var s=r(6540);const t={},o=s.createContext(t);function i(n){const e=s.useContext(o);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:i(n.components),s.createElement(o.Provider,{value:e},n.children)}}}]);