"use strict";(self.webpackChunkflutter_inapp_purchase_docs=self.webpackChunkflutter_inapp_purchase_docs||[]).push([[9664],{1106:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"guides/troubleshooting","title":"Troubleshooting","description":"Common issues and solutions when working with flutterinapppurchase v6.0.0.","source":"@site/versioned_docs/version-6.3/guides/troubleshooting.md","sourceDirName":"guides","slug":"/guides/troubleshooting","permalink":"/docs/6.3/guides/troubleshooting","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/versioned_docs/version-6.3/guides/troubleshooting.md","tags":[],"version":"6.3","sidebarPosition":9,"frontMatter":{"sidebar_position":9,"title":"Troubleshooting"},"sidebar":"docsSidebar","previous":{"title":"Offer Code Redemption","permalink":"/docs/6.3/guides/offer-code-redemption"},"next":{"title":"FAQ","permalink":"/docs/6.3/guides/faq"}}');var t=s(4848),r=s(8453);const o={sidebar_position:9,title:"Troubleshooting"},a="Troubleshooting",c={},d=[{value:"Transaction ID Issues",id:"transaction-id-issues",level:2},{value:"Simple Sequential IDs (1, 2, 3) in Testing",id:"simple-sequential-ids-1-2-3-in-testing",level:3},{value:"Transaction ID Formats by Environment",id:"transaction-id-formats-by-environment",level:3},{value:"Duplicate finishTransaction Calls",id:"duplicate-finishtransaction-calls",level:3},{value:"Purchase Token Issues",id:"purchase-token-issues",level:2},{value:"iOS purchaseToken is null",id:"ios-purchasetoken-is-null",level:3},{value:"Server Validation with Unified Token",id:"server-validation-with-unified-token",level:3},{value:"Prerequisites Checklist",id:"prerequisites-checklist",level:2},{value:"Flutter Setup",id:"flutter-setup",level:3},{value:"Project Configuration",id:"project-configuration",level:3},{value:"App Store Setup (iOS)",id:"app-store-setup-ios",level:2},{value:"Required Configurations",id:"required-configurations",level:3},{value:"Google Play Setup (Android)",id:"google-play-setup-android",level:2},{value:"Required Configurations",id:"required-configurations-1",level:3},{value:"Common Issues",id:"common-issues",level:2},{value:"requestProducts() returns an empty array",id:"requestproducts-returns-an-empty-array",level:3},{value:"useIAP hook not working",id:"useiap-hook-not-working",level:3},{value:"Purchase flow issues",id:"purchase-flow-issues",level:3},{value:"Connection issues",id:"connection-issues",level:3},{value:"iOS Purchase State Detection Issues",id:"ios-purchase-state-detection-issues",level:3},{value:"Platform-specific issues",id:"platform-specific-issues",level:3},{value:"Debugging Tips",id:"debugging-tips",level:2},{value:"1. Enable verbose logging",id:"1-enable-verbose-logging",level:3},{value:"2. Log purchase events",id:"2-log-purchase-events",level:3},{value:"3. Monitor connection state",id:"3-monitor-connection-state",level:3},{value:"Testing Strategies",id:"testing-strategies",level:2},{value:"1. Staged testing approach",id:"1-staged-testing-approach",level:3},{value:"2. Test different scenarios",id:"2-test-different-scenarios",level:3},{value:"3. Device testing matrix",id:"3-device-testing-matrix",level:3},{value:"Error Code Reference",id:"error-code-reference",level:2},{value:"Getting Help",id:"getting-help",level:2},{value:"Bug report template",id:"bug-report-template",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"troubleshooting",children:"Troubleshooting"})}),"\n",(0,t.jsx)(n.p,{children:"Common issues and solutions when working with flutter_inapp_purchase v6.0.0."}),"\n",(0,t.jsx)(n.h2,{id:"transaction-id-issues",children:"Transaction ID Issues"}),"\n",(0,t.jsx)(n.h3,{id:"simple-sequential-ids-1-2-3-in-testing",children:"Simple Sequential IDs (1, 2, 3) in Testing"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Problem"}),": Transaction IDs appear as simple numbers like 1, 2, 3 instead of proper secure IDs."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Cause"}),": You're using StoreKit Configuration file for local testing."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),": Switch to Sandbox testing for realistic transaction IDs:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Remove StoreKit Configuration"})," from Xcode scheme:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'\x3c!-- Remove this from Runner.xcscheme --\x3e\n<StoreKitConfigurationFileReference\n   identifier = "../Runner/StoreKit.storekit">\n</StoreKitConfigurationFileReference>\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Use Sandbox Environment"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Create sandbox test account in App Store Connect"}),"\n",(0,t.jsx)(n.li,{children:"Sign in with test account on device"}),"\n",(0,t.jsxs)(n.li,{children:["Transaction IDs will be realistic: ",(0,t.jsx)(n.code,{children:"2000000985615347"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"transaction-id-formats-by-environment",children:"Transaction ID Formats by Environment"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Environment"}),(0,t.jsx)(n.th,{children:"Transaction ID Format"}),(0,t.jsx)(n.th,{children:"Example"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"StoreKit Configuration"}),(0,t.jsx)(n.td,{children:"Sequential numbers"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"1"}),", ",(0,t.jsx)(n.code,{children:"2"}),", ",(0,t.jsx)(n.code,{children:"3"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Sandbox"}),(0,t.jsx)(n.td,{children:"Large secure numbers"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"2000000985615347"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Production"}),(0,t.jsx)(n.td,{children:"Large secure numbers"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"2000000891234567"})})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"duplicate-finishtransaction-calls",children:"Duplicate finishTransaction Calls"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Problem"}),': "finished transaction successfully" appears twice.']}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Cause"}),": Both purchase method and transaction listener send duplicate events."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),": This is fixed in v6.0.0 with duplicate event prevention."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// v6.0.0 automatically prevents duplicate events\nfinal purchase = await FlutterInappPurchase.instance.requestPurchase(\n  RequestPurchase(ios: RequestPurchaseIOS(sku: 'product_id'))\n);\n// Only one completion event will fire\n"})}),"\n",(0,t.jsx)(n.h2,{id:"purchase-token-issues",children:"Purchase Token Issues"}),"\n",(0,t.jsx)(n.h3,{id:"ios-purchasetoken-is-null",children:"iOS purchaseToken is null"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Problem"}),": ",(0,t.jsx)(n.code,{children:"purchaseToken"})," is null on iOS in older versions."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),": Upgrade to v6.0.0 which includes JWS representation:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// v6.0.0+ - purchaseToken now available on iOS\npurchase.purchaseToken; // Contains JWS for server validation\n\n// DEPRECATED - use purchaseToken instead\npurchase.jwsRepresentationIOS; // [DEPRECATED] Use purchaseToken instead\n"})}),"\n",(0,t.jsx)(n.h3,{id:"server-validation-with-unified-token",children:"Server Validation with Unified Token"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"New in v6.0.0"}),": Use the same ",(0,t.jsx)(n.code,{children:"purchaseToken"})," field for both platforms:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Cross-platform server validation\nvoid validatePurchase(PurchasedItem purchase) {\n  final token = purchase.purchaseToken; // Works on both iOS & Android\n\n  if (purchase.platform == IapPlatform.ios) {\n    // token contains JWS (JWT format)\n    validateWithApple(token);\n  } else {\n    // token contains Google Play purchase token\n    validateWithGoogle(token);\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites-checklist",children:"Prerequisites Checklist"}),"\n",(0,t.jsx)(n.p,{children:"Before troubleshooting, ensure you have completed the basic setup:"}),"\n",(0,t.jsx)(n.h3,{id:"flutter-setup",children:"Flutter Setup"}),"\n",(0,t.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Flutter SDK 3.0.0 or higher"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Dart SDK 2.17.0 or higher"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","flutter_inapp_purchase v6.0.0 added to ",(0,t.jsx)(n.code,{children:"pubspec.yaml"})]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Run ",(0,t.jsx)(n.code,{children:"flutter pub get"})," after adding dependency"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"project-configuration",children:"Project Configuration"}),"\n",(0,t.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Minimum SDK versions set correctly:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Android: ",(0,t.jsx)(n.code,{children:"minSdkVersion 21"})," or higher"]}),"\n",(0,t.jsxs)(n.li,{children:["iOS: ",(0,t.jsx)(n.code,{children:"ios.deploymentTarget = '12.0'"})," or higher"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Platform-specific permissions configured"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Bundle ID matches store configuration"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# pubspec.yaml\ndependencies:\n  flutter_inapp_purchase: ^6.0.0\n\n# android/app/build.gradle\nandroid {\n    compileSdkVersion 34\n    defaultConfig {\n        minSdkVersion 21\n        targetSdkVersion 34\n    }\n}\n\n# ios/Runner.xcodeproj/project.pbxproj\nIPHONEOS_DEPLOYMENT_TARGET = 12.0;\n"})}),"\n",(0,t.jsx)(n.h2,{id:"app-store-setup-ios",children:"App Store Setup (iOS)"}),"\n",(0,t.jsx)(n.h3,{id:"required-configurations",children:"Required Configurations"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"App Store Connect Setup"})}),"\n",(0,t.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","App registered in App Store Connect"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Bundle ID matches your app"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","In-App Purchases configured and approved"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Test users added to sandbox"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Xcode Configuration"})}),"\n",(0,t.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","In-App Purchase capability enabled"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Code signing configured"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Bundle ID matches App Store Connect"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Product Configuration"})}),"\n",(0,t.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Product IDs match exactly (case-sensitive)"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ",'Products are in "Ready to Submit" status']}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","At least one screenshot uploaded per product"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Verify your product IDs match exactly\nfinal productIds = [\n  'com.yourapp.premium',     // Must match App Store Connect\n  'com.yourapp.coins_100',   // Case-sensitive\n];\n\n// Test with actual product IDs from App Store Connect\nfinal products = await FlutterInappPurchase.instance.getProducts(productIds);\ndebugPrint('Found ${products.length} products');\n"})}),"\n",(0,t.jsx)(n.h2,{id:"google-play-setup-android",children:"Google Play Setup (Android)"}),"\n",(0,t.jsx)(n.h3,{id:"required-configurations-1",children:"Required Configurations"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Google Play Console Setup"})}),"\n",(0,t.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","App uploaded to Play Console (at least Internal Testing)"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","In-app products created and activated"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","License testing accounts configured"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","App bundle signed and uploaded"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Android Configuration"})}),"\n",(0,t.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,t.jsx)(n.code,{children:"BILLING"})," permission in AndroidManifest.xml"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Play Billing Library dependency (handled by plugin)"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","ProGuard rules configured if using code obfuscation"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Testing Setup"})}),"\n",(0,t.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","License testing accounts added in Play Console"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Test using signed APK/AAB (not debug build)"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ",'Products are "Active" in Play Console']}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'\x3c!-- android/app/src/main/AndroidManifest.xml --\x3e\n<uses-permission android:name="com.android.vending.BILLING" />\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Test connection on Android\nFuture<void> testAndroidConnection() async {\n  try {\n    final result = await FlutterInappPurchase.instance.initConnection();\n    debugPrint('Android connection result: $result');\n\n    // Test product loading\n    final products = await FlutterInappPurchase.instance.getProducts([\n      'your_product_id_from_play_console'\n    ]);\n    debugPrint('Loaded ${products.length} products');\n  } catch (e) {\n    debugPrint('Android connection failed: $e');\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"common-issues",children:"Common Issues"}),"\n",(0,t.jsx)(n.h3,{id:"requestproducts-returns-an-empty-array",children:"requestProducts() returns an empty array"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"getProducts()"})," or ",(0,t.jsx)(n.code,{children:"requestProducts()"})," returns empty list"]}),"\n",(0,t.jsx)(n.li,{children:"Products configured in store but not loading"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"class ProductLoadingTroubleshooter {\n  static Future<void> diagnoseProductLoading() async {\n    final productIds = ['your.product.id'];\n\n    // 1. Check connection first\n    final connected = await _ensureConnection();\n    if (!connected) {\n      debugPrint('\u274c Store not connected');\n      return;\n    }\n\n    // 2. Try loading products with error handling\n    try {\n      await FlutterInappPurchase.instance.requestProducts(\n        RequestProductsParams(skus: productIds, type: PurchaseType.inapp),\n      );\n\n      final products = await FlutterInappPurchase.instance.getProducts(productIds);\n\n      if (products.isEmpty) {\n        debugPrint('\u274c No products loaded');\n        await _diagnoseEmptyProducts(productIds);\n      } else {\n        debugPrint('\u2705 Loaded ${products.length} products');\n        for (final product in products) {\n          debugPrint('Product: ${product.productId} - ${product.title}');\n        }\n      }\n    } catch (e) {\n      debugPrint('\u274c Product loading error: $e');\n    }\n  }\n\n  static Future<void> _diagnoseEmptyProducts(List<String> productIds) async {\n    debugPrint('Diagnosing empty product list...');\n\n    // Check product ID format\n    for (final id in productIds) {\n      debugPrint('Checking product ID: $id');\n\n      if (Platform.isIOS) {\n        // iOS product IDs should not contain bundle ID\n        if (id.contains('.')) {\n          debugPrint('\u26a0\ufe0f iOS product ID contains dots - verify format');\n        }\n      } else if (Platform.isAndroid) {\n        // Android product IDs are typically reverse domain notation\n        if (!id.contains('.')) {\n          debugPrint('\u26a0\ufe0f Android product ID missing dots - verify format');\n        }\n      }\n    }\n\n    // Suggest solutions\n    debugPrint('\\n\ud83d\udd27 Troubleshooting steps:');\n    debugPrint('1. Verify product IDs match store configuration exactly');\n    debugPrint('2. Check if products are approved/active in store');\n    debugPrint('3. Ensure app version matches store configuration');\n    debugPrint('4. Try with test product IDs first');\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"useiap-hook-not-working",children:"useIAP hook not working"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Problem:"})," Provider or state management not working properly"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Ensure proper provider setup\nclass IAPProviderSetup {\n  static Widget setupProvider(Widget child) {\n    return IapProviderWidget(\n      child: child,\n    );\n  }\n}\n\n// In your main.dart\nvoid main() {\n  runApp(\n    IAPProviderSetup.setupProvider(\n      MyApp(),\n    ),\n  );\n}\n\n// Access provider in widgets\nclass ProductScreen extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    final iapProvider = IapProvider.of(context);\n\n    if (iapProvider == null) {\n      return Text('\u274c IAP Provider not found - check widget tree');\n    }\n\n    if (!iapProvider.connected) {\n      return Text('\u23f3 Connecting to store...');\n    }\n\n    return Text('\u2705 Store connected');\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"purchase-flow-issues",children:"Purchase flow issues"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Common purchase problems and solutions:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"class PurchaseFlowTroubleshooter {\n  static void setupComprehensivePurchaseFlow() {\n    // 1. Set up listeners BEFORE making purchases\n    FlutterInappPurchase.purchaseUpdated.listen((purchase) {\n      if (purchase != null) {\n        debugPrint('\u2705 Purchase successful: ${purchase.productId}');\n        _handlePurchaseSuccess(purchase);\n      }\n    });\n\n    FlutterInappPurchase.purchaseError.listen((error) {\n      if (error != null) {\n        debugPrint('\u274c Purchase error: ${error.message}');\n        _handlePurchaseError(error);\n      }\n    });\n  }\n\n  static Future<void> makePurchaseWithDiagnostics(String productId) async {\n    debugPrint('\ud83d\uded2 Initiating purchase for: $productId');\n\n    try {\n      // Pre-purchase checks\n      final connected = await _verifyConnection();\n      if (!connected) {\n        throw Exception('Store not connected');\n      }\n\n      final productExists = await _verifyProduct(productId);\n      if (!productExists) {\n        throw Exception('Product not found: $productId');\n      }\n\n      // Make purchase\n      await FlutterInappPurchase.instance.requestPurchase(\n        request: RequestPurchase(\n          ios: RequestPurchaseIOS(sku: productId, quantity: 1),\n          android: RequestPurchaseAndroid(skus: [productId]),\n        ),\n        type: PurchaseType.inapp,\n      );\n\n      debugPrint('\ud83d\udcf1 Purchase dialog should appear now');\n\n    } catch (e) {\n      debugPrint('\u274c Purchase initiation failed: $e');\n      _suggestPurchaseSolutions(e);\n    }\n  }\n\n  static void _handlePurchaseError(PurchaseResult error) {\n    switch (error.responseCode) {\n      case 1:\n        debugPrint('User cancelled purchase');\n        break;\n      case 7:\n        debugPrint('User already owns this item - consuming...');\n        _handleAlreadyOwned(error);\n        break;\n      default:\n        debugPrint('Purchase error ${error.responseCode}: ${error.message}');\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"connection-issues",children:"Connection issues"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Connection problems and diagnostics:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"class ConnectionDiagnostics {\n  static Future<void> runConnectionDiagnostics() async {\n    debugPrint('\ud83d\udd0d Running connection diagnostics...');\n\n    // Test 1: Basic connection\n    try {\n      await FlutterInappPurchase.instance.initConnection();\n      debugPrint('\u2705 Basic connection successful');\n    } catch (e) {\n      debugPrint('\u274c Basic connection failed: $e');\n      return;\n    }\n\n    // Test 2: Platform-specific checks\n    if (Platform.isIOS) {\n      await _checkIOSConnection();\n    } else if (Platform.isAndroid) {\n      await _checkAndroidConnection();\n    }\n\n    // Test 3: Product loading test\n    await _testProductLoading();\n  }\n\n  static Future<void> _checkIOSConnection() async {\n    debugPrint('\ud83c\udf4e Checking iOS connection...');\n\n    try {\n      // Check if payments are allowed\n      final canMakePayments = await FlutterInappPurchase.instance.initialize();\n      if (!canMakePayments) {\n        debugPrint('\u274c Device cannot make payments');\n        debugPrint('\ud83d\udca1 Check: Screen Time restrictions, parental controls');\n        return;\n      }\n\n      debugPrint('\u2705 iOS payments are allowed');\n    } catch (e) {\n      debugPrint('\u274c iOS connection check failed: $e');\n    }\n  }\n\n  static Future<void> _checkAndroidConnection() async {\n    debugPrint('\ud83e\udd16 Checking Android connection...');\n\n    try {\n      final connectionState = await FlutterInappPurchase.instance.getConnectionStateAndroid();\n      debugPrint('Android connection state: $connectionState');\n\n      if (connectionState != 'connected') {\n        debugPrint('\u274c Android billing service not connected');\n        debugPrint('\ud83d\udca1 Check: Google Play Services, Play Store app updates');\n        return;\n      }\n\n      debugPrint('\u2705 Android billing service connected');\n    } catch (e) {\n      debugPrint('\u274c Android connection check failed: $e');\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"ios-purchase-state-detection-issues",children:"iOS Purchase State Detection Issues"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Problem"}),': iOS purchases succeed but UI remains stuck in "Processing..." state.']}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Purchase logs show valid ",(0,t.jsx)(n.code,{children:"purchaseToken"})," and ",(0,t.jsx)(n.code,{children:"transactionId"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"transactionStateIOS"})," returns ",(0,t.jsx)(n.code,{children:"null"})]}),"\n",(0,t.jsx)(n.li,{children:"UI doesn't update to success state"}),"\n",(0,t.jsx)(n.li,{children:"Transaction completes but user doesn't see confirmation"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Root Cause"}),": iOS App Store sometimes returns ",(0,t.jsx)(n.code,{children:"null"})," for ",(0,t.jsx)(n.code,{children:"transactionStateIOS"})," even when purchases are successful."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),": Use enhanced purchase state detection logic:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"Future<void> _handlePurchaseUpdate(Purchase purchase) async {\n  bool isPurchased = false;\n\n  if (Platform.isIOS) {\n    // Enhanced iOS detection - check multiple conditions\n    bool condition1 = purchase.transactionStateIOS == TransactionState.purchased;\n    bool condition2 = purchase.purchaseToken != null && purchase.purchaseToken!.isNotEmpty;\n    bool condition3 = purchase.transactionId != null && purchase.transactionId!.isNotEmpty;\n\n    // For iOS, any valid token or transaction ID usually indicates success\n    isPurchased = condition1 || condition2 || condition3;\n\n    print('iOS purchase state detection:');\n    print('  transactionStateIOS == purchased: $condition1');\n    print('  has valid purchaseToken: $condition2');\n    print('  has valid transactionId: $condition3');\n    print('  Final result: $isPurchased');\n  }\n\n  if (isPurchased) {\n    // Update UI immediately\n    setState(() {\n      _isProcessing = false;\n      _purchaseResult = '\u2705 Purchase successful';\n    });\n\n    // Finish the transaction\n    await FlutterInappPurchase.instance.finishTransaction(purchase);\n  }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Timeout Error Handling"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"void _handlePurchaseError(PurchaseError error) {\n  if (error.message.contains('\uc694\uccad\ud55c \uc2dc\uac04\uc774 \ucd08\uacfc\ub418\uc5c8\uc2b5\ub2c8\ub2e4') ||\n      error.message.contains('timeout')) {\n    // Apple server timeout - provide user guidance\n    setState(() {\n      _purchaseResult = '''\n\u23f1\ufe0f Request Timeout - Apple Server Issue\n\nSuggested actions:\n1. Check internet connection\n2. Wait 2-3 minutes and try again\n3. Restart the app\n4. Try on different network (WiFi/Cellular)\n5. Restart device if problem persists\n\nThis is usually temporary.\n      ''';\n    });\n  }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"See also"}),": ",(0,t.jsx)(n.a,{href:"/docs/6.3/guides/ios-purchase-state-detection",children:"iOS Purchase State Detection Guide"})]}),"\n",(0,t.jsx)(n.h3,{id:"platform-specific-issues",children:"Platform-specific issues"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"iOS Specific:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"class IOSTroubleshooting {\n  static Future<void> diagnoseIOSIssues() async {\n    debugPrint('\ud83c\udf4e Diagnosing iOS-specific issues...');\n\n    // Check sandbox vs production\n    if (kDebugMode) {\n      debugPrint('Running in DEBUG mode - using iOS Sandbox');\n      debugPrint('\ud83d\udca1 Ensure you have sandbox test account signed in');\n    } else {\n      debugPrint('Running in RELEASE mode - using Production');\n    }\n\n    // Check StoreKit availability\n    try {\n      final promoted = await FlutterInappPurchase.instance.getPromotedProduct();\n      debugPrint('StoreKit promotional products available: ${promoted != null}');\n    } catch (e) {\n      debugPrint('StoreKit check failed: $e');\n    }\n\n    // Common iOS issues\n    debugPrint('\\n\ud83d\udd27 Common iOS solutions:');\n    debugPrint('1. Sign out and back into sandbox account in Settings');\n    debugPrint('2. Verify products are \"Ready to Submit\" in App Store Connect');\n    debugPrint('3. Check Bundle ID matches exactly');\n    debugPrint('4. Ensure In-App Purchase capability is enabled');\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Android Specific:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"class AndroidTroubleshooting {\n  static Future<void> diagnoseAndroidIssues() async {\n    debugPrint('\ud83e\udd16 Diagnosing Android-specific issues...');\n\n    // Check Play Store availability\n    try {\n      final store = await FlutterInappPurchase.instance.getStore();\n      debugPrint('Current store: $store');\n\n      if (store != 'play') {\n        debugPrint('\u274c Not using Google Play Store');\n        debugPrint('\ud83d\udca1 App must be installed from Play Store for purchases');\n      }\n    } catch (e) {\n      debugPrint('Store check failed: $e');\n    }\n\n    // Check if running on signed build\n    debugPrint('Build mode: ${kDebugMode ? \"DEBUG\" : \"RELEASE\"}');\n    if (kDebugMode) {\n      debugPrint('\u26a0\ufe0f Debug builds may not work with real products');\n      debugPrint('\ud83d\udca1 Use signed build for testing real products');\n    }\n\n    // Common Android issues\n    debugPrint('\\n\ud83d\udd27 Common Android solutions:');\n    debugPrint('1. Use signed APK/AAB, not debug build');\n    debugPrint('2. Add license testing account in Play Console');\n    debugPrint('3. Ensure products are \"Active\" in Play Console');\n    debugPrint('4. Upload app to at least Internal Testing track');\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"debugging-tips",children:"Debugging Tips"}),"\n",(0,t.jsx)(n.h3,{id:"1-enable-verbose-logging",children:"1. Enable verbose logging"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"class DebugLogging {\n  static void enableVerboseLogging() {\n    if (kDebugMode) {\n      // Log all purchase events\n      FlutterInappPurchase.purchaseUpdated.listen((purchase) {\n        debugPrint('\ud83d\udcf1 PURCHASE UPDATE: ${purchase?.toJson()}');\n      });\n\n      FlutterInappPurchase.purchaseError.listen((error) {\n        debugPrint('\u274c PURCHASE ERROR: ${error?.toJson()}');\n      });\n\n      FlutterInappPurchase.connectionUpdated.listen((result) {\n        debugPrint('\ud83d\udd17 CONNECTION UPDATE: $result');\n      });\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-log-purchase-events",children:"2. Log purchase events"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"class PurchaseEventLogger {\n  static void logPurchaseFlow(String step, [Map<String, dynamic>? data]) {\n    final timestamp = DateTime.now().toIso8601String();\n    debugPrint('[$timestamp] PURCHASE: $step');\n\n    if (data != null) {\n      data.forEach((key, value) {\n        debugPrint('  $key: $value');\n      });\n    }\n  }\n\n  // Usage\n  static void example() {\n    logPurchaseFlow('INITIATED', {'productId': 'premium'});\n    logPurchaseFlow('DIALOG_SHOWN');\n    logPurchaseFlow('COMPLETED', {'transactionId': 'txn_123'});\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-monitor-connection-state",children:"3. Monitor connection state"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"class ConnectionMonitor {\n  static void startMonitoring() {\n    Timer.periodic(Duration(seconds: 10), (timer) async {\n      try {\n        final connected = await _checkConnection();\n        debugPrint('\ud83d\udd17 Connection status: ${connected ? \"CONNECTED\" : \"DISCONNECTED\"}');\n\n        if (!connected) {\n          debugPrint('\u26a0\ufe0f Connection lost - attempting reconnect...');\n          await FlutterInappPurchase.instance.initConnection();\n        }\n      } catch (e) {\n        debugPrint('\u274c Connection check failed: $e');\n      }\n    });\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"testing-strategies",children:"Testing Strategies"}),"\n",(0,t.jsx)(n.h3,{id:"1-staged-testing-approach",children:"1. Staged testing approach"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"class StagedTesting {\n  static Future<void> runStagedTests() async {\n    debugPrint('\ud83e\uddea Starting staged testing...');\n\n    // Stage 1: Connection test\n    debugPrint('\\n\ud83d\udcca Stage 1: Connection Test');\n    final connected = await _testConnection();\n    if (!connected) return;\n\n    // Stage 2: Product loading test\n    debugPrint('\\n\ud83d\udcca Stage 2: Product Loading Test');\n    final productsLoaded = await _testProductLoading();\n    if (!productsLoaded) return;\n\n    // Stage 3: Purchase flow test\n    debugPrint('\\n\ud83d\udcca Stage 3: Purchase Flow Test');\n    await _testPurchaseFlow();\n\n    debugPrint('\\n\u2705 All tests completed');\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-test-different-scenarios",children:"2. Test different scenarios"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"class ScenarioTesting {\n  static Future<void> testAllScenarios() async {\n    final scenarios = [\n      'first_time_user',\n      'returning_user',\n      'user_with_existing_purchases',\n      'network_interruption',\n      'app_backgrounded_during_purchase',\n    ];\n\n    for (final scenario in scenarios) {\n      debugPrint('\ud83c\udfad Testing scenario: $scenario');\n      await _testScenario(scenario);\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-device-testing-matrix",children:"3. Device testing matrix"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"class DeviceTestMatrix {\n  static const testMatrix = {\n    'iOS': [\n      {'version': '15.0', 'device': 'iPhone 12'},\n      {'version': '16.0', 'device': 'iPhone 14'},\n      {'version': '17.0', 'device': 'iPhone 15'},\n    ],\n    'Android': [\n      {'version': '11', 'device': 'Pixel 5'},\n      {'version': '12', 'device': 'Samsung S22'},\n      {'version': '13', 'device': 'Pixel 7'},\n    ],\n  };\n\n  static void logTestResults(String platform, String version, bool passed) {\n    debugPrint('\ud83d\udcf1 Test Result: $platform $version - ${passed ? \"PASSED\" : \"FAILED\"}');\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"error-code-reference",children:"Error Code Reference"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"class ErrorCodeReference {\n  static String getErrorDescription(int code) {\n    switch (code) {\n      case 0:\n        return 'OK - Success';\n      case 1:\n        return 'User Canceled - User pressed back or canceled a dialog';\n      case 2:\n        return 'Service Unavailable - Network connection is down';\n      case 3:\n        return 'Billing Unavailable - Billing API version is not supported';\n      case 4:\n        return 'Item Unavailable - Requested product is not available';\n      case 5:\n        return 'Developer Error - Invalid arguments provided to the API';\n      case 6:\n        return 'Error - Fatal error during the API action';\n      case 7:\n        return 'Item Already Owned - User already owns the item';\n      case 8:\n        return 'Item Not Owned - User does not own the item';\n      default:\n        return 'Unknown Error Code: $code';\n    }\n  }\n\n  static void logError(PurchaseResult error) {\n    debugPrint('\u274c Error ${error.responseCode}: ${getErrorDescription(error.responseCode ?? -1)}');\n    debugPrint('   Message: ${error.message}');\n    debugPrint('   Debug Message: ${error.debugMessage}');\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"getting-help",children:"Getting Help"}),"\n",(0,t.jsx)(n.h3,{id:"bug-report-template",children:"Bug report template"}),"\n",(0,t.jsx)(n.p,{children:"When reporting issues, please include:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"**Environment:**\n- flutter_inapp_purchase version: 6.0.0\n- Flutter version: [run `flutter --version`]\n- Platform: iOS/Android\n- Device/OS version:\n\n**Store Setup:**\n- [ ] Products configured in App Store Connect/Play Console\n- [ ] App uploaded to store (Internal Testing for Android)\n- [ ] Test accounts configured\n\n**Issue Description:**\n[Describe what you expected vs what actually happened]\n\n**Code Sample:**\n```dart\n// Minimal reproducible code\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Logs:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"// Error logs and debug output\n// Enable verbose logging first\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Troubleshooting Attempted:"})}),"\n",(0,t.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Verified product IDs match store configuration"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Tested with signed build (Android)"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Checked connection status"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Reviewed platform-specific setup"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Additional Context:"}),"\n[Any other relevant information]"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\n### Debug checklist\n\nBefore reporting bugs, verify:\n\n- [ ] Product IDs match store configuration exactly\n- [ ] App is properly configured in respective store\n- [ ] Using signed build for testing (Android)\n- [ ] Connection established before making requests\n- [ ] Purchase listeners set up before purchase attempts\n- [ ] Error handling implemented\n- [ ] Tested on physical device\n- [ ] Verbose logging enabled\n\nFor additional help:\n- Check [GitHub Issues](https://github.com/hyochan/flutter_inapp_purchase/issues)\n- Review [API Documentation](../api/flutter-inapp-purchase.md)\n- Test with [Example App](https://github.com/hyochan/flutter_inapp_purchase/tree/main/example)\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var i=s(6540);const t={},r=i.createContext(t);function o(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);