"use strict";(self.webpackChunkflutter_inapp_purchase_docs=self.webpackChunkflutter_inapp_purchase_docs||[]).push([[6883],{1862:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"guides/basic-setup","title":"Basic Setup Guide","description":"Learn the fundamentals of setting up in-app purchases with flutterinapppurchase.","source":"@site/versioned_docs/version-6.3/guides/basic-setup.md","sourceDirName":"guides","slug":"/guides/basic-setup","permalink":"/docs/6.3/guides/basic-setup","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/versioned_docs/version-6.3/guides/basic-setup.md","tags":[],"version":"6.3","sidebarPosition":1,"frontMatter":{"title":"Basic Setup Guide","sidebar_label":"Basic Setup","sidebar_position":1}}');var i=r(4848),s=r(8453);const a={title:"Basic Setup Guide",sidebar_label:"Basic Setup",sidebar_position:1},o="\ud83d\udcd6 Basic Setup Guide",c={},d=[{value:"\ud83c\udfaf Overview",id:"-overview",level:2},{value:"\ud83c\udfd7\ufe0f Project Structure",id:"\ufe0f-project-structure",level:2},{value:"\ud83d\udd27 Creating the IAP Service",id:"-creating-the-iap-service",level:2},{value:"\ud83d\udda5\ufe0f Creating the Store Screen",id:"\ufe0f-creating-the-store-screen",level:2},{value:"\ud83d\udd0c Integrating with Your App",id:"-integrating-with-your-app",level:2},{value:"\u2705 Testing Your Setup",id:"-testing-your-setup",level:2},{value:"\ud83d\udea8 Important Security Notes",id:"-important-security-notes",level:2},{value:"\ud83c\udfaf Next Steps",id:"-next-steps",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"-basic-setup-guide",children:"\ud83d\udcd6 Basic Setup Guide"})}),"\n",(0,i.jsx)(n.p,{children:"Learn the fundamentals of setting up in-app purchases with flutter_inapp_purchase."}),"\n",(0,i.jsx)(n.h2,{id:"-overview",children:"\ud83c\udfaf Overview"}),"\n",(0,i.jsx)(n.p,{children:"This guide covers the essential steps for implementing basic in-app purchases in your Flutter app. By the end, you'll have a working purchase flow that handles both iOS and Android platforms."}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-project-structure",children:"\ud83c\udfd7\ufe0f Project Structure"}),"\n",(0,i.jsx)(n.p,{children:"First, let's organize our code properly:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"lib/\n\u251c\u2500\u2500 main.dart\n\u251c\u2500\u2500 services/\n\u2502   \u251c\u2500\u2500 iap_service.dart      # Purchase logic\n\u2502   \u2514\u2500\u2500 purchase_handler.dart # Purchase event handling\n\u251c\u2500\u2500 models/\n\u2502   \u2514\u2500\u2500 product_model.dart    # Product data models\n\u2514\u2500\u2500 screens/\n    \u2514\u2500\u2500 store_screen.dart     # Purchase UI\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-creating-the-iap-service",children:"\ud83d\udd27 Creating the IAP Service"}),"\n",(0,i.jsx)(n.p,{children:"Create a dedicated service class to handle all purchase operations:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",metastring:'title="lib/services/iap_service.dart"',children:"import 'dart:async';\nimport 'package:flutter/services.dart';\nimport 'package:flutter_inapp_purchase/flutter_inapp_purchase.dart';\n\nclass IAPService {\n  static final IAPService _instance = IAPService._internal();\n  factory IAPService() => _instance;\n  IAPService._internal();\n\n  // Stream subscriptions\n  StreamSubscription<PurchasedItem?>? _purchaseSubscription;\n  StreamSubscription<PurchaseResult?>? _errorSubscription;\n\n  // Connection state\n  bool _isInitialized = false;\n  bool get isInitialized => _isInitialized;\n\n  // Product IDs - Configure these for your app\n  static const List<String> _productIds = [\n    'remove_ads',\n    'premium_upgrade',\n    'extra_lives',\n  ];\n\n  static const List<String> _subscriptionIds = [\n    'monthly_premium',\n    'yearly_premium',\n  ];\n\n  /// Initialize the IAP service\n  Future<bool> initialize() async {\n    if (_isInitialized) return true;\n\n    try {\n      // Initialize connection\n      await FlutterInappPurchase.instance.initConnection();\n\n      // Set up purchase listeners\n      _setupPurchaseListeners();\n\n      _isInitialized = true;\n      print('\u2705 IAP Service initialized successfully');\n      return true;\n    } catch (e) {\n      print('\u274c Failed to initialize IAP Service: $e');\n      return false;\n    }\n  }\n\n  /// Set up purchase event listeners\n  void _setupPurchaseListeners() {\n    // Listen for successful purchases\n    _purchaseSubscription = FlutterInappPurchase.purchaseUpdated.listen(\n      (purchase) async {\n        if (purchase != null) {\n          await _handlePurchaseUpdate(purchase);\n        }\n      },\n      onError: (error) {\n        print('Purchase stream error: $error');\n      },\n    );\n\n    // Listen for purchase errors\n    _errorSubscription = FlutterInappPurchase.purchaseError.listen(\n      (error) {\n        if (error != null) {\n          _handlePurchaseError(error);\n        }\n      },\n    );\n  }\n\n  /// Handle successful purchase updates\n  Future<void> _handlePurchaseUpdate(PurchasedItem purchase) async {\n    print('\ud83c\udf89 Purchase received: ${purchase.productId}');\n\n    try {\n      // 1. Verify the purchase (implement your server verification here)\n      final isValid = await _verifyPurchase(purchase);\n\n      if (!isValid) {\n        print('\u274c Purchase verification failed');\n        return;\n      }\n\n      // 2. Grant the purchased content\n      await _grantPurchasedContent(purchase);\n\n      // 3. Complete the transaction\n      await FlutterInappPurchase.instance.finishTransaction(\n        purchase,\n        isConsumable: _isConsumableProduct(purchase.productId ?? ''),\n      );\n\n      print('\u2705 Purchase completed successfully: ${purchase.productId}');\n    } catch (e) {\n      print('\u274c Error handling purchase: $e');\n    }\n  }\n\n  /// Handle purchase errors\n  void _handlePurchaseError(PurchaseResult error) {\n    print('\ud83d\udca5 Purchase error: ${error.message}');\n\n    // Handle specific error codes\n    switch (error.code) {\n      case ErrorCode.eUserCancelled:\n        print('\u2139\ufe0f User cancelled the purchase');\n        break;\n      case ErrorCode.eNetworkError:\n        print('\ud83c\udf10 Network error occurred');\n        // Show retry option to user\n        break;\n      case ErrorCode.eItemUnavailable:\n        print('\ud83d\udeab Product is not available');\n        break;\n      case ErrorCode.eAlreadyOwned:\n        print('\u2705 User already owns this product');\n        // Restore the purchase\n        break;\n      default:\n        print('\u2753 Unknown error: ${error.message}');\n    }\n  }\n\n  /// Verify purchase with your server\n  Future<bool> _verifyPurchase(PurchasedItem purchase) async {\n    // TODO: Implement server-side verification\n    // This is crucial for security!\n\n    // For now, return true (implement proper verification)\n    await Future.delayed(Duration(milliseconds: 500)); // Simulate API call\n    return true;\n  }\n\n  /// Grant purchased content to the user\n  Future<void> _grantPurchasedContent(PurchasedItem purchase) async {\n    final productId = purchase.productId ?? '';\n\n    // Grant content based on product ID\n    switch (productId) {\n      case 'remove_ads':\n        await _removeAds();\n        break;\n      case 'premium_upgrade':\n        await _unlockPremiumFeatures();\n        break;\n      case 'extra_lives':\n        await _addExtraLives();\n        break;\n      case 'monthly_premium':\n      case 'yearly_premium':\n        await _activateSubscription(productId);\n        break;\n      default:\n        print('\u26a0\ufe0f Unknown product: $productId');\n    }\n  }\n\n  /// Check if a product is consumable\n  bool _isConsumableProduct(String productId) {\n    const consumableProducts = ['extra_lives'];\n    return consumableProducts.contains(productId);\n  }\n\n  /// Get available products\n  Future<List<IapItem>> getProducts() async {\n    if (!_isInitialized) {\n      throw Exception('IAP Service not initialized');\n    }\n\n    try {\n      final products = await FlutterInappPurchase.instance.getProducts(_productIds);\n      print('\ud83d\udce6 Found ${products.length} products');\n      return products;\n    } catch (e) {\n      print('\u274c Error fetching products: $e');\n      throw e;\n    }\n  }\n\n  /// Get available subscriptions\n  Future<List<IapItem>> getSubscriptions() async {\n    if (!_isInitialized) {\n      throw Exception('IAP Service not initialized');\n    }\n\n    try {\n      final subscriptions = await FlutterInappPurchase.instance.getSubscriptions(_subscriptionIds);\n      print('\ud83d\udcd1 Found ${subscriptions.length} subscriptions');\n      return subscriptions;\n    } catch (e) {\n      print('\u274c Error fetching subscriptions: $e');\n      throw e;\n    }\n  }\n\n  /// Purchase a product\n  Future<void> purchaseProduct(String productId) async {\n    if (!_isInitialized) {\n      throw Exception('IAP Service not initialized');\n    }\n\n    try {\n      print('\ud83d\uded2 Requesting purchase for: $productId');\n\n      await FlutterInappPurchase.instance.requestPurchaseSimple(\n        productId: productId,\n        type: _subscriptionIds.contains(productId)\n            ? PurchaseType.subs\n            : PurchaseType.inapp,\n      );\n    } catch (e) {\n      print('\u274c Error requesting purchase: $e');\n      throw e;\n    }\n  }\n\n  /// Restore purchases\n  Future<void> restorePurchases() async {\n    if (!_isInitialized) {\n      throw Exception('IAP Service not initialized');\n    }\n\n    try {\n      print('\ud83d\udd04 Restoring purchases...');\n\n      final purchases = await FlutterInappPurchase.instance.getAvailablePurchases();\n\n      if (purchases == null || purchases.isEmpty) {\n        print('\u2139\ufe0f No purchases to restore');\n        return;\n      }\n\n      print('\ud83c\udf89 Found ${purchases.length} purchases to restore');\n\n      for (final purchase in purchases) {\n        await _grantPurchasedContent(purchase);\n      }\n    } catch (e) {\n      print('\u274c Error restoring purchases: $e');\n      throw e;\n    }\n  }\n\n  /// Clean up resources\n  Future<void> dispose() async {\n    await _purchaseSubscription?.cancel();\n    await _errorSubscription?.cancel();\n\n    if (_isInitialized) {\n      await FlutterInappPurchase.instance.endConnection();\n      _isInitialized = false;\n    }\n\n    print('\ud83e\uddf9 IAP Service disposed');\n  }\n\n  // Content granting methods (implement based on your app's needs)\n  Future<void> _removeAds() async {\n    // Remove ads from your app\n    print('\ud83d\udeab Ads removed');\n  }\n\n  Future<void> _unlockPremiumFeatures() async {\n    // Unlock premium features\n    print('\u2b50 Premium features unlocked');\n  }\n\n  Future<void> _addExtraLives() async {\n    // Add extra lives or credits\n    print('\u2764\ufe0f Extra lives added');\n  }\n\n  Future<void> _activateSubscription(String subscriptionId) async {\n    // Activate subscription benefits\n    print('\ud83d\udcc5 Subscription activated: $subscriptionId');\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-creating-the-store-screen",children:"\ud83d\udda5\ufe0f Creating the Store Screen"}),"\n",(0,i.jsx)(n.p,{children:"Now create a simple store interface:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",metastring:'title="lib/screens/store_screen.dart"',children:"import 'package:flutter/material.dart';\nimport 'package:flutter_inapp_purchase/flutter_inapp_purchase.dart';\nimport '../services/iap_service.dart';\n\nclass StoreScreen extends StatefulWidget {\n  @override\n  _StoreScreenState createState() => _StoreScreenState();\n}\n\nclass _StoreScreenState extends State<StoreScreen> {\n  final IAPService _iapService = IAPService();\n\n  List<IapItem> _products = [];\n  List<IapItem> _subscriptions = [];\n  bool _isLoading = true;\n  String? _error;\n\n  @override\n  void initState() {\n    super.initState();\n    _initializeStore();\n  }\n\n  Future<void> _initializeStore() async {\n    setState(() {\n      _isLoading = true;\n      _error = null;\n    });\n\n    try {\n      // Initialize IAP service\n      final initialized = await _iapService.initialize();\n      if (!initialized) {\n        throw Exception('Failed to initialize IAP service');\n      }\n\n      // Load products and subscriptions\n      final products = await _iapService.getProducts();\n      final subscriptions = await _iapService.getSubscriptions();\n\n      setState(() {\n        _products = products;\n        _subscriptions = subscriptions;\n        _isLoading = false;\n      });\n    } catch (e) {\n      setState(() {\n        _error = e.toString();\n        _isLoading = false;\n      });\n    }\n  }\n\n  Future<void> _purchaseProduct(String productId) async {\n    try {\n      await _iapService.purchaseProduct(productId);\n    } catch (e) {\n      _showErrorDialog('Purchase failed: $e');\n    }\n  }\n\n  Future<void> _restorePurchases() async {\n    try {\n      await _iapService.restorePurchases();\n      _showSuccessDialog('Purchases restored successfully!');\n    } catch (e) {\n      _showErrorDialog('Restore failed: $e');\n    }\n  }\n\n  void _showErrorDialog(String message) {\n    showDialog(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: Text('Error'),\n        content: Text(message),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.pop(context),\n            child: Text('OK'),\n          ),\n        ],\n      ),\n    );\n  }\n\n  void _showSuccessDialog(String message) {\n    showDialog(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: Text('Success'),\n        content: Text(message),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.pop(context),\n            child: Text('OK'),\n          ),\n        ],\n      ),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('\ud83d\uded2 Store'),\n        actions: [\n          IconButton(\n            icon: Icon(Icons.restore),\n            onPressed: _restorePurchases,\n            tooltip: 'Restore Purchases',\n          ),\n        ],\n      ),\n      body: _buildBody(),\n    );\n  }\n\n  Widget _buildBody() {\n    if (_isLoading) {\n      return Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            CircularProgressIndicator(),\n            SizedBox(height: 16),\n            Text('Loading store...'),\n          ],\n        ),\n      );\n    }\n\n    if (_error != null) {\n      return Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            Icon(Icons.error, size: 64, color: Colors.red),\n            SizedBox(height: 16),\n            Text('Error: $_error'),\n            SizedBox(height: 16),\n            ElevatedButton(\n              onPressed: _initializeStore,\n              child: Text('Retry'),\n            ),\n          ],\n        ),\n      );\n    }\n\n    return RefreshIndicator(\n      onRefresh: _initializeStore,\n      child: ListView(\n        padding: EdgeInsets.all(16),\n        children: [\n          if (_products.isNotEmpty) ...[\n            _buildSectionHeader('\ud83d\udc8e Premium Products'),\n            ..._products.map(_buildProductCard),\n            SizedBox(height: 24),\n          ],\n          if (_subscriptions.isNotEmpty) ...[\n            _buildSectionHeader('\ud83d\udcc5 Subscriptions'),\n            ..._subscriptions.map(_buildProductCard),\n          ],\n        ],\n      ),\n    );\n  }\n\n  Widget _buildSectionHeader(String title) {\n    return Padding(\n      padding: EdgeInsets.only(bottom: 12),\n      child: Text(\n        title,\n        style: Theme.of(context).textTheme.headlineSmall?.copyWith(\n          fontWeight: FontWeight.bold,\n        ),\n      ),\n    );\n  }\n\n  Widget _buildProductCard(IapItem product) {\n    return Card(\n      margin: EdgeInsets.only(bottom: 12),\n      child: Padding(\n        padding: EdgeInsets.all(16),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Row(\n              children: [\n                Expanded(\n                  child: Column(\n                    crossAxisAlignment: CrossAxisAlignment.start,\n                    children: [\n                      Text(\n                        product.title ?? 'Unknown Product',\n                        style: Theme.of(context).textTheme.titleMedium?.copyWith(\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                      SizedBox(height: 4),\n                      Text(\n                        product.description ?? 'No description available',\n                        style: Theme.of(context).textTheme.bodyMedium,\n                      ),\n                    ],\n                  ),\n                ),\n                SizedBox(width: 12),\n                Column(\n                  crossAxisAlignment: CrossAxisAlignment.end,\n                  children: [\n                    Text(\n                      product.localizedPrice ?? product.price ?? 'N/A',\n                      style: Theme.of(context).textTheme.titleLarge?.copyWith(\n                        fontWeight: FontWeight.bold,\n                        color: Theme.of(context).primaryColor,\n                      ),\n                    ),\n                    SizedBox(height: 8),\n                    ElevatedButton(\n                      onPressed: () => _purchaseProduct(product.productId ?? ''),\n                      child: Text('Buy Now'),\n                    ),\n                  ],\n                ),\n              ],\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    _iapService.dispose();\n    super.dispose();\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-integrating-with-your-app",children:"\ud83d\udd0c Integrating with Your App"}),"\n",(0,i.jsx)(n.p,{children:"Update your main app to include the store:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",metastring:'title="lib/main.dart"',children:"import 'package:flutter/material.dart';\nimport 'screens/store_screen.dart';\nimport 'services/iap_service.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'IAP Demo',\n      theme: ThemeData(primarySwatch: Colors.blue),\n      home: MyHomePage(),\n    );\n  }\n}\n\nclass MyHomePage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('My App')),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            Text(\n              'Welcome to My App!',\n              style: Theme.of(context).textTheme.headlineMedium,\n            ),\n            SizedBox(height: 32),\n            ElevatedButton.icon(\n              icon: Icon(Icons.shopping_cart),\n              label: Text('Open Store'),\n              onPressed: () {\n                Navigator.push(\n                  context,\n                  MaterialPageRoute(builder: (context) => StoreScreen()),\n                );\n              },\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-testing-your-setup",children:"\u2705 Testing Your Setup"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Test Connection"}),": Run the app and open the store screen"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Load Products"}),": Verify products load correctly"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Test Purchase"}),": Try purchasing a test product"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Test Restore"}),": Use the restore button to restore purchases"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Error Handling"}),": Test with airplane mode to verify error handling"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-important-security-notes",children:"\ud83d\udea8 Important Security Notes"}),"\n",(0,i.jsxs)(n.admonition,{title:"Server-Side Verification",type:"warning",children:[(0,i.jsxs)(n.p,{children:["The example above shows a placeholder ",(0,i.jsx)(n.code,{children:"_verifyPurchase()"})," method. In production, you ",(0,i.jsx)(n.strong,{children:"must"})," implement proper server-side verification:"]}),(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Send the purchase receipt to your server"}),"\n",(0,i.jsx)(n.li,{children:"Verify with Apple/Google servers"}),"\n",(0,i.jsx)(n.li,{children:"Only grant content after successful verification"}),"\n"]})]}),"\n",(0,i.jsx)(n.h2,{id:"-next-steps",children:"\ud83c\udfaf Next Steps"}),"\n",(0,i.jsx)(n.p,{children:"Now that you have basic purchases working:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.a,{href:"/guides/error-handling",children:["\ud83d\udd0d ",(0,i.jsx)(n.strong,{children:"Error Handling Guide"})]})," - Comprehensive error handling"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.a,{href:"/guides/testing",children:["\ud83e\uddea ",(0,i.jsx)(n.strong,{children:"Testing Guide"})]})," - Testing strategies and best practices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.a,{href:"/guides/platform-differences",children:["\ud83d\udcf1 ",(0,i.jsx)(n.strong,{children:"Platform Differences"})]})," - iOS vs Android specifics"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.a,{href:"/guides/advanced-features",children:["\ud83d\udca1 ",(0,i.jsx)(n.strong,{children:"Advanced Features"})]})," - Subscriptions, promotional offers, etc."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["\ud83c\udf89 ",(0,i.jsx)(n.strong,{children:"Congratulations!"})," You now have a working in-app purchase system. Remember to test thoroughly on both platforms before releasing to production."]})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var t=r(6540);const i={},s=t.createContext(i);function a(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);